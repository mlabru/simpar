#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2010, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiPAR
#*  Classe...: clsAnv
#*
#*  Descrição: mantém os detalhes de uma aeronave
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração
#*  -----------------------------------------------------------------------------------------------
#*  well     1997/jun/20  versão 1.0 started
#*  mlabru   2009/set/01  versão 3.0 started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    1997/jun/20  versão inicial (DOS/Modula-2)
#*  3.01-01  2009/set/01  versão para Linux
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  clsAnv::clsAnv
#*  -----------------------------------------------------------------------------------------------
#*  mantém os detalhes de uma aeronave
#*  -----------------------------------------------------------------------------------------------
#*/
class clsAnv:

    #** -------------------------------------------------------------------------------------------
    #*  variáveis de classe
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  inicia um objeto aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_oData - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_oData=None ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  inicia uma aeronave
        #*/
        self._szKey = None
        self._szDescr = None

        self._fVelApx = None
        self._fRazMaxSub = None
        self._fRazMaxDesc = None
        self._fRazMaxCurv = None
        self._fTetoServ = None

        #** ---------------------------------------------------------------------------------------
        #*  recebeu uma lista de dados ?
        #*/
        if ( isinstance ( f_oData, list )): 

            #** -----------------------------------------------------------------------------------
            #*  cria uma aeronave com os dados da lista
            #*/
            self.makeAnv ( f_oData )

        #** ---------------------------------------------------------------------------------------
        #*  recebeu uma aeronave ?
        #*/
        elif ( isinstance ( f_oData, clsAnv )):

            #** -----------------------------------------------------------------------------------
            #*  copia a aeronave
            #*/
            self.copyAnv ( f_oData )

        #** ---------------------------------------------------------------------------------------
        #*  senão
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*  deixa como está
            #*/
            pass

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::copyAnv
    #*  -------------------------------------------------------------------------------------------
    #*  copia os dados da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_oAnv - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def copyAnv ( self, f_oAnv ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::copyAnv"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  matricula da aeronave. string. Pode conter qualquer caracter Unicode.
        #*/
        self._szKey = f_oAnv._szKey
        #l_log.info ( "_szKey: " + self._szKey )

        #** ---------------------------------------------------------------------------------------
        #*  nome. string. Pode conter qualquer caracter Unicode.
        #*/
        self._szDescr = f_oAnv._szDescr
        #l_log.info ( "_szDescr: " + str ( self._szDescr ))

        #** ---------------------------------------------------------------------------------------
        #*  velocidade de aproximação. knots. float.
        #*/
        self._fVelApx = f_oAnv._fVelApx
        #l_log.info ( "_fVelApx: " + str ( self._fVelApx ))

        #** ---------------------------------------------------------------------------------------
        #*  razão máxima de subida. ft/min. float.
        #*/
        self._fRazMaxSub = f_oAnv._fRazMaxSub
        #l_log.info ( "_fRazMaxSub: " + str ( self._fRazMaxSub ))

        #** ---------------------------------------------------------------------------------------
        #*  razão máxima de descida. ft/min. float.
        #*/
        self._fRazMaxDesc = f_oAnv._fRazMaxDesc
        #l_log.info ( "_fRazMaxDesc: " + str ( self._fRazMaxDesc ))

        #** ---------------------------------------------------------------------------------------
        #*  razão máxima de curva. gr/seg. float.
        #*/
        self._fRazMaxCurv = f_oAnv._fRazMaxCurv
        #l_log.info ( "_fRazMaxCurv: " + str ( self._fRazMaxCurv ))

        #** ---------------------------------------------------------------------------------------
        #*  teto de serviço. ft. float.
        #*/
        self._fTetoServ = f_oAnv._fTetoServ
        #l_log.info ( "_fTetoServ: " + str ( self._fTetoServ ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::makeAnv
    #*  -------------------------------------------------------------------------------------------
    #*  preenche os dados da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_lstData - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def makeAnv ( self, f_lstData ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::makeAnv"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  matricula da aeronave. string. Pode conter qualquer caracter Unicode.
        #*/
        self._szKey = str ( f_lstData [ 0 ] ).upper ()
        #l_log.info ( "_szKey: " + self._szKey )

        #** ---------------------------------------------------------------------------------------
        #*  nome. string. Pode conter qualquer caracter Unicode.
        #*/
        self._szDescr = str ( f_lstData [ 1 ] ).upper ()
        #l_log.info ( "_szDescr: " + str ( self._szDescr ))

        #** ---------------------------------------------------------------------------------------
        #*  velocidade de aproximação. knots. float.
        #*/
        self._fVelApx = float ( f_lstData [ 2 ] )
        #l_log.info ( "_fVelApx: " + str ( self._fVelApx ))

        #** ---------------------------------------------------------------------------------------
        #*  razão máxima de subida. ft/min. float.
        #*/
        self._fRazMaxSub = float ( f_lstData [ 3 ] )
        #l_log.info ( "_fRazMaxSub: " + str ( self._fRazMaxSub ))

        #** ---------------------------------------------------------------------------------------
        #*  razão máxima de descida. ft/min. float.
        #*/
        self._fRazMaxDesc = float ( f_lstData [ 4 ] )
        #l_log.info ( "_fRazMaxDesc: " + str ( self._fRazMaxDesc ))

        #** ---------------------------------------------------------------------------------------
        #*  razão máxima de curva. gr/seg. float.
        #*/
        self._fRazMaxCurv = float ( f_lstData [ 5 ] )
        #l_log.info ( "_fRazMaxCurv: " + str ( self._fRazMaxCurv ))

        #** ---------------------------------------------------------------------------------------
        #*  teto de serviço. ft. float.
        #*/
        self._fTetoServ = float ( f_lstData [ 6 ] )
        #l_log.info ( "_fTetoServ: " + str ( self._fTetoServ ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** ===========================================================================================
    #*  rotinas de exportação de dados de aeronaves
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getAnvAltitudeMaxima
    #*  -------------------------------------------------------------------------------------------
    #*  retorna a altitude maxima para esta aeronave em pes
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAnvAltitudeMaxima ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getAnvAltitudeMaxima"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._fTetoServ * 1.5 )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::getAnvDescricao
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAnvDescricao ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::getAnvDescricao"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._szDescr )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getAnvRazaoMaxCurva
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAnvRazaoMaxCurva ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getAnvRazaoMaxCurva"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._fRazMaxCurv )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getAnvRazaoMaxDescida
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAnvRazaoMaxDescida ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getAnvRazaoMaxDescida"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._fRazMaxDesc )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getAnvRazaoMaxSubida
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAnvRazaoMaxSubida ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getAnvRazaoMaxSubida"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._fRazMaxSub )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::getAnvKey
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAnvKey ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::getAnvKey"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._szKey )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::getAnvTetoServ
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAnvTetoServ ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::getAnvTetoServ"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._fTetoServ )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::getAnvVelApx
    #*  -------------------------------------------------------------------------------------------
    #*  direção anterior da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAnvVelApx ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::getAnvVelApx"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._fVelApx )

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "clsAnv" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** -----------------------------------------------------------------------------------------------
#*  this is the bootstrap process
#*/
if ( '__main__' == __name__ ):

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    logging.basicConfig ()

    #** -------------------------------------------------------------------------------------------
    #*
    l_Anv = clsAnv ( [ "ABC", "Tatu-bola", 100.0, 50.0, 50.0, 3.0, 60000 ] )
    #assert ( l_Anv )

#** ----------------------------------------------------------------------------------------------- *#
