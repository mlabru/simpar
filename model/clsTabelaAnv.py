#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2010, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiPAR
#*  Classe...: clsTabelaAnv
#*
#*  Descrição: this class takes care of all interaction with the user
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração
#*  -----------------------------------------------------------------------------------------------
#*  well     1997/jun/20  version started
#*  mlabru   2009/set/01  version started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    1997/jun/20  version started
#*  3.01-01  2009/set/01  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ Python library
#/ ------------------------------------------------------------------------------------------------
import bisect

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ PyQt library
#/ ------------------------------------------------------------------------------------------------
from PyQt4 import QtCore

#/ SiPAR / model
#/ ------------------------------------------------------------------------------------------------
import model.clsAnv as clsAnv
import model.clsTabelaModel as clsTabelaModel

import model.glbDefs as glbDefs
import model.locDefs as locDefs

#** -----------------------------------------------------------------------------------------------
#*  variaveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  clsTabelaAnv::clsTabelaAnv
#*  -----------------------------------------------------------------------------------------------
#*  a Tabela de Aeronaves mantem o conjunto das aeronaves. As aeronaves são mantidas ordenadas por
#*  sua matrícula, assim se este campo for alterado as aeronaves devem ser re-ordenadas. Por esta
#*  razão (e para manter o flag de alteração), todas as atualizações dever ser feitas através do
#*  método updateTabela desta classe.
#*  -----------------------------------------------------------------------------------------------
#*/
class clsTabelaAnv ( clsTabelaModel.clsTabelaModel ):

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaAnv::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the main menu
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaAnv::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  inicia a super class
        #*/
        clsTabelaModel.clsTabelaModel.__init__ ( self )
                               
        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaAnv::exportXML
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_parent - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def exportXML ( self, f_szFName ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaAnv::exportXML"

        #/ file descriptor
        #/ ----------------------------------------------------------------------------------------
        l_fdIn = None

        #/ mensagem de erro
        #/ ----------------------------------------------------------------------------------------
        l_szErro = None


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        try:

            #** -----------------------------------------------------------------------------------
            #*/
            l_fdIn = QtCore.QFile ( f_szFName )
            #assert ( l_fdIn )

            #** -----------------------------------------------------------------------------------
            #*/
            if ( not l_fdIn.open ( QtCore.QIODevice.WriteOnly )):

                #** -------------------------------------------------------------------------------
                #*/
                raise IOError, unicode ( l_fdIn.errorString ())

            #** -----------------------------------------------------------------------------------
            #*/
            l_stream = QtCore.QTextStream ( l_fdIn )
            #assert ( l_stream )

            l_stream.setCodec ( glbDefs.xUNI_CODEC )

            #** -----------------------------------------------------------------------------------
            #*/
            l_stream << ( "<?xml version='1.0' encoding='{0}'?>\n"
                          "<!DOCTYPE TabAnv>\n"
                          "<TabAnv VERSION='1.0'>\n".format ( glbDefs.xUNI_CODEC ))

            #** -----------------------------------------------------------------------------------
            #*/
            for _, l_oAnv in self._aItens:

                #** -------------------------------------------------------------------------------
                #*/
                l_stream << "<ANV Key='{0}' Descrição='{1}'>\n".format ( l_oAnv._szKey, l_oAnv._szDescr.replace ( ' ', '_' )) \
                         << "<VelApx>"   << l_oAnv._fVelApx << "</VelApx>\n" \
                         << "<RazMaxSub>" << l_oAnv._fRazMaxSub << "</RazMaxSub>\n" \
                         << "<RazMaxDesc>" << l_oAnv._fRazMaxDesc << "</RazMaxDesc>\n" \
                         << "<RazMaxCurv>" << l_oAnv._fRazMaxCurv << "</RazMaxCurv>\n" \
                         << "<TetoServ>" << l_oAnv._fTetoServ << "</TetoServ>\n" \
                         << "</ANV>\n"

            #** -----------------------------------------------------------------------------------
            #*/
            l_stream << "</TabAnv>\n"

        #** ---------------------------------------------------------------------------------------
        #*/
        except ( IOError, OSError ), e:

            #** -----------------------------------------------------------------------------------
            #*/
            l_szErro = u"Erro na exportação: {0}".format ( e )

        #** ---------------------------------------------------------------------------------------
        #*/
        finally:

            #** -----------------------------------------------------------------------------------
            #*/
            if ( l_fdIn is not None ):

                #** -------------------------------------------------------------------------------
                #*/
                l_fdIn.close ()

            #** -----------------------------------------------------------------------------------
            #*/
            if ( l_szErro is not None ):

                #** -------------------------------------------------------------------------------
                #*  m.poirot logger
                #*/
                #l_log.debug ( "<< " )

                #** -------------------------------------------------------------------------------
                #*/
                return ( False, l_szErro )

            #** -----------------------------------------------------------------------------------
            #*/
            self._bDirty = False
            #l_log.info ( "self._bDirty: " + str ( self._bDirty ))

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*/
            return ( True, "{0} registros exportados para {1}".format ( len ( self._aItens ),
                                                               QtCore.QFileInfo ( f_szFName ).fileName ()))

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaAnv::loadQDataStream
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def loadQDataStream ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaAnv::loadQDataStream"

        #/ file descriptor
        #/ ----------------------------------------------------------------------------------------
        l_fdIn = None

        #/ mensagem de erro
        #/ ----------------------------------------------------------------------------------------
        l_szErro = None


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  tenta carregar o arquivo...
        #*/
        try:

            #** -----------------------------------------------------------------------------------
            #*  abre o arquivo
            #*/
            l_fdIn = QtCore.QFile ( self._szFName )
            #assert ( l_fdIn )

            #** -----------------------------------------------------------------------------------
            #*  erro na abertura ?
            #*/
            if ( not l_fdIn.open ( QtCore.QIODevice.ReadOnly )):

                #** -------------------------------------------------------------------------------
                #*  gera exception
                #*/
                raise IOError, unicode ( l_fdIn.errorString ())

            #** -----------------------------------------------------------------------------------
            #*  acessa o arquivo como uma stream de dados
            #*/
            l_stream = QtCore.QDataStream ( l_fdIn )
            #assert ( l_stream )

            #** -----------------------------------------------------------------------------------
            #*  lê o magic number
            #*/
            l_iMagic = l_stream.readInt32 ()

            #** -----------------------------------------------------------------------------------
            #*  tipo de arquivo válido ?
            #*/
            if ( clsTabelaModel.c_xxMAGIC_NUMBER != l_iMagic ):

                #** -------------------------------------------------------------------------------
                #*  gera exception
                #*/
                raise IOError, u"tipo de arquivo não reconhecido !"

            #** -----------------------------------------------------------------------------------
            #*  lê a versão do arquivo
            #*/
            l_iVersion = l_stream.readInt32 ()

            #** -----------------------------------------------------------------------------------
            #*  versão muito antiga ?
            #*/
            if ( l_iVersion < clsTabelaModel.c_xxOLD_FILE_VERSION ):

                #** -------------------------------------------------------------------------------
                #*  gera exception
                #*/
                raise IOError, u"formato do arquivo é antigo e não legível !"

            #** -----------------------------------------------------------------------------------
            #*  versão nova ?
            #*/
            elif ( l_iVersion > clsTabelaModel.c_xxFILE_VERSION ):

                #** -------------------------------------------------------------------------------
                #*  gera exception
                #*/
                raise IOError, u"formato do arquivo é novo e não legível !"

            #** -----------------------------------------------------------------------------------
            #*/
            l_stream.setVersion ( QtCore.QDataStream.Qt_4_6 )

            #** -----------------------------------------------------------------------------------
            #*/
            self.clear ( False )

            #** -----------------------------------------------------------------------------------
            #*  enquanto não termina de ler a stream...
            #*/
            while ( not l_stream.atEnd ()):

                #** -------------------------------------------------------------------------------
                #*  cria a área para chave da aeronave
                #*/
                l_szKey = QtCore.QString ()

                #** -------------------------------------------------------------------------------
                #*  lê a chave da aeronave
                #*/
                l_stream >> l_szKey

                #** -------------------------------------------------------------------------------
                #*  cria a área para descrição da aeronave
                #*/
                l_szDescr = QtCore.QString ()

                #** -------------------------------------------------------------------------------
                #*  lê a descrição da aeronave
                #*/
                l_stream >> l_szDescr
                l_szDescr = l_szDescr.replace ( '_', ' ' )

                #** -------------------------------------------------------------------------------
                #*  lê a velocidade de aproximação
                #*/
                l_fVelApx = l_stream.readFloat ()

                #** -------------------------------------------------------------------------------
                #*  lê a razão máxima de subida
                #*/
                l_fRazMaxSub = l_stream.readFloat ()

                #** -------------------------------------------------------------------------------
                #*  lê a razão máxima de descida
                #*/
                l_fRazMaxDesc = l_stream.readFloat ()

                #** -------------------------------------------------------------------------------
                #*  lê a razão máxima de curva
                #*/
                l_fRazMaxCurv = l_stream.readFloat ()

                #** -------------------------------------------------------------------------------
                #*  lê o teto de serviço
                #*/
                l_fTetoServ = l_stream.readFloat ()

                #** -------------------------------------------------------------------------------
                #*  cria a aeronave e coloca na tabela
                #*/
                self.add ( clsAnv.clsAnv ( [ l_szKey, l_szDescr, l_fVelApx, l_fRazMaxSub,
                                             l_fRazMaxDesc, l_fRazMaxCurv, l_fTetoServ ] ), l_szKey )

        #** ---------------------------------------------------------------------------------------
        #*/
        except ( IOError, OSError ), e:

            #** -----------------------------------------------------------------------------------
            #*  cria a mensagem de erro
            #*/
            l_szErro = "Erro na carga: {0}".format ( e )

        #** ---------------------------------------------------------------------------------------
        #*/
        finally:

            #** -----------------------------------------------------------------------------------
            #*  o arquivo foi aberto ?
            #*/
            if ( l_fdIn is not None ):

                #** -------------------------------------------------------------------------------
                #*  fecha o arquivo
                #*/
                l_fdIn.close ()

            #** -----------------------------------------------------------------------------------
            #*  ocorreu alguma exception ?
            #*/
            if ( l_szErro is not None ):

                #** -------------------------------------------------------------------------------
                #*  m.poirot logger
                #*/
                #l_log.debug ( "<< " )

                #** -------------------------------------------------------------------------------
                #*  avisa do erro e cai fora
                #*/
                return ( False, l_szErro )

            #** -----------------------------------------------------------------------------------
            #*  reseta flag
            #*/
            self._bDirty = False
            #l_log.info ( "self._bDirty: " + str ( self._bDirty ))

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*/
            return ( True, "{0} aeronaves carregadas de {1}".format ( len ( self._aItens ),
                                                             QtCore.QFileInfo ( self._szFName ).fileName ()))

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaAnv::populateFromData
    #*  -------------------------------------------------------------------------------------------
    #*  carrega os dados do airplane
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_Data - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def populateFromData ( self, f_Data ):

        #/ globals
        #/ ----------------------------------------------------------------------------------------
        #global locDefs.xMAX_Aeronaves

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaAnv::populateFromData"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  zera indices
        #*/
        l_iD = 0

        #** ---------------------------------------------------------------------------------------
        #*  calcula o número de aeronaves na tabela
        #*/
        locDefs.xMAX_Aeronaves = ( len ( f_Data ) // 7 )
        #l_log.info ( "locDefs.xMAX_Aeronaves: " + str ( locDefs.xMAX_Aeronaves ))

        #** ---------------------------------------------------------------------------------------
        #*  cria a tabela de aeronaves
        #*/
        self._tabItens = [ None for _ in xrange ( locDefs.xMAX_Aeronaves ) ]
        #assert ( self._tabItens )

        #l_log.info ( "self._tabItens: " + str ( self._tabItens ))

        #** ---------------------------------------------------------------------------------------
        #*  carrega os dados da tabela de aeronaves
        #*/
        for _ in xrange ( locDefs.xMAX_Aeronaves ):

            #l_log.info ( "l_btAnv: " + str ( l_btAnv ))

            #** -----------------------------------------------------------------------------------
            #*  chave da aeronave
            #*/
            l_szKey = f_Data [ l_iD ].upper ()
            l_iD += 1

            #l_log.info ( "_szKey: " + l_szKey )

            #** -----------------------------------------------------------------------------------
            #*  descrição
            #*/
            l_szDescr = f_Data [ l_iD ].upper ().replace ( '_', ' ' )
            l_iD += 1

            #l_log.info ( "_szDescr: " + str ( l_szDescr ))

            #** -----------------------------------------------------------------------------------
            #*  velocidade de aproximação
            #*/
            l_fVelApx = float ( f_Data [ l_iD ] )
            l_iD += 1

            #l_log.info ( "_fVelApx: " + str ( l_fVelApx ))

            #** -----------------------------------------------------------------------------------
            #*  razão máxima de subida
            #*/
            l_fRazMaxSub = float ( f_Data [ l_iD ] )
            l_iD += 1

            #l_log.info ( "_fRazMaxSub: " + str ( l_fRazMaxSub ))

            #** -----------------------------------------------------------------------------------
            #*  razão máxima de descida
            #*/
            l_fRazMaxDesc = float ( f_Data [ l_iD ] )
            l_iD += 1

            #l_log.info ( "_fRazMaxDesc: " + str ( l_fRazMaxDesc ))

            #** -----------------------------------------------------------------------------------
            #*  razão máxima de curva
            #*/
            l_fRazMaxCurv = float ( f_Data [ l_iD ] )
            l_iD += 1

            #l_log.info ( "_fRazMaxCurv: " + str ( l_fRazMaxCurv ))

            #** -----------------------------------------------------------------------------------
            #*  teto de serviço
            #*/
            l_fTetoServ = float ( f_Data [ l_iD ] )
            l_iD += 1

            #l_log.info ( "_fTetoServ: " + str ( l_fTetoServ ))

            #** -----------------------------------------------------------------------------------
            #*  cria a aeronave
            #*/
            l_oAnv = clsAnv.clsAnv ( [ l_szKey, l_szDescr, l_fVelApx, l_fRazMaxSub,
                                       l_fRazMaxDesc, l_fRazMaxCurv, l_fTetoServ ] )
            #assert ( l_oAnv )

            #** -----------------------------------------------------------------------------------
            #*  coloca a aeronave na tabela
            #*/
            self.add ( l_oAnv, l_szKey )

        #** ---------------------------------------------------------------------------------------
        #*  após a carga, reseta o flag dirty
        #*/
        self._bDirty = False
        #l_log.info ( "self._bDirty: " + str ( self._bDirty ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaAnv::saveQDataStream
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def saveQDataStream ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaAnv::saveQDataStream"

        #/ file descriptor
        #/ ----------------------------------------------------------------------------------------
        l_fdOut = None

        #/ mensagem de erro
        #/ ----------------------------------------------------------------------------------------
        l_szError = None


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  tenta salvar a tabela de aeronaves em modo binário...
        #*/
        try:

            #** -----------------------------------------------------------------------------------
            #*  cria arquivo para gravação
            #*/
            l_fdOut = QtCore.QFile ( self._szFName )
            #assert ( l_fdOut )

            #** -----------------------------------------------------------------------------------
            #*/
            if ( not l_fdOut.open ( QtCore.QIODevice.WriteOnly )):

                #** -------------------------------------------------------------------------------
                #*/
                raise IOError, unicode ( l_fdOut.errorString ())

            #** -----------------------------------------------------------------------------------
            #*  cria a stream de dados de saída
            #*/
            l_stream = QtCore.QDataStream ( l_fdOut )
            #assert ( l_stream )

            #** -----------------------------------------------------------------------------------
            #*/
            l_stream.writeInt32 ( clsTabelaAnv.c_xxMAGIC_NUMBER )

            #** -----------------------------------------------------------------------------------
            #*/
            l_stream.writeInt32 ( clsTabelaAnv.c_xxFILE_VERSION )

            #** -----------------------------------------------------------------------------------
            #*/
            l_stream.setVersion ( QtCore.QDataStream.Qt_4_6 )

            #** -----------------------------------------------------------------------------------
            #*  percorre a tabela de aeronaves...
            #*/
            for _, l_oAnv in self._aItens:

                #** -------------------------------------------------------------------------------
                #*  grava a chave da aeronave
                #*/
                l_stream << QtCore.QString ( l_oAnv._szKey )

                #** -------------------------------------------------------------------------------
                #*  grava a descrição da aeronave
                #*/
                l_stream << QtCore.QString ( l_oAnv._szDescr.replace ( ' ', '_' ))

                #** -------------------------------------------------------------------------------
                #*  grava a velocidade de aproximação
                #*/
                l_stream.writeFloat ( l_oAnv._fVelApx )

                #** -------------------------------------------------------------------------------
                #*  grava a razão máxima de subida
                #*/
                l_stream.writeFloat ( l_oAnv._fRazMaxSub )

                #** -------------------------------------------------------------------------------
                #*  grava a razão máxima de descida
                #*/
                l_stream.writeFloat ( l_oAnv._fRazMaxDesc )

                #** -------------------------------------------------------------------------------
                #*  grava a razão máxima de curva
                #*/
                l_stream.writeFloat ( l_oAnv._fRazMaxCurv )

                #** -------------------------------------------------------------------------------
                #*  grava o teto de serviço
                #*/
                l_stream.writeFloat ( l_oAnv._fTetoServ )

        #** ---------------------------------------------------------------------------------------
        #*/
        except ( IOError, OSError ), e:

            #** -----------------------------------------------------------------------------------
            #*/
            l_szError = "Erro no salvamento: {0}".format ( e )

        #** ---------------------------------------------------------------------------------------
        #*/
        finally:

            #** -----------------------------------------------------------------------------------
            #*/
            if ( l_fdOut is not None ):

                #** -------------------------------------------------------------------------------
                #*/
                l_fdOut.close ()

            #** -----------------------------------------------------------------------------------
            #*/
            if ( l_szError is not None ):

                #** -------------------------------------------------------------------------------
                #*  m.poirot logger
                #*/
                #l_log.debug ( "<< " )

                #** -------------------------------------------------------------------------------
                #*/
                return ( False, l_szError )

            #** -----------------------------------------------------------------------------------
            #*/
            self._bDirty = False
            #l_log.info ( "self._bDirty: " + str ( self._bDirty ))

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*/
            return ( True, "Salvas {0} aeronaves em {1}".format ( len ( self._aItens ),
                                                                  QtCore.QFileInfo ( self._szFName ).fileName ()))

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaAnv::saveTextData
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def saveTextData ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaAnv::saveTextData"

        #/ file descriptor
        #/ ----------------------------------------------------------------------------------------
        l_fdOut = None

        #/ mensagem de erro
        #/ ----------------------------------------------------------------------------------------
        l_szError = None


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  nome da tabela de aeronaves
        #*/
        #assert ( self._szFName )
        #l_log.info ( "Tabela de aeronaves a salvar: " + self._szFName )

        #** ---------------------------------------------------------------------------------------
        #*  tenta salvar a tabela de aeronaves em modo texto...
        #*/
        try:

            #** -----------------------------------------------------------------------------------
            #*  cria o arquivo de saída
            #*/
            l_fdOut = open ( self._szFName, "w" )
            #assert ( l_fdOut )

            #** -----------------------------------------------------------------------------------
            #*  percorre todos as aeronaves...
            #*/
            for _, l_oAnv in self._aItens:

                #** -------------------------------------------------------------------------------
                #*  cria a area de dados
                #*/
                l_szTxt = "%s %s %.1f %.1f %.1f %.1f %.1f\n" % \
                          ( l_oAnv._szKey, l_oAnv._szDescr.replace ( ' ', '_' ), l_oAnv._fVelApx,
                            l_oAnv._fRazMaxSub, l_oAnv._fRazMaxDesc, l_oAnv._fRazMaxCurv,
                            l_oAnv._fTetoServ )

                #** -------------------------------------------------------------------------------
                #*  grava na tabela
                #*/
                l_fdOut.write ( l_szTxt )

            #** -----------------------------------------------------------------------------------
            #*  fecha a tabela
            #*/
            l_fdOut.close ()

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*/
            return ( True, "Salvas {0} aeronaves em {1}".format ( len ( self._aItens ),
                                                                  QtCore.QFileInfo ( self._szFName ).fileName ()))

        #** ---------------------------------------------------------------------------------------
        #*/
        except ( IOError, OSError ), e:

            #** -----------------------------------------------------------------------------------
            #*/
            l_szError = "Erro no salvamento: {0}".format ( e )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( False, l_szError )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaAnv::updateTabela
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_parent - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def updateTabela ( self, f_Anv, f_lstData ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaAnv::updateTabela"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  descrição existe ?
        #*/
        if ( None != f_lstData [ 1 ] ):

            #** -----------------------------------------------------------------------------------
            #*  salva descrição da aeronave
            #*/
            f_Anv._szDescr = f_lstData [ 1 ]

        #** ---------------------------------------------------------------------------------------
        #*  velocidade de aproximação existe ?
        #*/
        if ( None != f_lstData [ 2 ] ):

            #** -----------------------------------------------------------------------------------
            #*  salva velocidade de aproximação
            #*/
            f_Anv._fVelApx = f_lstData [ 2 ]

        #** ---------------------------------------------------------------------------------------
        #*  razão máxima de subida existe ?
        #*/
        if ( None != f_lstData [ 3 ] ):

            #** -----------------------------------------------------------------------------------
            #*  salva razão máxima de subida
            #*/
            f_Anv._fRazMaxSub = f_lstData [ 3 ]

        #** ---------------------------------------------------------------------------------------
        #*  razão máxima de descida existe ?
        #*/
        if ( None != f_lstData [ 4 ] ):

            #** -----------------------------------------------------------------------------------
            #*  salva razão máxima de descida
            #*/
            f_Anv._fRazMaxDesc = f_lstData [ 4 ]

        #** ---------------------------------------------------------------------------------------
        #*  razão máxima de curva existe ?
        #*/
        if ( None != f_lstData [ 5 ] ):

            #** -----------------------------------------------------------------------------------
            #*  salva razão máxima de curva
            #*/
            f_Anv._fRazMaxCurv = f_lstData [ 5 ]

        #** ---------------------------------------------------------------------------------------
        #*  teto de serviço existe ?
        #*/
        if ( None != f_lstData [ 6 ] ):

            #** -----------------------------------------------------------------------------------
            #*  salva teto de serviço
            #*/
            f_Anv._fTetoServ = f_lstData [ 6 ]

        #** ---------------------------------------------------------------------------------------
        #*  mudou a chave da aeronave ?
        #*/
        if ( f_lstData [ 0 ] != f_Anv._szKey ):

            #** -----------------------------------------------------------------------------------
            #*/
            l_key = self.key ( f_Anv._szKey )

            #** -----------------------------------------------------------------------------------
            #*/
            l_iI = bisect.bisect_left ( self._aItens, [ l_key, f_Anv ] )

            #** -----------------------------------------------------------------------------------
            #*/
            self._aItens [ l_iI ][ 0 ] = self.key ( f_lstData [ 0 ] )

            #** -----------------------------------------------------------------------------------
            #*  salva a nova chave
            #*/
            f_Anv._szKey = f_lstData [ 0 ]

            #** -----------------------------------------------------------------------------------
            #*  re-ordena a tabela
            #*/
            self._aItens.sort ()

        #** ---------------------------------------------------------------------------------------
        #*/
        self._bDirty = True
        #l_log.info ( "self._bDirty: " + str ( self._bDirty ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** ===========================================================================================
    #*  rotinas de exportação de entrada da tabela de airplane
    #*  ===========================================================================================
    #*/

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "clsTabelaAnv" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** ----------------------------------------------------------------------------------------------- *#
