#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2010, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiPAR
#*  Classe...: clsTabelaExe
#*
#*  Descrição: this class takes care of all interaction with the user
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração
#*  -----------------------------------------------------------------------------------------------
#*  well     1997/jun/20  versão 1.0 started
#*  mlabru   2009/set/01  versão 3.0 started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    1997/jun/20  versão inicial
#*  3.01-01  2009/set/01  versão para Linux
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ Python library
#/ ------------------------------------------------------------------------------------------------
import bisect

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ PyQt library
#/ ------------------------------------------------------------------------------------------------
from PyQt4 import QtCore

#/ SiPAR / model
#/ ------------------------------------------------------------------------------------------------
import model.clsExe as clsExe
import model.clsTabelaModel as clsTabelaModel

import model.glbDefs as glbDefs
import model.locDefs as locDefs

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  clsTabelaExe::clsTabelaExe
#*  -----------------------------------------------------------------------------------------------
#*  a Tabela de Exercícios mantém o conjunto dos exercícios. Os exercícios são mantidas ordenados
#*  por sua matrícula, assim se este campo for alterado os exercícios devem ser re-ordenados. Por
#*  esta razão (e para manter o flag de alteração), todas as atualizações dever ser feitas através
#*  do método updateExercicio desta classe.
#*  -----------------------------------------------------------------------------------------------
#*/
class clsTabelaExe ( clsTabelaModel.clsTabelaModel ):

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaExe::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the main menu
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaExe::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  inicia a super class
        #*/
        clsTabelaModel.clsTabelaModel.__init__ ( self )
                               
        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaExe::exportXML
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_parent - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def exportXML ( self, f_szFName ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaExe::exportXML"

        #/ file descriptor
        #/ ----------------------------------------------------------------------------------------
        l_fdIn = None

        #/ mensagem de erro
        #/ ----------------------------------------------------------------------------------------
        l_szErro = None


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        try:

            #** -----------------------------------------------------------------------------------
            #*/
            l_fdIn = QtCore.QFile ( f_szFName )
            #assert ( l_fdIn )

            #** -----------------------------------------------------------------------------------
            #*/
            if ( not l_fdIn.open ( QtCore.QIODevice.WriteOnly )):

                #** -------------------------------------------------------------------------------
                #*/
                raise IOError, unicode ( l_fdIn.errorString ())

            #** -----------------------------------------------------------------------------------
            #*/
            l_stream = QtCore.QTextStream ( l_fdIn )
            #assert ( l_stream )

            l_stream.setCodec ( glbDefs.xUNI_CODEC )

            #** -----------------------------------------------------------------------------------
            #*/
            l_stream << ( "<?xml version='1.0' encoding='{0}'?>\n"
                          "<!DOCTYPE TabExe>\n"
                          "<TabExe VERSION='1.0'>\n".format ( glbDefs.xUNI_CODEC ))

            #** -----------------------------------------------------------------------------------
            #*/
            for _, l_oExe in self._aItens:

                #** -------------------------------------------------------------------------------
                #*/
                l_stream << "<EXE Key='{0}' Descrição='{1}'>\n".format ( l_oExe._szKey, l_oExe._szDescr.replace ( '_', ' ' )) \
                         << "<PAR>"   << l_oExe._szPAR << "</PAR>\n" \
                         << "<Cab>"   << l_oExe._iCab << "</Cab>\n" \
                         << "<VentoVel>" << l_oExe._fVentoVel << "</VentoVel>\n" \
                         << "<VentoDir>" << l_oExe._fVentoDir << "</VentoDir>\n" \
                         << "<Anv>" << l_oExe._szAnv << "</Anv>\n" \
                         << "<GateDist>" << l_oExe._fGateDist << "</GateDist>\n" \
                         << "<GateAfst>" << l_oExe._fGateAfst << "</GateAfst>\n" \
                         << "<GateAlt>" << l_oExe._fGateAlt << "</GateAlt>\n" \
                         << "</EXE>\n"

            #** -----------------------------------------------------------------------------------
            #*/
            l_stream << "</TabExe>\n"

        #** ---------------------------------------------------------------------------------------
        #*/
        except ( IOError, OSError ), e:

            #** -----------------------------------------------------------------------------------
            #*/
            l_szErro = u"Erro na exportação: {0}".format ( e )

        #** ---------------------------------------------------------------------------------------
        #*/
        finally:

            #** -----------------------------------------------------------------------------------
            #*/
            if ( l_fdIn is not None ):

                #** -------------------------------------------------------------------------------
                #*/
                l_fdIn.close ()

            #** -----------------------------------------------------------------------------------
            #*/
            if ( l_szErro is not None ):

                #** -------------------------------------------------------------------------------
                #*  m.poirot logger
                #*/
                #l_log.debug ( "<< " )

                #** -------------------------------------------------------------------------------
                #*/
                return ( False, l_szErro )

            #** -----------------------------------------------------------------------------------
            #*/
            self._bDirty = False

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*/
            return ( True, "{0} registros exportados para {1}".format ( len ( self._aItens ),
                                                               QtCore.QFileInfo ( f_szFName ).fileName ()))

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaExe::loadQDataStream
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def loadQDataStream ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaExe::loadQDataStream"

        #/ file descriptor
        #/ ----------------------------------------------------------------------------------------
        l_fdIn = None

        #/ mensagem de erro
        #/ ----------------------------------------------------------------------------------------
        l_szErro = None


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  tenta carregar o arquivo...
        #*/
        try:

            #** -----------------------------------------------------------------------------------
            #*  abre o arquivo
            #*/
            l_fdIn = QtCore.QFile ( self._szFName )
            #assert ( l_fdIn )

            #** -----------------------------------------------------------------------------------
            #*  erro na abertura ?
            #*/
            if ( not l_fdIn.open ( QtCore.QIODevice.ReadOnly )):

                #** -------------------------------------------------------------------------------
                #*  gera exception
                #*/
                raise IOError, unicode ( l_fdIn.errorString ())

            #** -----------------------------------------------------------------------------------
            #*  acessa o arquivo como uma stream de dados
            #*/
            l_stream = QtCore.QDataStream ( l_fdIn )
            #assert ( l_stream )

            #** -----------------------------------------------------------------------------------
            #*  lê o magic number
            #*/
            l_iMagic = l_stream.readInt32 ()

            #** -----------------------------------------------------------------------------------
            #*  tipo de arquivo válido ?
            #*/
            if ( clsTabelaModel.c_xxMAGIC_NUMBER != l_iMagic ):

                #** -------------------------------------------------------------------------------
                #*  gera exception
                #*/
                raise IOError, u"tipo de arquivo não reconhecido !"

            #** -----------------------------------------------------------------------------------
            #*  lê a versão do arquivo
            #*/
            l_iVersion = l_stream.readInt32 ()

            #** -----------------------------------------------------------------------------------
            #*  versão muito antiga ?
            #*/
            if ( l_iVersion < clsTabelaModel.c_xxOLD_FILE_VERSION ):

                #** -------------------------------------------------------------------------------
                #*  gera exception
                #*/
                raise IOError, u"formato do arquivo é antigo e não legível !"

            #** -----------------------------------------------------------------------------------
            #*  versão nova ?
            #*/
            elif ( l_iVersion > clsTabelaModel.c_xxFILE_VERSION ):

                #** -------------------------------------------------------------------------------
                #*  gera exception
                #*/
                raise IOError, u"formato do arquivo é novo e não legível !"

            #** -----------------------------------------------------------------------------------
            #*/
            l_stream.setVersion ( QtCore.QDataStream.Qt_4_6 )

            #** -----------------------------------------------------------------------------------
            #*/
            self.clear ( False )

            #** -----------------------------------------------------------------------------------
            #*  enquanto não termina de ler a stream...
            #*/
            while ( not l_stream.atEnd ()):

                #** -------------------------------------------------------------------------------
                #*  cria a área para chave do exercício
                #*/
                l_szKey = QtCore.QString ()

                #** -------------------------------------------------------------------------------
                #*  lê a chave do exercício
                #*/
                l_stream >> l_szKey

                #** -------------------------------------------------------------------------------
                #*  cria a área para descrição do exercício
                #*/
                l_szDescr = QtCore.QString ()

                #** -------------------------------------------------------------------------------
                #*  lê a descrição do exercício
                #*/
                l_stream >> l_szDescr
                l_szDescr = l_szDescr.replace ( '_', ' ' )

                #** -------------------------------------------------------------------------------
                #*  cria a área para chave do sítio PAR
                #*/
                l_szPAR = QtCore.QString ()

                #** -------------------------------------------------------------------------------
                #*  lê a chave do sítio PAR
                #*/
                l_stream >> l_szPAR

                #** -------------------------------------------------------------------------------
                #*  lê a cabeceira atual em uso
                #*/
                l_iCab = l_stream.readInt ()

                #** -------------------------------------------------------------------------------
                #*  lê a velocidade do vento
                #*/
                l_fVentoVel = l_stream.readFloat ()

                #** -------------------------------------------------------------------------------
                #*  lê a direção do vento
                #*/
                l_fVentoDir = l_stream.readFloat ()

                #** -------------------------------------------------------------------------------
                #*  cria a área para chave da aeronave
                #*/
                l_szAnv = QtCore.QString ()

                #** -------------------------------------------------------------------------------
                #*  lê a chave da aeronave
                #*/
                l_stream >> l_szAnv

                #** -------------------------------------------------------------------------------
                #*  lê a distância da aeronave
                #*/
                l_fGateDist = l_stream.readFloat ()

                #** -------------------------------------------------------------------------------
                #*  lê o afastamento do eixo da pista
                #*/
                l_fGateAfst = l_stream.readFloat ()

                #** -------------------------------------------------------------------------------
                #*  lê a altura da aeronave
                #*/
                l_fGateAlt = l_stream.readFloat ()

                #** -------------------------------------------------------------------------------
                #*  cria o exercício e coloca na tabela
                #*/
                self.add ( clsExe.clsExe ( [ l_szKey, l_szDescr, l_szPAR, l_iCab, l_fVentoVel,
                                             l_fVentoDir, l_szAnv, l_fGateDist, l_fGateAfst,
                                             l_fGateAlt ] ), l_szKey )

        #** ---------------------------------------------------------------------------------------
        #*/
        except ( IOError, OSError ), e:

            #** -----------------------------------------------------------------------------------
            #*  cria a mensagem de erro
            #*/
            l_szErro = "Erro na carga: {0}".format ( e )

        #** ---------------------------------------------------------------------------------------
        #*/
        finally:

            #** -----------------------------------------------------------------------------------
            #*  o arquivo foi aberto ?
            #*/
            if ( l_fdIn is not None ):

                #** -------------------------------------------------------------------------------
                #*  fecha o arquivo
                #*/
                l_fdIn.close ()

            #** -----------------------------------------------------------------------------------
            #*  ocorreu alguma exception ?
            #*/
            if ( l_szErro is not None ):

                #** -------------------------------------------------------------------------------
                #*  m.poirot logger
                #*/
                #l_log.debug ( "<< " )

                #** -------------------------------------------------------------------------------
                #*  avisa do erro e cai fora
                #*/
                return ( False, l_szErro )

            #** -----------------------------------------------------------------------------------
            #*  reseta flag
            #*/
            self._bDirty = False

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*/
            return ( True, u"{0} exercícios carregados de {1}".format ( len ( self._aItens ),
                                                               QtCore.QFileInfo ( self._szFName ).fileName ()))

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaExe::populateFromData
    #*  -------------------------------------------------------------------------------------------
    #*  carrega os dados do airplane
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_Data - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def populateFromData ( self, f_Data ):

        #/ globals
        #/ ----------------------------------------------------------------------------------------
        #global locDefs.xMAX_Exercicios

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaExe::populateFromData"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  zera índices
        #*/
        l_iD = 0

        #** ---------------------------------------------------------------------------------------
        #*  calcula o número de exercícios na tabela
        #*/
        locDefs.xMAX_Exercicios = ( len ( f_Data ) // 10 )
        #l_log.info ( "locDefs.xMAX_Exercicios: " + str ( locDefs.xMAX_Exercicios ))

        #** ---------------------------------------------------------------------------------------
        #*  cria a tabela de exercícios
        #*/
        self._tabItens = [ None for _ in xrange ( locDefs.xMAX_Exercicios ) ]
        #assert ( self._tabItens )

        #l_log.info ( "self._tabItens: " + str ( self._tabItens ))

        #** ---------------------------------------------------------------------------------------
        #*  carrega os dados da tabela de exercícios
        #*/
        for _ in xrange ( locDefs.xMAX_Exercicios ):

            #l_log.info ( "l_btExe: " + str ( l_btExe ))

            #** -----------------------------------------------------------------------------------
            #*  chave do exercício
            #*/
            l_szKey = f_Data [ l_iD ].upper ()
            l_iD += 1

            #l_log.info ( "_szKey: " + l_szKey )

            #** -----------------------------------------------------------------------------------
            #*  descrição
            #*/
            l_szDescr = f_Data [ l_iD ].upper ().replace ( '_', ' ' )
            l_iD += 1

            #l_log.info ( "_szDescr: " + str ( l_szDescr ))

            #** -----------------------------------------------------------------------------------
            #*  sítio PAR
            #*/
            l_szPAR = f_Data [ l_iD ].upper ()
            l_iD += 1

            #l_log.info ( "_szPAR: " + str ( l_szPAR ))

            #** -----------------------------------------------------------------------------------
            #*  cabeceira atual em uso
            #*/
            l_iCab = int ( f_Data [ l_iD ] )
            l_iD += 1

            #l_log.info ( "_iCab: " + str ( l_iCab ))

            #** -----------------------------------------------------------------------------------
            #*  velocidade do vento
            #*/
            l_fVentoVel = float ( f_Data [ l_iD ] )
            l_iD += 1

            #l_log.info ( "_fVentoVel: " + str ( l_fVentoVel ))

            #** -----------------------------------------------------------------------------------
            #*  direção do vento
            #*/
            l_fVentoDir = float ( f_Data [ l_iD ] )
            l_iD += 1

            #l_log.info ( "_fVentoDir: " + str ( l_fVentoDir ))

            #** -----------------------------------------------------------------------------------
            #*  aeronave
            #*/
            l_szAnv = f_Data [ l_iD ].upper ()
            l_iD += 1

            #l_log.info ( "_szAnv: " + str ( l_szAnv ))

            #** -----------------------------------------------------------------------------------
            #*  distância da aeronave
            #*/
            l_fGateDist = float ( f_Data [ l_iD ] )
            l_iD += 1

            #l_log.info ( "_fGateDist: " + str ( l_fGateDist ))

            #** -----------------------------------------------------------------------------------
            #*  afastamento do eixo da pista
            #*/
            l_fGateAfst = float ( f_Data [ l_iD ] )
            l_iD += 1

            #l_log.info ( "_fGateAfst: " + str ( l_fGateAfst ))

            #** -----------------------------------------------------------------------------------
            #*  altura da aeronave
            #*/
            l_fGateAlt = float ( f_Data [ l_iD ] )
            l_iD += 1

            #l_log.info ( "_fGateAlt: " + str ( l_fGateAlt ))

            #** -----------------------------------------------------------------------------------
            #*  cria o exercício
            #*/
            l_oExe = clsExe.clsExe ( [ l_szKey, l_szDescr, l_szPAR, l_iCab, l_fVentoVel,
                                       l_fVentoDir, l_szAnv, l_fGateDist, l_fGateAfst, l_fGateAlt ] )
            #assert ( l_oExe )

            #** -----------------------------------------------------------------------------------
            #*  coloca o exercício na tabela
            #*/
            self.add ( l_oExe, l_szKey )

        #** ---------------------------------------------------------------------------------------
        #*  após a carga, reseta o flag dirty
        #*/
        self._bDirty = False
        #l_log.info ( "self._bDirty: " + str ( self._bDirty ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaExe::saveQDataStream
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def saveQDataStream ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaExe::saveQDataStream"

        #/ file descriptor
        #/ ----------------------------------------------------------------------------------------
        l_fdOut = None

        #/ mensagem de erro
        #/ ----------------------------------------------------------------------------------------
        l_szError = None


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  tenta salvar a tabela de exercícios em modo binário...
        #*/
        try:

            #** -----------------------------------------------------------------------------------
            #*  cria arquivo para gravação
            #*/
            l_fdOut = QtCore.QFile ( self._szFName )
            #assert ( l_fdOut )

            #** -----------------------------------------------------------------------------------
            #*/
            if ( not l_fdOut.open ( QtCore.QIODevice.WriteOnly )):

                #** -------------------------------------------------------------------------------
                #*/
                raise IOError, unicode ( l_fdOut.errorString ())

            #** -----------------------------------------------------------------------------------
            #*  cria a stream de dados de saída
            #*/
            l_stream = QtCore.QDataStream ( l_fdOut )
            #assert ( l_stream )

            #** -----------------------------------------------------------------------------------
            #*/
            l_stream.writeInt32 ( clsTabelaExe.c_xxMAGIC_NUMBER )

            #** -----------------------------------------------------------------------------------
            #*/
            l_stream.writeInt32 ( clsTabelaExe.c_xxFILE_VERSION )

            #** -----------------------------------------------------------------------------------
            #*/
            l_stream.setVersion ( QtCore.QDataStream.Qt_4_6 )

            #** -----------------------------------------------------------------------------------
            #*  percorre a tabela de exercícios...
            #*/
            for _, l_oExe in self._aItens:

                #** -------------------------------------------------------------------------------
                #*  grava a chave do exercício
                #*/
                l_stream << QtCore.QString ( l_oExe._szKey )

                #** -------------------------------------------------------------------------------
                #*  grava a descrição do exercício
                #*/
                l_stream << QtCore.QString ( l_oExe._szDescr.replace ( ' ', '_' ))

                #** -------------------------------------------------------------------------------
                #*  grava o sítio PAR do exercício
                #*/
                l_stream << QtCore.QString ( l_oExe._szPAR )

                #** -------------------------------------------------------------------------------
                #*  grava a cabeceira atual em uso
                #*/
                l_stream.writeInt ( l_oExe._iCab )

                #** -------------------------------------------------------------------------------
                #*  grava a velocidade do vento
                #*/
                l_stream.writeFloat ( l_oExe._fVentoVel )

                #** -------------------------------------------------------------------------------
                #*  grava a direção do vento
                #*/
                l_stream.writeFloat ( l_oExe._fVentoDir )

                #** -------------------------------------------------------------------------------
                #*  grava a aeronave do exercício
                #*/
                l_stream << QtCore.QString ( l_oExe._szAnv )

                #** -------------------------------------------------------------------------------
                #*  grava a distância da aeronave
                #*/
                l_stream.writeFloat ( l_oExe._fGateDist )

                #** -------------------------------------------------------------------------------
                #*  grava o afastamento do eixo da pista
                #*/
                l_stream.writeFloat ( l_oExe._fGateAfst )

                #** -------------------------------------------------------------------------------
                #*  grava a altura da aeronave
                #*/
                l_stream.writeFloat ( l_oExe._fGateAlt )

        #** ---------------------------------------------------------------------------------------
        #*/
        except ( IOError, OSError ), e:

            #** -----------------------------------------------------------------------------------
            #*/
            l_szError = "Erro no salvamento: {0}".format ( e )

        #** ---------------------------------------------------------------------------------------
        #*/
        finally:

            #** -----------------------------------------------------------------------------------
            #*/
            if ( l_fdOut is not None ):

                #** -------------------------------------------------------------------------------
                #*/
                l_fdOut.close ()

            #** -----------------------------------------------------------------------------------
            #*/
            if ( l_szError is not None ):

                #** -------------------------------------------------------------------------------
                #*  m.poirot logger
                #*/
                #l_log.debug ( "<< " )

                #** -------------------------------------------------------------------------------
                #*/
                return ( False, l_szError )

            #** -----------------------------------------------------------------------------------
            #*/
            self._bDirty = False

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*/
            return ( True, u"Salvos {0} exercícios em {1}".format ( len ( self._aItens ),
                                                           QtCore.QFileInfo ( self._szFName ).fileName ()))

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaExe::saveTextData
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def saveTextData ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaExe::saveTextData"

        #/ file descriptor
        #/ ----------------------------------------------------------------------------------------
        l_fdOut = None

        #/ mensagem de erro
        #/ ----------------------------------------------------------------------------------------
        l_szError = None


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  nome da tabela de exercícios
        #*/
        #assert ( self._szFName )
        #l_log.info ( u"Tabela de exercícios a salvar: " + self._szFName )

        #** ---------------------------------------------------------------------------------------
        #*  tenta salvar a tabela de exercícios em modo texto...
        #*/
        try:

            #** -----------------------------------------------------------------------------------
            #*  cria o arquivo de saída
            #*/
            l_fdOut = open ( self._szFName, "w" )
            #assert ( l_fdOut )

            #** -----------------------------------------------------------------------------------
            #*  percorre todos as exercícios...
            #*/
            for _, l_oExe in self._aItens:

                #** -------------------------------------------------------------------------------
                #*  cria a área de dados
                #*/
                l_szTxt = "%s %s %s %d %.1f %.1f %s %.1f %.1f %.1f\n" % \
                          ( l_oExe._szKey, l_oExe._szDescr.replace ( '_', ' ' ), l_oExe._szPAR,
                            l_oExe._iCab, l_oExe._fVentoVel, l_oExe._fVentoDir, l_oExe._szAnv,
                            l_oExe._fGateDist, l_oExe._fGateAfst, l_oExe._fGateAlt )

                #** -------------------------------------------------------------------------------
                #*  grava na tabela
                #*/
                l_fdOut.write ( l_szTxt )

            #** -----------------------------------------------------------------------------------
            #*  fecha a tabela
            #*/
            l_fdOut.close ()

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*/
            return ( True, u"Salvos {0} exercícios em {1}".format ( len ( self._aItens ),
                                                           QtCore.QFileInfo ( self._szFName ).fileName ()))

        #** ---------------------------------------------------------------------------------------
        #*/
        except ( IOError, OSError ), e:

            #** -----------------------------------------------------------------------------------
            #*/
            l_szError = "Erro no salvamento: {0}".format ( e )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( False, l_szError )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaExe::updateTabela
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_Exe     - DOCUMENT ME!
    #*  @param  f_lstData - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def updateTabela ( self, f_Exe, f_lstData ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaExe::updateTabela"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  chave
        #*/
        if ( f_lstData [ 1 ] is not None ):

            #** -----------------------------------------------------------------------------------
            #*/
            f_Exe._szDescr = f_lstData [ 1 ]

        #** ---------------------------------------------------------------------------------------
        #*  descrição
        #*/
        if ( f_lstData [ 2 ] is not None ):

            #** -----------------------------------------------------------------------------------
            #*/
            f_Exe._szPAR = f_lstData [ 2 ]

        #** ---------------------------------------------------------------------------------------
        #*  cabeceira atual em uso
        #*/
        if ( f_lstData [ 3 ] is not None ):

            #** -----------------------------------------------------------------------------------
            #*/
            f_Exe._iCab = f_lstData [ 3 ]

        #** ---------------------------------------------------------------------------------------
        #*  velocidade do vento
        #*/
        if ( f_lstData [ 4 ] is not None ):

            #** -----------------------------------------------------------------------------------
            #*/
            f_Exe._fVentoVel = f_lstData [ 4 ]

        #** ---------------------------------------------------------------------------------------
        #*  direção do vento
        #*/
        if ( f_lstData [ 5 ] is not None ):

            #** -----------------------------------------------------------------------------------
            #*/
            f_Exe._fVentoDir = f_lstData [ 5 ]

        #** ---------------------------------------------------------------------------------------
        #*  aeronave
        #*/
        if ( f_lstData [ 6 ] is not None ):

            #** -----------------------------------------------------------------------------------
            #*/
            f_Exe._szAnv = f_lstData [ 6 ]

        #** ---------------------------------------------------------------------------------------
        #*  distância
        #*/
        if ( f_lstData [ 7 ] is not None ):

            #** -----------------------------------------------------------------------------------
            #*/
            f_Exe._fGateDist = f_lstData [ 7 ]

        #** ---------------------------------------------------------------------------------------
        #*  afastamento do eixo
        #*/
        if ( f_lstData [ 8 ] is not None ):

            #** -----------------------------------------------------------------------------------
            #*/
            f_Exe._fGateAfst = f_lstData [ 8 ]

        #** ---------------------------------------------------------------------------------------
        #*  altura
        #*/
        if ( f_lstData [ 9 ] is not None ):

            #** -----------------------------------------------------------------------------------
            #*/
            f_Exe._fGateAlt = f_lstData [ 9 ]

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( f_lstData [ 0 ] != f_Exe._szKey ):

            #** -----------------------------------------------------------------------------------
            #*/
            l_key = self.key ( f_Exe._szKey )

            #** -----------------------------------------------------------------------------------
            #*/
            l_iI = bisect.bisect_left ( self._aItens, [ l_key, f_Exe ] )

            #** -----------------------------------------------------------------------------------
            #*/
            self._aItens [ l_iI ][ 0 ] = self.key ( f_lstData [ 0 ] )

            #** -----------------------------------------------------------------------------------
            #*/
            f_Exe._szKey = f_lstData [ 0 ]

            #** -----------------------------------------------------------------------------------
            #*/
            self._aItens.sort ()

        #** ---------------------------------------------------------------------------------------
        #*/
        self._bDirty = True

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** ===========================================================================================
    #*  rotinas de exportação de entrada da tabela de exercícios
    #*  ===========================================================================================
    #*/

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "clsTabelaExe" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** ----------------------------------------------------------------------------------------------- *#
