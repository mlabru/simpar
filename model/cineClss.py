#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2009, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiPAR
#*  Classe...: cineClss
#*
#*  Descrição: this file is the flight class of the SiCAD. The flight class holds information about
#*             a flight and holds the commands the flight has been given.
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração
#*  -----------------------------------------------------------------------------------------------
#*  well     1997/jun/20  versão 1.0 started
#*  mlabru   2009/set/01  versão 3.0 started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    1997/jun/20  versão inicial
#*  3.01-01  2009/set/01  versão para Linux
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ SiCAD / model
#/ ------------------------------------------------------------------------------------------------
import model.glbDefs as glbDefs

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  cineClss::cineClss
#*  -----------------------------------------------------------------------------------------------
#*  the object holding all information concerning a flight
#*  -----------------------------------------------------------------------------------------------
#*/
class cineClss:

    #** -------------------------------------------------------------------------------------------
    #*  cineClss::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  setting the variables pertaining to scope and view
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_cm, f_oAtv ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "cineClss::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        #assert ( f_cm )
        #assert ( f_oAtv )

        #** ---------------------------------------------------------------------------------------
        #*  obtém o net sender
        #*/
        self._ns = f_cm.getNS ()
        #assert ( self._ns )

        #** ---------------------------------------------------------------------------------------
        #*  obtém o simulation time engine
        #*/
        self._st = f_cm.getST ()
        #assert ( self._st )

        #** ---------------------------------------------------------------------------------------
        #*  obtém o model manager
        #*/
        l_mm = f_cm.getMM ()
        #assert ( l_mm )

        #** ---------------------------------------------------------------------------------------
        #*  obtém o exercício
        #*/
        self._oExe = l_mm.getExercicio ()
        #assert ( self._oExe )

        #** ---------------------------------------------------------------------------------------
        #*  salva a aeronave ativa localmente
        #*/
        self._oAtv = f_oAtv
        #l_log.info ( "self._oAtv: " + str ( self._oAtv ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** ===========================================================================================
    #*  PROCEDURES LEVEL 2
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  cineClss::sendData
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def sendData ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "cineClss::sendData"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições para execução
        #*/
        #assert ( self._ns )
        #assert ( self._st )
        #assert ( self._oAtv )

        if ( not self._oAtv._bActive ):

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*  cai fora...
            #*/
            return

        #** ---------------------------------------------------------------------------------------
        #*  monta o buffer de envio
        #*/
        l_szBuff = str ( glbDefs.xNET_Vers )           + glbDefs.xMSG_Sep + \
                   str ( glbDefs.xMSG_Dat )            + glbDefs.xMSG_Sep + \
                   str ( "PAR1234" )                   + glbDefs.xMSG_Sep + \
                   str ( self._oAtv._szKey )           + glbDefs.xMSG_Sep + \
                   str ( self._st.obtemHoraSim ())     + glbDefs.xMSG_Sep + \
                   str ( self._oAtv.getStatusEnvio ()) + glbDefs.xMSG_Sep + \
                   str ( self._oAtv._tPosicao [ 0 ] )  + glbDefs.xMSG_Sep + \
                   str ( self._oAtv._tPosicao [ 1 ] )  + glbDefs.xMSG_Sep + \
                   str ( self._oAtv._fProa )           + glbDefs.xMSG_Sep + \
                   str ( self._oAtv._fAlt )

        #** ---------------------------------------------------------------------------------------
        #*  envia os dados para o controle
        #*/
        self._ns.sendData ( l_szBuff )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "cineClss" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** ----------------------------------------------------------------------------------------------- *#
