#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2010, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiPAR
#*  Classe...: modelControle
#*
#*  Descrição: DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração
#*  -----------------------------------------------------------------------------------------------
#*  correa   1997/fev/12  version started
#*  mlabru   2008/fev/12  version started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    2008/fev/12  version started
#*  1.2-0.1  2008/jun/20  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ Python library
#/ ------------------------------------------------------------------------------------------------
#import os

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ SiPAR / model
#/ ------------------------------------------------------------------------------------------------
#import model.data as data
#import model.locDefs as locDefs

import model.clsExe as clsExe
import model.clsPAR as clsPAR

import model.modelManager as modelManager

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  modelControle::modelControle
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/
class modelControle ( modelManager.modelManager ):

    #** -------------------------------------------------------------------------------------------
    #*  modelControle::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the display
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "modelControle::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  inicia a superclass
        #*/
        modelManager.modelManager.__init__ ( self )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  modelControle::iniciaBaseDados
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def iniciaBaseDados ( self, f_lstData ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "modelControle::iniciaBaseDados"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_lstData )

        #** ---------------------------------------------------------------------------------------
        #*  cria o exercício
        #*/
        self._oExe = clsExe.clsExe ()
        #assert ( self._oExe )

        #l_log.info ( "f_lstData: " + str ( f_lstData ))

        #** ---------------------------------------------------------------------------------------
        #*  salva a chave do exercício
        #*/
        self._oExe.setKey ( f_lstData [ 0 ] )
        #l_log.info ( "Exe.setKey: " + str ( f_lstData [ 0 ] ))

        #** ---------------------------------------------------------------------------------------
        #*  salva a cabeceira atual em uso (0=principal/1=secundária)
        #*/
        self._oExe.setCabAtu ( int ( f_lstData [ 1 ] ))
        #l_log.info ( "Exe.setCabAtu: " + str ( f_lstData [ 1 ] ))

        #** ---------------------------------------------------------------------------------------
        #*  salva os parâmetros de vento
        #*/
        self._oExe.setVento (( float ( f_lstData [ 2 ] ), float ( f_lstData [ 3 ] )))
        #l_log.info ( "Exe.setVento_Vel: " + str ( f_lstData [ 2 ] ))
        #l_log.info ( "Exe.setVento_Dir: " + str ( f_lstData [ 3 ] ))

        #** ---------------------------------------------------------------------------------------
        #*  cria o PAR
        #*/
        l_oPAR = clsPAR.clsPAR ( f_lstData [ 4: ] )
        #assert ( l_oPAR )

        #** ---------------------------------------------------------------------------------------
        #*  salva o PAR no exercício
        #*/
        self._oExe.setPAR ( l_oPAR )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( True )

    #** ===========================================================================================
    #*  acesso a área de dados do objeto
    #*  ===========================================================================================
    #*/

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "modelControle" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** -----------------------------------------------------------------------------------------------
#*  this is the bootstrap process
#*/
if ( '__main__' == __name__ ):

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    logging.basicConfig ()

    #** -------------------------------------------------------------------------------------------
    #*
    l_mm = modelControle ()
    #assert ( l_mm )

#** ----------------------------------------------------------------------------------------------- *#
