#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2010, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiPAR
#*  Classe...: clsExe
#*
#*  Descrição: mantém os detalhes de um exercício
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração
#*  -----------------------------------------------------------------------------------------------
#*  well     1997/jun/20  versão 1.0 started
#*  mlabru   2009/set/01  versão 3.0 started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    1997/jun/20  versão inicial
#*  3.01-01  2009/set/01  versão para Linux
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ SiPAR / model
#/ ------------------------------------------------------------------------------------------------
import model.glbData as glbData
import model.glbDefs as glbDefs

import model.locData as locData
import model.locDefs as locDefs

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  clsExe::clsExe
#*  -----------------------------------------------------------------------------------------------
#*  mantém os detalhes de um exercício
#*  -----------------------------------------------------------------------------------------------
#*/
class clsExe:

    #** -------------------------------------------------------------------------------------------
    #*  variáveis de classe
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  inicia um objeto exercício
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_lstData - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_lstData=None ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  dados do exercício
        #*/
        self._szKey = None
        self._szDescr = None

        self._szPAR = None
        self._szAnv = None

        self._fVentoVel = None
        self._fVentoDir = None

        self._fGateDist = None
        self._fGateAlt = None
        self._fGateAfst = None

        #** ---------------------------------------------------------------------------------------
        #*/
        self._oPAR = None
        self._oAnv = None

        #** ---------------------------------------------------------------------------------------
        #*  parâmetros de escala
        #*/
        self._iEscala = 1
        self._bMudouEscala = False
                                        
        #** ---------------------------------------------------------------------------------------
        #*  flag mudança na cabeceira
        #*/
        self._bMudouCab = False

        #** ---------------------------------------------------------------------------------------
        #*  dados da simulação
        #*/
        #self._lTime = None
        self._oHora = ( 0, 0, 0 )

        #** ---------------------------------------------------------------------------------------
        #*  cabeceira atual em uso (0=principal/1=secundária)
        #*/
        self._iCab = 0

        #** ---------------------------------------------------------------------------------------
        #*  checa se recebeu uma lista de dados
        #*/
        if ( f_lstData is not None ):

            #** -----------------------------------------------------------------------------------
            #*  cria um exercício
            #*/
            self.makeExe ( f_lstData )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::makeExe
    #*  -------------------------------------------------------------------------------------------
    #*  preenche os dados do exercício
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_lstData - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def makeExe ( self, f_lstData ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::makeExe"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  chave. string. Pode conter qualquer caracter Unicode.
        #*/
        self._szKey = str ( f_lstData [ 0 ] ).upper ()
        #l_log.info ( "_szKey: " + self._szKey )

        #** ---------------------------------------------------------------------------------------
        #*  descrição. string. Pode conter qualquer caracter Unicode.
        #*/
        self._szDescr = str ( f_lstData [ 1 ] ).upper ()
        #l_log.info ( "_szDescr: " + str ( self._szDescr ))

        #** ---------------------------------------------------------------------------------------
        #*  chave do sítio PAR. string. Pode conter qualquer caracter Unicode.
        #*/
        self._szPAR = str ( f_lstData [ 2 ] ).upper ()
        #l_log.info ( "_szPAR: " + self._szPAR )

        #** ---------------------------------------------------------------------------------------
        #*  cabeceira atual em uso (0=principal/1=secundária)
        #*/
        self._iCab = int ( f_lstData [ 3 ] )
        #l_log.info ( "_iCab: " + str ( self._iCab ))

        #** ---------------------------------------------------------------------------------------
        #*  velocidade do vento. knots -> m/s. float.
        #*/
        self._fVentoVel = float ( f_lstData [ 4 ] )
        #l_log.info ( "_fVentoVel: " + str ( self._fVentoVel ))

        #** ---------------------------------------------------------------------------------------
        #*  direção do vento. graus. float.
        #*/
        self._fVentoDir = float ( f_lstData [ 5 ] )
        #l_log.info ( "_fVentoDir: " + str ( self._fVentoDir ))

        #** ---------------------------------------------------------------------------------------
        #*  chave da aeronave. string. Pode conter qualquer caracter Unicode.
        #*/
        self._szAnv = str ( f_lstData [ 6 ] ).upper ()
        #l_log.info ( "_szAnv: " + self._szAnv )

        #** ---------------------------------------------------------------------------------------
        #*  distância do gate. NM -> m. float.
        #*/
        self._fGateDist = float ( f_lstData [ 7 ] )
        #l_log.info ( "_fGateDist: " + str ( self._fGateDist ))

        #** ---------------------------------------------------------------------------------------
        #*  afastamento do gate ao centro da pista. m. float.
        #*/
        self._fGateAfst = float ( f_lstData [ 8 ] )
        #l_log.info ( "_fGateAfst: " + str ( self._fGateAfst ))

        #** ---------------------------------------------------------------------------------------
        #*  altura do gate. ft -> m. float.
        #*/
        self._fGateAlt = float ( f_lstData [ 9 ] )
        #l_log.info ( "_fGateAlt: " + str ( self._fGateAlt ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::makeExeConfig
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def makeExeConfig ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::makeExeConfig"

        #/ flag de erro
        #/ ----------------------------------------------------------------------------------------
        l_bOk = True

        #/ file descriptor
        #/ ----------------------------------------------------------------------------------------
        l_fdOut = None

        #/ mensagem de erro
        #/ ----------------------------------------------------------------------------------------
        l_szError = None


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  tenta salvar a tabela de exercícios em modo texto...
        #*/
        try:

            #** -----------------------------------------------------------------------------------
            #*  cria o arquivo de saída
            #*/
            l_fdOut = open ( "data/cfgExe.DAT", "w" )
            #assert ( l_fdOut )

            #** -----------------------------------------------------------------------------------
            #*  checa se a chave do exercício existe
            #*/
            if ( None == locData.g_oExe._szKey ):

                #** -----------------------------------------------------------------------------------
                #*  se não existe, cria uma chave
                #*/
                locData.g_oExe._szKey = "ECDX99"

            #** -----------------------------------------------------------------------------------
            #*  checa se a descrição do exercício existe
            #*/
            if ( None == locData.g_oExe._szDescr ):

                #** -----------------------------------------------------------------------------------
                #*  se não existe, cria uma descrição
                #*/
                locData.g_oExe._szDescr = "Exercicio ECD"

            #** -----------------------------------------------------------------------------------
            #*  monta a estrutura do exercício
            #*/
            l_szTxt = "%s %s %s %d %.1f %.1f %s %.1f %.1f %.1f\n" % \
                      ( locData.g_oExe._szKey,
                        locData.g_oExe._szDescr.replace ( ' ', '_' ),
                        locData.g_oExe._szPAR,
                        locData.g_oExe._iCab,
                        locData.g_oExe._fVentoVel,
                        locData.g_oExe._fVentoDir,
                        locData.g_oExe._szAnv,
                        locData.g_oExe._fGateDist,
                        locData.g_oExe._fGateAfst,
                        locData.g_oExe._fGateAlt )

            #** -----------------------------------------------------------------------------------
            #*  grava no arquivo
            #*/
            l_fdOut.write ( l_szTxt )

            #** -----------------------------------------------------------------------------------
            #*  monta a estrutura do PAR
            #*/
            l_szTxt = "%s %s %d %.1f %.1f %.1f %.1f %.1f %.1f %d %d\n" % \
                      ( locData.g_oExe._oPAR._szKey,
                        locData.g_oExe._oPAR._szDescr.replace ( ' ', '_' ),
                        locData.g_oExe._oPAR._iCab0,
                        locData.g_oExe._oPAR._fHAnt0,
                        locData.g_oExe._oPAR._fHAnt1,
                        locData.g_oExe._oPAR._fDstAntEixo,
                        locData.g_oExe._oPAR._fDstAntPT0,
                        locData.g_oExe._oPAR._fDstAntPT1,
                        locData.g_oExe._oPAR._fAngRampa,
                        locData.g_oExe._oPAR._aiRetardo [ 0 ],
                        locData.g_oExe._oPAR._iDecl )

            #** -----------------------------------------------------------------------------------
            #*  grava no arquivo
            #*/
            l_fdOut.write ( l_szTxt )

            #** -----------------------------------------------------------------------------------
            #*  monta a estrutura da aeronave
            #*/
            l_szTxt = "%s %s %.1f %.1f %.1f %.1f %.1f\n" % \
                      ( locData.g_oExe._oAnv._szKey,
                        locData.g_oExe._oAnv._szDescr.replace ( ' ', '_' ),
                        locData.g_oExe._oAnv._fVelApx,
                        locData.g_oExe._oAnv._fRazMaxSub,
                        locData.g_oExe._oAnv._fRazMaxDesc,
                        locData.g_oExe._oAnv._fRazMaxCurv,
                        locData.g_oExe._oAnv._fTetoServ )

            #** -----------------------------------------------------------------------------------
            #*  grava no arquivo
            #*/
            l_fdOut.write ( l_szTxt )

            #** -----------------------------------------------------------------------------------
            #*  monta a estrutura de comunicação
            #*/
            l_szTxt = "%d\n" % ( glbData.g_iCanal )

            #** -----------------------------------------------------------------------------------
            #*  grava no arquivo
            #*/
            l_fdOut.write ( l_szTxt )

            #** -----------------------------------------------------------------------------------
            #*  fecha a tabela
            #*/
            l_fdOut.close ()

        #** ---------------------------------------------------------------------------------------
        #*/
        except ( IOError, OSError ), e:

            #** -----------------------------------------------------------------------------------
            #*/
            l_bOk = False

            #** -----------------------------------------------------------------------------------
            #*/
            l_szError = u"Erro na criação do arquivo: {0}".format ( e )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( l_bOk, l_szError )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::sendExe
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_ns - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def sendExe ( self, f_ns ):
    
        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::sendExe"
                            
                            
        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )
                                                                            
        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_ns )

        #** ---------------------------------------------------------------------------------------
        #*  envia os dados de configuração
        #*/
        f_ns.sendCnfg ( str ( glbDefs.xMSG_Vrs )                        + glbDefs.xMSG_Sep +
                        str ( glbDefs.xMSG_Exe_Dat )                    + glbDefs.xMSG_Sep +
                        str ( self._szKey )                             + glbDefs.xMSG_Sep +
                        str ( self._iCab )                              + glbDefs.xMSG_Sep +
                        str ( self._fVentoDir )                         + glbDefs.xMSG_Sep +
                        str ( self._fVentoVel )                         + glbDefs.xMSG_Sep +
                        str ( self._oPAR._szKey )                       + glbDefs.xMSG_Sep +
                        str ( self._oPAR._szDescr.replace ( ' ', '_' )) + glbDefs.xMSG_Sep +
                        str ( self._oPAR._iCab0 )                       + glbDefs.xMSG_Sep +
                        str ( self._oPAR._fHAnt0 )                      + glbDefs.xMSG_Sep +
                        str ( self._oPAR._fHAnt1 )                      + glbDefs.xMSG_Sep +
                        str ( self._oPAR._fDstAntEixo )                 + glbDefs.xMSG_Sep +
                        str ( self._oPAR._fDstAntPT0 )                  + glbDefs.xMSG_Sep +
                        str ( self._oPAR._fDstAntPT1 )                  + glbDefs.xMSG_Sep +
                        str ( self._oPAR._fAngRampa )                   + glbDefs.xMSG_Sep +
                        str ( self._oPAR._aiRetardo [ 0 ] )             + glbDefs.xMSG_Sep +
                        str ( self._oPAR._iDecl ))
                                                                                                                                        
        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::toggleCab
    #*  -------------------------------------------------------------------------------------------
    #*  muda a cabeceira em uso
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def toggleCab ( self ):
    
        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::toggleCab"
                            
                            
        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )
                                                                            
        #** ---------------------------------------------------------------------------------------
        #*  muda a cabeceira em uso (0=principal/1=secundária)
        #*/
        self._iCab = ( self._iCab + 1 ) % 2

        #** ---------------------------------------------------------------------------------------
        #*  avisa que mudou a cabeceira em uso
        #*/
        self._bMudouCab = True
                                                                                                                                        
        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** ===========================================================================================
    #*  rotinas de exportação da hora do exercícios
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getHora
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getHora ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getHora"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oHora )

    #** ===========================================================================================
    #*  rotinas de exportação de dados de exercícios
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getAnv
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAnv ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getAnv"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oAnv )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getCabAtu
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getCabAtu ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getCabAtu"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  retorna a cabeceira atual em uso (0=principal/1=secundária)
        #*/
        return ( self._iCab )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getDescricao
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getDescricao ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getDescricao"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._szDescr )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getEscala
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getEscala ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getEscala"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._iEscala )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getIndicativo
    #*  -------------------------------------------------------------------------------------------
    #*  retorna a sigla do aeródromo
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getIndicativo ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getIndicativo"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._szPAR )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getMudouCab
    #*  -------------------------------------------------------------------------------------------
    #*  retorna o rumo da cabeceira principal
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getMudouCab ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getMudouCab"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._bMudouCab )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getMudouEscala
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getMudouEscala ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getMudouEscala"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._bMudouEscala )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getPAR
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getPAR ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getPAR"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oPAR )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getRumoAtu
    #*  -------------------------------------------------------------------------------------------
    #*  retorna o rumo da cabeceira atual em uso
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return o rumo da cabeceira atual em uso
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getRumoAtu ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getRumoAtu"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  cabeceira atual em uso é a principal ?
        #*/
        if ( 0 == self._iCab ):

            #** -----------------------------------------------------------------------------------
            #*  calcula o rumo da cabeceira principal
            #*/
            l_iRumo = self._oPAR._iCab0 * 10

        #** ---------------------------------------------------------------------------------------
        #*  senão, é a cabeceira secundária
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*  calcula o rumo da cabeceira secundária
            #*/
            l_iRumo = (( self._oPAR._iCab0 + 18 ) % 36 ) * 10

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  retorna o rumo da cabeceira atual em uso
        #*/
        return ( l_iRumo )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getKey
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getKey ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getKey"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._szKey )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getTipoExe
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getTipoExe ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getTipoExe"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( "SiPAR" )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getVentoDir
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getVentoDir ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getVentoDir"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
       #*/
        return ( self._fVentoDir )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getVentoVel
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getVentoVel ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getVentoVel"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._fVentoVel )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::isCabPrincipal
    #*  -------------------------------------------------------------------------------------------
    #*  cabeceira atual em uso é a cabeceira principal
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    #def isCabPrincipal ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::isCabPrincipal"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        ##assert ( self._iCab in locDefs.xSET_CabsValidas )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  cabeceira em uso é a cabeceira principal ?
        #*/
        #return ( 0 == self._iCab )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::setAnv
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_oAnv - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setAnv ( self, f_oAnv ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::setAnv"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._oAnv = f_oAnv

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::setCabAtu
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_iCab - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setCabAtu ( self, f_iCab ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::setCabAtu"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        #assert ( f_iCab in locDefs.xSET_CabsValidas )

        #** ---------------------------------------------------------------------------------------
        #*  salva cabeceira atual em uso (0=principal/1=secundária)
        #*/
        self._iCab = f_iCab

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::setEscala
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_iEsc - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setEscala ( self, f_iEsc ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::setEscala"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        #assert ( f_iEsc in locDefs.xSET_EscalasValidas )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._iEscala = f_iEsc

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::setMudouCab
    #*  -------------------------------------------------------------------------------------------
    #*  retorna o rumo da cabeceira principal
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setMudouCab ( self, f_bVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::setMudouCab"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( type ( True ) == type ( f_bVal )):
                        
            #** -----------------------------------------------------------------------------------
            #*/
            self._bMudouCab = f_bVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::setMudouEscala
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_bVal - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setMudouEscala ( self, f_bVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::setMudouEscala"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( type ( True ) == type ( f_bVal )):
                        
            #** -----------------------------------------------------------------------------------
            #*/
            self._bMudouEscala = f_bVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::setPAR
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_oPAR - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setPAR ( self, f_oPAR ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::setPAR"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._oPAR  = f_oPAR

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::setKey
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_szKey - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setKey ( self, f_szKey ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::setKey"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._szKey = f_szKey

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::setVento
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_bVal - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setVento ( self, f_tVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::setVento"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #l_log.info ( "type ( f_tVal ): " + str ( type ( f_tVal )))

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( tuple == type ( f_tVal )):
                        
            #** -----------------------------------------------------------------------------------
            #*/
            self._fVentoDir = float ( f_tVal [ 0 ] )

            #** -----------------------------------------------------------------------------------
            #*  verifica condições de execução
            #*/
            #assert ( 0. <= self._fVentoDir < 360. )

            #** -----------------------------------------------------------------------------------
            #*/
            self._fVentoVel = float ( f_tVal [ 1 ] )

            #** -----------------------------------------------------------------------------------
            #*  verifica condições de execução
            #*/
            #assert ( 0. <= self._fVentoVel < 360. )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "clsExe" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** -----------------------------------------------------------------------------------------------
#*  this is the bootstrap process
#*/
if ( '__main__' == __name__ ):

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    logging.basicConfig ()

    #** -------------------------------------------------------------------------------------------
    #*
    l_Exe = clsExe ( [ "CO001", "Exercício teste do PAR Canoas", "CO", 12, 10, 50, "B737", 5, 144, 6000 ] )
    #assert ( l_Exe )

#** ----------------------------------------------------------------------------------------------- *#
