#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2009, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiPAR
#*  Classe...: clsAtv
#*
#*  Descrição: this file is the flight class of the SiPAR. The flight class holds information about
#*             a flight and holds the commands the flight has been given.
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração       
#*  -----------------------------------------------------------------------------------------------
#*  well     1997/jun/20  versão 1.0 started
#*  mlabru   2009/set/01  versão 3.0 started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    1997/jun/20  versão inicial (DOS/Modula-2)
#*  3.01-01  2009/set/01  versão para Linux
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ Python library
#/ ------------------------------------------------------------------------------------------------
#import math

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ SiCAD / model
#/ ------------------------------------------------------------------------------------------------
import model.cineCalc as cineCalc
import model.clsAnv as clsAnv
import model.glbDefs as glbDefs

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  clsAtv::clsAtv
#*  -----------------------------------------------------------------------------------------------
#*  the object holding all information concerning a flight
#*  -----------------------------------------------------------------------------------------------
#*/
class clsAtv ( clsAnv.clsAnv ):

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  inicia a aeronave ativa
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_cm   - control manager
    #*  @param  f_oAnv - aeronave a ativar
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_cm, f_oAnv ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_cm )
        #assert ( f_oAnv )
        #assert ( isinstance ( f_oAnv, clsAnv.clsAnv ))

        #** ---------------------------------------------------------------------------------------
        #*  inicializa a super class
        #*/
        clsAnv.clsAnv.__init__ ( self, f_oAnv )

        #** ---------------------------------------------------------------------------------------
        #*  obtém o model manager
        #*/
        l_mm = f_cm.getMM ()
        #assert ( l_mm )

        #** ---------------------------------------------------------------------------------------
        #*  obtém o exercício
        #*/
        l_oExe = l_mm.getExercicio ()
        #assert ( l_oExe )

        #** ---------------------------------------------------------------------------------------
        #*  obtém o PAR
        #*/
        l_oPAR = l_oExe._oPAR
        #assert ( l_oPAR )

        #** ---------------------------------------------------------------------------------------
        #*  obtém a declinação magnética do sítio PAR
        #*/
        self._iDecl = l_oPAR._iDecl
        #l_log.info ( "self._iDecl: " + str ( self._iDecl ))


        #** ---------------------------------------------------------------------------------------
        #*  salva os parâmetros de posição da aeronave
        #*/

        #** ---------------------------------------------------------------------------------------
        #*  distância (m)
        #*/
        self._fDist = l_oExe._fGateDist * glbDefs.xCNV_NM2M
        #l_log.info ( "_fDist (NM): " + str ( l_oExe._fGateDist ))
        #l_log.info ( "_fDist (m).: " + str ( self._fDist ))

        #** ---------------------------------------------------------------------------------------
        #*  afastamento do eixo (m)
        #*/
        self._fAfast = l_oExe._fGateAfst
        #l_log.info ( "_fAfast (m): " + str ( self._fAfast ))

        #** ---------------------------------------------------------------------------------------
        #*  altura (m)
        #*/
        self._fAlt = l_oExe._fGateAlt * glbDefs.xCNV_ft2M
        #l_log.info ( "_fAlt (ft): " + str ( l_oExe._fGateAlt ))
        #l_log.info ( "_fAlt (m).: " + str ( self._fAlt ))

        #** ---------------------------------------------------------------------------------------
        #*  calcula o X da aeronave
        #*/
        l_fX = self._fDist
        #l_fX = math.sqrt (( self._fDist ** 2 ) - ( self._fAfast ** 2 ))

        #** ---------------------------------------------------------------------------------------
        #*  verifica a cabeceira
        #*/
        if ( 0 == l_oExe.getCabAtu ()):

            #** -----------------------------------------------------------------------------------
            #*  inverte a distância
            #*/
            l_fX *= -1            

        #l_log.info ( "getCabAtu: " + str ( l_oExe.getCabAtu ()))
        #l_log.info ( "_fX: " + str ( l_fX ))

        #** ---------------------------------------------------------------------------------------
        #*  posição inicial da aeronave
        #*/
        self._tPosicao = ( int ( round ( l_fX )), int ( self._fAfast ))
        #l_log.info ( "self._tPosicao: " + str ( self._tPosicao ))


        #** ---------------------------------------------------------------------------------------
        #*  atitude da aeronave
        #*/

        #** ---------------------------------------------------------------------------------------
        #*  inicia a proa atual da aeronave (lembre-se: ela já está na direção da final...)
        #*/
        self._fProa = l_oExe.getRumoAtu ()
        #l_log.info ( "_fProa: " + str ( self._fProa ))

        #** ---------------------------------------------------------------------------------------
        #*  direção atual
        #*/
        self._fDirAtu = cineCalc.convProa2Direcao (( self._fProa, self._iDecl ))
        #l_log.info ( "_fDirAtu: " + str ( self._fDirAtu ))

        #** ---------------------------------------------------------------------------------------
        #*  velocidade (m/s)
        #*/
        self._fVel = self._fVelApx * glbDefs.xCNV_Knots2Ms
        #l_log.info ( "_fVel (kts): " + str ( self._fVelApx ))
        #l_log.info ( "_fVel (m/s): " + str ( self._fVel ))

        #** ---------------------------------------------------------------------------------------
        #*  ângulo da asa
        #*/
        self._fAngAsa = 0.0

        #** ---------------------------------------------------------------------------------------
        #*  ângulo de arfagem
        #*/
        self._fAngArf = 0.0

        #** ---------------------------------------------------------------------------------------
        #*  razão descida/subida atual
        #*/
        self._fRazaoAtu = 0.0

        #** ---------------------------------------------------------------------------------------
        #*  flight engine da aeronave
        #*/
        self._fe = None


        #** ---------------------------------------------------------------------------------------
        #*  situação da aeronave
        #*/

        #** ---------------------------------------------------------------------------------------
        #*  is the flight active ? sure it's...
        #*/
        self._bActive = True

        #** ---------------------------------------------------------------------------------------
        #*  status da aeronave
        #*/
        #self._cStatus = 'A'
        #l_log.info ( "_cStatus: " + self._cStatus )

        #** ---------------------------------------------------------------------------------------
        #*  status
        #*/
        self._cStatusVoo = 'N'

        #** ---------------------------------------------------------------------------------------
        #*  flag solo
        #*/
        self._bSolo = ( self._fAlt <= 0. )
        #l_log.info ( "_bSolo: " + str ( self._bSolo ))

        #** ---------------------------------------------------------------------------------------
        #*  timestamp of the last turn
        #*/
        #self._lTempoAnt = 0
        #l_log.info ( "_lTempoAnt: " + str ( self._lTempoAnt ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** ===========================================================================================
    #*  rotinas de exportação de dados da estrutura
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getAltura
    #*  -------------------------------------------------------------------------------------------
    #*  altura em metros
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAltura ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getAltura"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._fAlt )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getAnguloArfagem
    #*  -------------------------------------------------------------------------------------------
    #*  direção anterior da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAnguloArfagem ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getAnguloArfagem"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._fAngArf )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getAnguloAsa
    #*  -------------------------------------------------------------------------------------------
    #*  direção anterior da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAnguloAsa ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getAnguloAsa"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._fAngAsa )
    """
    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getFE
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getFE ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getFE"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._fe )
    """
    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::isActive
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def isActive ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::isActive"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._bActive )

    #** ===========================================================================================
    #*  rotinas de exportação de trafego
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getDirecaoAtu
    #*  -------------------------------------------------------------------------------------------
    #*  direção atual da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getDirecaoAtu ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getDirecaoAtu"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._fDirAtu )
    """
    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getMudouStatus
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getMudouStatus ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getMudouStatus"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._bAltStatus )

    """
    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getProa
    #*  -------------------------------------------------------------------------------------------
    #*  proa da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getProa ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getProa"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._fProa )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getRazaoAtu
    #*  -------------------------------------------------------------------------------------------
    #*  razão de descida/subida atual em metros por segundo
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return razão de descida/subida atual em metros por segundo
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getRazaoAtu ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getRazaoAtu"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._fRazaoAtu )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getSolo
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getSolo ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getDesenho"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._bSolo )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getStatusEnvio
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getStatusEnvio ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getStatusEnvio"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  aeronave no solo ?
        #*/
        if ( self._bSolo ):

            #** -----------------------------------------------------------------------------------
            #*  no solo e taxiando 
            #*/
            l_szStatus = 'ST'

        #** ---------------------------------------------------------------------------------------
        #*  senão, em vôo
        #*/
        else:

            l_szStatus = 'V' + self._cStatusVoo

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( l_szStatus )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getStatusSolo
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getStatusSolo ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getStatusSolo"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  aeronave no solo ?
        #*/
        if ( self._bSolo ):

            #** -----------------------------------------------------------------------------------
            #*  no solo e taxiando 
            #*/
            l_szStatus = 'ST'

        #** ---------------------------------------------------------------------------------------
        #*  senão, em vôo
        #*/
        else:

            l_szStatus = 'V' + self._cStatusVoo

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( l_szStatus )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getStatusVoo
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getStatusVoo ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getStatusVoo"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._cStatusVoo )
    """
    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getStrip
    #*  -------------------------------------------------------------------------------------------
    #*  Y da posição atual da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getStrip ( self ):


        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getStrip"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._tPosStrip )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getStripData
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getStripData ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getStripData"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica se a aeronave esta no solo
        #*/
        if ( self._bSolo ):

            #** -----------------------------------------------------------------------------------
            #*  status de aeronave no solo
            #*/
            l_szStat = "S" + self._cStatusSolo

        else:

            #** -----------------------------------------------------------------------------------
            #*  status de aeronave em vôo
            #*/
            l_szStat = "V" + self._cStatusVoo

        #** ---------------------------------------------------------------------------------------
        #*  obtem o centro do aerodromo
        #*/
        l_tCtr = self._oAer.getCentro ()
        #assert ( l_tCtr )

        #** ---------------------------------------------------------------------------------------
        #*  calculo do azimute
        #*/
        l_fDist, l_fDir = cineCalc.distanciaDirecao ( l_tCtr, self._tPosição )

        #** ---------------------------------------------------------------------------------------
        #*  converte a proa em direção
        #*/
        l_fDir = cineCalc.convProa2Direcao (( l_fDir, self._iDecl ))

        #** ---------------------------------------------------------------------------------------
        #*  calcula o QDM
        #*/
        l_fQDM = ( l_fDir + 180. ) % 360

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return (( l_szStat,
                  self._szIdent,   self._szTipo,
                  self._fAlt, self._fProa,    self._fVel,
                  self._fAltDem,   self._fProaDem, self._fVelDem,
                  l_fDir,          l_fDist,        l_fQDM ))

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getTempoAnt
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getTempoAnt ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getTempoAnt"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._lTempoAnt )
    """
    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getVelocidade
    #*  -------------------------------------------------------------------------------------------
    #*  velocidade em metros por segundo
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return velocidade em metros por segundo
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getVelocidade ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getVelocidade"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._fVel )

    #** ===========================================================================================
    #*  rotinas de exportação de dados de performance de aeronaves
    #*  ===========================================================================================
    #*/
    
    #** ===========================================================================================
    #*  rotinas de importação de dados
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setActive
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setActive ( self, f_bVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setActive"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( type ( True ) == type ( f_bVal ))

        #** ---------------------------------------------------------------------------------------
        #*/
        self._bActive = f_bVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    """
    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setAlert
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setAlert ( self, f_bVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setAlert"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( type ( True ) == type ( f_bVal ))

        #** ---------------------------------------------------------------------------------------
        #*/
        self._bAlert = f_bVal

        #** ---------------------------------------------------------------------------------------
        #*  set alert ?
        #*/
        if ( f_bVal ):

            #** -----------------------------------------------------------------------------------
            #*  incrementa o contador de alertas
            #*/
            self._iAlerts += 1

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    """
    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setFE
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setFE ( self, f_oVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setFE"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._fe = f_oVal
        #assert ( self._fe )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )
    """
    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setMudouStatus
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setMudouStatus ( self, f_bVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setMudouStatus"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( type ( True ) == type ( f_bVal ))

        #** ---------------------------------------------------------------------------------------
        #*/
        self._bAltStatus = f_bVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setSelected
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setSelected ( self, f_bSel, f_bNav ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setSelected"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( type ( True ) == type ( f_bNav ))
        #assert ( type ( True ) == type ( f_bSel ))

        #** ---------------------------------------------------------------------------------------
        #*/
        self._bNav = f_bNav

        #** ---------------------------------------------------------------------------------------
        #*/
        self._bSel = f_bSel

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setStatusVoo
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setStatusVoo ( self, f_cVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setStatusVoo"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._cStatusVoo = f_cVal

        #** ---------------------------------------------------------------------------------------
        #*/
        self._bAltStatus = True

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setStrip
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setStrip ( self, f_tVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setStrip"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._tPosStrip = f_tVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )
    """
#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "clsAtv" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** ----------------------------------------------------------------------------------------------- *#
