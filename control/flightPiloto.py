#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2009, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiPAR
#*  Classe...: flightPiloto
#*
#*  Descrição: DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração       
#*  -----------------------------------------------------------------------------------------------
#*  well     1997/jun/20  versão 1.0 started
#*  mlabru   2009/set/01  versão 3.0 started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    1997/jun/20  versão inicial
#*  3.01-01  2009/set/01  versão para Linux
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ Python library
#/ ------------------------------------------------------------------------------------------------
import sys
import time

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ SiPAR / control
#/ ------------------------------------------------------------------------------------------------
import control.flightControl as flightControl
import control.flightEngine as flightEngine

#/ SiPAR / model
#/ ------------------------------------------------------------------------------------------------
import model.cineCalc as cineCalc

import model.clsAnv as clsAnv
import model.clsAtv as clsAtv

import model.glbData as glbData
import model.glbDefs as glbDefs

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  flightPiloto::flightPiloto
#*  -----------------------------------------------------------------------------------------------
#*  the flight control class generates new flights and handles their movement. It has a list of
#*  flight objects holding all flights that are currently active. The flights are generated when
#*  activation time comes, or quando ja foi ativado na confecção do exercício. Once a flight has
#*  been generated it is handed by the flight engine.
#*  -----------------------------------------------------------------------------------------------
#*/
class flightPiloto ( flightControl.flightControl ):

    #** -------------------------------------------------------------------------------------------
    #*  flightPiloto::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the app and prepares everything
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_cm - control manager
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_cm ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "flightPiloto::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_cm )

        #** ---------------------------------------------------------------------------------------
        #*  inicia a super classe
        #*/
        flightControl.flightControl.__init__ ( self, f_cm )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  flightPiloto::ativaAnv
    #*  -------------------------------------------------------------------------------------------
    #*  ativa a aeronave do exercício
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_oAnv - aeronave a ser ativada
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def ativaAnv ( self, f_oAnv ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "flightPiloto::ativaAnv"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_oAnv )
        #assert ( isinstance ( f_oAnv, clsAnv.clsAnv ))

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        #assert ( self._cm )
        #assert ( self._ns )
        #assert ( self._st )
        #assert ( self._oExe )

        #** ---------------------------------------------------------------------------------------
        #*  ativa a aeronave
        #*/
        l_oAtv = clsAtv.clsAtv ( self._cm, f_oAnv )
        #assert ( l_oAtv )

        #** ---------------------------------------------------------------------------------------
        #*  cria o flightEngine para a aeronave
        #*/
        l_fe = flightEngine.flightEngine ( self._cm, l_oAtv )
        #assert ( l_fe )

        #** ---------------------------------------------------------------------------------------
        #*  salva o flight engine da aeronave
        #*/
        l_oAtv.setFE ( l_fe )

        #** ---------------------------------------------------------------------------------------
        #*  insere o vôo na lista de ativos
        #*/
        self._lstFlight.append ( l_fe )

        #** ---------------------------------------------------------------------------------------
        #*  poem a aeronave pra voar
        #*/
        l_fe.start ()
        
        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( l_fe )

    #** -------------------------------------------------------------------------------------------
    #*  flightPiloto::cbkElimina
    #*  -------------------------------------------------------------------------------------------
    #*  descongela as aeronaves
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def cbkElimina ( self, f_fe ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "flightPiloto::cbkElimina"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  aeronave está na lista de vôos ativos ?
        #*/
        if ( f_fe in self._lstFlight ):

            #** -----------------------------------------------------------------------------------
            #*  verifica aeronave
            #*/
            #assert ( isinstance ( f_fe, flightEngine.flightEngine ))

            #** -----------------------------------------------------------------------------------
            #*  trava a lista de vôos
            #*/
            glbData.g_lckFlight.acquire ()

            #** -----------------------------------------------------------------------------------
            #*/
            try:

                #** -------------------------------------------------------------------------------
                #*  estava, não esta mais....
                #*/
                self._lstFlight.remove ( f_fe )

            #** -----------------------------------------------------------------------------------
            #*/
            finally:

                #** -------------------------------------------------------------------------------
                #*  libera a lista de vôos
                #*/
                glbData.g_lckFlight.release ()

        #** ---------------------------------------------------------------------------------------
        #*  get flight data
        #*/
        l_oAtv = f_fe.getAtv ()
        #assert ( l_oAtv )

        #** ---------------------------------------------------------------------------------------
        #*  obtém a identificação da aeronave
        #*/
        l_szSigla = l_oAtv.getSigla ()
        #assert ( l_szSigla )

        #** ---------------------------------------------------------------------------------------
        #*  desativa a aeronave (termina a thread)
        #*/
        l_oAtv.setActive ( False )

        #** ---------------------------------------------------------------------------------------
        #*  envia o aviso de eliminação
        #*/
        self._ns.sendData ( str ( glbDefs.xMSG_Vrs ) + glbDefs.xMSG_Sep +
                            str ( glbDefs.xMSG_Kll ) + glbDefs.xMSG_Sep + l_szSigla )
        
        #** ---------------------------------------------------------------------------------------
        #*  aguarda o envio da mensagem    
        #*/
        time.sleep ( 1 )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  flightPiloto::run
    #*  -------------------------------------------------------------------------------------------
    #*  checks whether it's time to created another flight
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def run ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "flightPiloto::run"

        #/ contador de voltas
        #/ ----------------------------------------------------------------------------------------
        l_lRound = 0


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  enquanto não inicia...
        #*/
        while ( not glbData.g_bKeepRun ):

            #** -----------------------------------------------------------------------------------
            #*  aguarda 1 seg
            #*/
            time.sleep ( 1 )

        #** ---------------------------------------------------------------------------------------
        #*  obtém a aeronave do exercício
        #*/
        l_oAnv = self._oExe.getAnv ()

        #** ---------------------------------------------------------------------------------------
        #*  verifica aeronave
        #*/
        #assert ( isinstance ( l_oAnv, clsAnv.clsAnv ))

        #** ---------------------------------------------------------------------------------------
        #*  ativa a aeronave
        #*/
        l_fe = self.ativaAnv ( l_oAnv )
        #assert ( l_fe )

        #** ---------------------------------------------------------------------------------------
        #*  loop de exibição do relógio
        #*/
        while ( glbData.g_bKeepRun ):

            #** -----------------------------------------------------------------------------------
            #*  obtém o tempo inicial
            #*/
            l_lNow = time.time ()
            #l_log.info ( "l_lNow: " + str ( l_lNow ))

            #** -----------------------------------------------------------------------------------
            #*  hora de enviar a configuração ?
            #*/
            if ( 0 == ( l_lRound % glbDefs.xTIM_Cnfg )):

                #** -------------------------------------------------------------------------------
                #*  envia os dados de exercício
                #*/
                self._oExe.sendExe ( self._ns )

            #** -----------------------------------------------------------------------------------
            #*  hora de enviar a hora ?
            #*/
            if ( 0 == ( l_lRound % glbDefs.xTIM_Hora )):

                #** -------------------------------------------------------------------------------
                #*  envia os dados de hora
                #*/
                self._st.sendHora ( self._ns )

            #** -----------------------------------------------------------------------------------
            #*  incrementa o contador de voltas
            #*/
            l_lRound += 1

            #l_log.info ( "l_lRound..: " + str ( l_lRound ))
            #l_log.info ( "_lstFlight: " + str ( self._lstFlight ))

            #** -----------------------------------------------------------------------------------
            #*  obtém o tempo final
            #*/
            l_lDif = time.time () - l_lNow
            #l_log.info ( "l_lDif....(F): " + str ( l_lDif ))        
            #l_log.info ( "xTIM_Wait.(F): " + str ( glbDefs.xTIM_RRbn ))
            #l_log.info ( "Wait/Sleep(F): " + str ( glbDefs.xTIM_RRbn - l_lDif ))

            #** -----------------------------------------------------------------------------------
            #*  esta atrasado ?
            #*/
            if ( glbDefs.xTIM_RRbn > l_lDif ):
                                                
                #** -------------------------------------------------------------------------------
                #*  permite o scheduler (10000/1000th)
                #*/
                time.sleep ( glbDefs.xTIM_RRbn - l_lDif )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "flightPiloto" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** -----------------------------------------------------------------------------------------------
#*  this is the bootstrap process
#*/
if ( '__main__' == __name__ ):

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    logging.basicConfig ()
                
    #** -------------------------------------------------------------------------------------------
    #*
    l_fp = flightPiloto ( None )
    #assert ( l_fp )
                            
#** ----------------------------------------------------------------------------------------------- *#
