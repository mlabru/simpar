#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2009, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiPAR
#*  Classe...: flightEngine
#*
#*  Descrição: this file is the flight class of the SiPAR. The flight class holds information about
#*             a flight and holds the commands the flight has been given.
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração       
#*  -----------------------------------------------------------------------------------------------
#*  well     1997/jun/20  versão 1.0 started
#*  mlabru   2009/set/01  versão 3.0 started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    1997/jun/20  versão inicial (DOS/Modula-2)
#*  3.01-01  2009/set/01  versão para Linux
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ Python library
#/ ------------------------------------------------------------------------------------------------
import sys
import threading
import time

#/ pyGame (graphics library)
#/ ------------------------------------------------------------------------------------------------
import pygame.time

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ SiPAR / model
#/ ------------------------------------------------------------------------------------------------
import model.cineVoo as cineVoo
import model.clsAtv as clsAtv

import model.glbData as glbData
import model.glbDefs as glbDefs

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  flightEngine::flightEngine
#*  -----------------------------------------------------------------------------------------------
#*  the object holding all information concerning a flight
#*  -----------------------------------------------------------------------------------------------
#*/
class flightEngine ( threading.Thread ):

    #** -------------------------------------------------------------------------------------------
    #*  flightEngine::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  setting the variables pertaining to scope and view
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_cm, f_oAtv ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "flightEngine::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_cm )
        #assert ( f_oAtv )

        #** ---------------------------------------------------------------------------------------
        #*  inicia a super classe
        #*/
        threading.Thread.__init__ ( self )

        #** ---------------------------------------------------------------------------------------
        #*  salva os dados da aeronave ativa
        #*/
        self._oAtv = f_oAtv

        #** ---------------------------------------------------------------------------------------
        #*  obtém o system time
        #*/
        self._st = f_cm.getST ()
        #assert ( self._st )

        #** ---------------------------------------------------------------------------------------
        #*  cria a cinemática de vôo
        #*/
        self._cineVoo = cineVoo.cineVoo ( f_cm, f_oAtv )
        #assert ( self._cineVoo )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  flightEngine::moveNoVoo
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def moveNoVoo ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "flightEngine::moveNoVoo"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições para execução
        #*/
        #assert ( self._oAtv )

        if ( not self._oAtv._bActive ):

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*  cai fora...
            #*/
            return

        #** ---------------------------------------------------------------------------------------
        #*  procedimento de voo normal
        #*/
        self._cineVoo.procVooNormal ()
        #l_log.info ( "self._oAtv._cStatusVoo: " + str ( self._oAtv._cStatusVoo ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  flightEngine::run
    #*  -------------------------------------------------------------------------------------------
    #*  this function updates the position of all flights in the flight list
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def run ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "flightEngine::run"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições para execução
        #*/
        #assert ( self._cineVoo )
        #assert ( self._oAtv )
        #assert ( isinstance ( self._oAtv, clsAtv.clsAtv ))

        #** ---------------------------------------------------------------------------------------
        #*  enquanto não inicia...
        #*/
        while ( not glbData.g_bKeepRun ):

            #** -----------------------------------------------------------------------------------
            #*  aguarda 1 seg
            #*/
            time.sleep ( 1 )

        #** ---------------------------------------------------------------------------------------
        #*  timestamp of the last turn
        #*/
        self._oAtv._lTempoAnt = self._st.obtemHoraSim ()
        #l_log.info ( "_lTempoAnt: " + str ( self._oAtv._lTempoAnt ))

        #** ---------------------------------------------------------------------------------------
        #*  loop de vida da aeronave
        #*/
        while (( glbData.g_bKeepRun ) and ( self._oAtv.isActive ())):

            #** -----------------------------------------------------------------------------------
            #*  obtém o tempo inicial em segundos
            #*/
            l_lNow = time.time ()
            #l_log.info ( "l_lNow: " + str ( l_lNow ))

            #** -----------------------------------------------------------------------------------
            #*  movimenta em vôo
            #*/
            self.moveNoVoo ()

            #** -----------------------------------------------------------------------------------
            #*  obtém o tempo final em segundos e calcula o tempo decorrido
            #*/
            l_lDif = time.time () - l_lNow

            #l_log.info ( "l_lDif....(A): " + str ( l_lDif ))        
            #l_log.info ( "xTIM_Wait.(A): " + str ( glbDefs.xTIM_Wait ))
            #l_log.info ( "Wait/Sleep(A): " + str ( glbDefs.xTIM_Wait - l_lDif ))

            #** -----------------------------------------------------------------------------------
            #*  está adiantado ?
            #*/
            if ( glbDefs.xTIM_Wait > l_lDif ):

                #** -------------------------------------------------------------------------------
                #*  permite o scheduler (2/10th)
                #*/
                time.sleep ( glbDefs.xTIM_Wait - l_lDif )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** ===========================================================================================
    #*  acesso a área de dados do flight engine
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  flightEngine::getAtv
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAtv ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "flightEngine::getAtv"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oAtv )
    """
    #** -------------------------------------------------------------------------------------------
    #*  flightEngine::getCineVoo
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getCineVoo ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        l_szMetodo = "flightEngine::getCineVoo"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._cineVoo )
    """
#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "flightEngine" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** ----------------------------------------------------------------------------------------------- *#
