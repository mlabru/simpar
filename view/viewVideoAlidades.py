#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2009, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiPAR
#*  Classe...: viewVideoAlidades
#*
#*  Descrição: DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração       
#*  -----------------------------------------------------------------------------------------------
#*  well     1997/fev/12  versão 1.0 started
#*  mlabru   2009/set/01  versão 3.0 started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    1997/fev/12  versão inicial (DOS/Modula-2)
#*  3.01-01  2009/set/01  versão para Linux
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ math library
#/ ------------------------------------------------------------------------------------------------
import math

#/ log4Py
#/ ------------------------------------------------------------------------------------------------
import logging

#/ pyGame (biblioteca gráfica)
#/ ------------------------------------------------------------------------------------------------
import pygame
from pygame.locals import *

#/ SiPAR / model
#/ ------------------------------------------------------------------------------------------------
import model.glbDefs as glbDefs
import model.locDefs as locDefs

#/ SiPAR / view
#/ ------------------------------------------------------------------------------------------------
import view.viewUtils as viewUtils

#** -----------------------------------------------------------------------------------------------
#*  defines
#*  -----------------------------------------------------------------------------------------------
#*/

#/ linha de referência de altitude
#/ ------------------------------------------------------------------------------------------------
w_iMaxRefLine = 8000

#/ 
#/ ------------------------------------------------------------------------------------------------
w_iHStep100 = 100
w_iHStep200 = 200
w_iHStep300 = 300
w_iHStep400 = 400

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  viewVideoAlidades::viewVideoAlidades
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/
class viewVideoAlidades:

    #** -------------------------------------------------------------------------------------------
    #*  viewVideoAlidades::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  seta os parâmetros de entrada para início do exercício como escala, gate de entrada da
    #*  aeronave, altura da linha de referência (HRefLine) e inicia os ângulos de alidade.
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_cm  - control manager
    #*  @param  f_tWH - tupla com largura e altura do scope
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_cm, f_tWH ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "viewVideoAlidades::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_cm )
        #assert ( f_tWH )
                        
        #** ---------------------------------------------------------------------------------------
        #*  obtém o model manager
        #*/
        l_mm = f_cm.getMM ()
        #assert ( l_mm )

        #** ---------------------------------------------------------------------------------------
        #*  obtém o objeto exercício
        #*/
        self._oExe = l_mm.getExercicio ()
        #assert ( self._oExe )

        #** ---------------------------------------------------------------------------------------
        #*  obtém o objeto PAR
        #*/
        self._oPAR = self._oExe.getPAR ()
        #assert ( self._oPAR )

        #** ---------------------------------------------------------------------------------------
        #*  salva o tamanho do scope localmente
        #*/
        self._tWH = f_tWH

        #** ---------------------------------------------------------------------------------------
        #*  superfícies para as alidades
        #*/
        self._srfAH = None
        self._srfAV = None
        self._srfLR = None

        #** ---------------------------------------------------------------------------------------
        #*  inicia o desenho das alidades
        #*/
        self.doRedraw ()
        
        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  viewVideoAlidades::doDraw
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_srf - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def doDraw ( self, f_srf ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "viewVideoAlidades::doDraw"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )

        #** ---------------------------------------------------------------------------------------
        #*  transfere as alidades eletrônicas horizontais para a superfície recebida
        #*/
        f_srf.blit ( self._srfAH, ( 0, 0 ))

        #** ---------------------------------------------------------------------------------------
        #*  transfere as alidades eletrônicas verticais para a superfície recebida
        #*/
        f_srf.blit ( self._srfAV, ( 0, 0 ))

        #** ---------------------------------------------------------------------------------------
        #*  transfere a linha de referência de altitude para a superfície recebida
        #*/
        f_srf.blit ( self._srfLR, ( 0, 0 ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  viewVideoAlidades::doRedraw
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_srf - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def doRedraw ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "viewVideoAlidades::doRedraw"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        #assert ( self._oExe )

        #** ---------------------------------------------------------------------------------------
        #*  obtém a escala atual do desenho
        #*/
        l_iEsc = self._oExe.getEscala ()
        #assert ( l_iEsc in locDefs.xSET_EscalasValidas )

        l_iEsc -= 1

        #** ---------------------------------------------------------------------------------------
        #*  obtém a cabeceira atual em uso
        #*/
        l_iCab = self._oExe.getCabAtu ()
        #assert ( l_iCab in locDefs.xSET_CabsValidas )


        #** ---------------------------------------------------------------------------------------
        #*  cria uma superfície para a alidade horizontal
        #*/
        self._srfAH = pygame.Surface ( self._tWH )
        #assert ( self._srfAH )

        self._srfAH.set_colorkey (( 0, 0, 0 ))

        #** ---------------------------------------------------------------------------------------
        #*  desenha as alidades eletrônicas horizontais
        #*/
        self.drawAlidAzim ( self._srfAH, l_iEsc, l_iCab )


        #** ---------------------------------------------------------------------------------------
        #*  cria uma superfície para a alidade vertical
        #*/
        self._srfAV = pygame.Surface ( self._tWH )
        #assert ( self._srfAV )

        self._srfAV.set_colorkey (( 0, 0, 0 ))

        #** ---------------------------------------------------------------------------------------
        #*  desenha as alidades eletrônicas verticais
        #*/
        self.drawAlidElev ( self._srfAV, l_iEsc, l_iCab )


        #** ---------------------------------------------------------------------------------------
        #*  cria uma superfície para a linha de referência de altitude
        #*/
        self._srfLR = pygame.Surface ( self._tWH )
        #assert ( self._srfLR )

        self._srfLR.set_colorkey (( 0, 0, 0 ))

        #** ---------------------------------------------------------------------------------------
        #*  desenha a linha de referência de altitude
        #*/
        self.drawRefLine ( self._srfLR, l_iEsc, l_iCab )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  viewVideoAlidades::drawAlidAzim
    #*  -------------------------------------------------------------------------------------------
    #*  desenha a indicação da posição da antena azimute na imagem elevação sem apagar as
    #*  informações de fundo
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def drawAlidAzim ( self, f_srf, f_iEsc, f_iCab ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "viewVideoAlidades::drawAlidAzim"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        #assert ( self._oPAR )

        #** ---------------------------------------------------------------------------------------
        #*/
        for l_iAng in xrange ( int ( self._oPAR._fAngAlidAzimDisplay - 4.0 ), int ( self._oPAR._fAngAlidAzimDisplay + 5.0 )):

            #** -----------------------------------------------------------------------------------
            #*  para todos os range marks...
            #*/
            for l_iRMrk in xrange ( self._oPAR._aiNumMarks [ f_iEsc ] + 1 ):

                #** -------------------------------------------------------------------------------
                #*/
                l_iX = int ( self._oPAR._MatrizEle [ f_iEsc ][ l_iAng ][ l_iRMrk ][ f_iCab ][ 0 ] + 2 )
                l_iY = int ( self._oPAR._MatrizEle [ f_iEsc ][ l_iAng ][ l_iRMrk ][ f_iCab ][ 1 ] )

                #** -------------------------------------------------------------------------------
                #*  calcula o número de pontos a desenhar
                #*/
                l_iN = (( l_iRMrk + 1 ) // 4 ) + 1

                #** -------------------------------------------------------------------------------
                #*  verifica se o ponto é válido
                #*/
                if (( l_iY > 0 ) and ( l_iY < (( self._tWH [ 1 ] / 2 ) - 1 ))):

                    #** ---------------------------------------------------------------------------
                    #*  desenha os pontos
                    #*/
                    self.plotarPontos ( f_srf, l_iN, l_iX, l_iY, locDefs.xCOR_AEA )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  viewVideoAlidades::drawAlidElev
    #*  -------------------------------------------------------------------------------------------
    #*  desenha a indicação da posição da antena de elevação na imagem azimute sem apagar as
    #*  informações de fundo
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def drawAlidElev ( self, f_srf, f_iEsc, f_iCab ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "viewVideoAlidades::drawAlidElev"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        #assert ( self._oPAR )

        #** ---------------------------------------------------------------------------------------
        #*/
        for l_iAng in xrange ( int ( self._oPAR._fAngAlidElevDisplay - 3.0 ), int ( self._oPAR._fAngAlidElevDisplay + 4.0 )):

            #** -----------------------------------------------------------------------------------
            #*  para todos os range marks...
            #*/
            for l_iRMrk in xrange ( self._oPAR._aiNumMarks [ f_iEsc ] + 1 ):

                #** -------------------------------------------------------------------------------
                #*/
                l_iX = int ( self._oPAR._MatrizAzi [ f_iEsc ][ l_iAng ][ l_iRMrk ][ f_iCab ][ 0 ] + 2 )
                l_iY = int ( self._oPAR._MatrizAzi [ f_iEsc ][ l_iAng ][ l_iRMrk ][ f_iCab ][ 1 ] )

                #** -------------------------------------------------------------------------------
                #*  calcula o número de pontos a desenhar
                #*/
                l_iN = (( l_iRMrk + 1 ) // 4 ) + 1

                #** -------------------------------------------------------------------------------
                #*  verifica se o ponto é válido
                #*/
                if (( l_iY > (( self._tWH [ 1 ] / 2 ) + 1 )) and ( l_iY < ( self._tWH [ 1 ] - 1 ))):

                    #** ---------------------------------------------------------------------------
                    #*  desenha os pontos
                    #*/
                    self.plotarPontos ( f_srf, l_iN, l_iX, l_iY, locDefs.xCOR_AEE )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  viewVideoAlidades::drawRefLine
    #*  -------------------------------------------------------------------------------------------
    #*  desenha a linha de referencia de altitude e o string indicativo sem apagar as informações
    #*  de fundo
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_srf - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def drawRefLine ( self, f_srf, f_iEsc, f_iCab ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "viewVideoAlidades::drawRefLine"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        #assert ( self._oPAR )

        #** ---------------------------------------------------------------------------------------
        #*  obtém a linha de referência atual
        #*/
        l_iHRefLine = self._oPAR.getHRefLine ()

        #** ---------------------------------------------------------------------------------------
        #*/
        if ((( l_iHRefLine > 8000 ) and ( 0 == f_iEsc )) or
            (( l_iHRefLine > 4000 ) and ( 1 == f_iEsc )) or
            (( l_iHRefLine > 2000 ) and ( 2 == f_iEsc )) or
             ( l_iHRefLine <    0 )):

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*  cai fora...
            #*/
            return

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iYAux = int ( round ( self._oPAR._afFatorEscYElev [ f_iEsc ] * glbDefs.xCNV_ft2M * l_iHRefLine ))

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( l_iYAux > self._oPAR._iYPonToqueElev ):

            #** -----------------------------------------------------------------------------------
            #*/
            l_iYLine = self._oPAR._iYPonToqueElev

        #** ---------------------------------------------------------------------------------------
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*/
            l_iYLine = self._oPAR._iYPonToqueElev - l_iYAux

        #** ---------------------------------------------------------------------------------------
        #*  seleciona a cor da linha de referência de altitude
        #*/
        l_tCor = locDefs.xCOR_LRA

        #** ---------------------------------------------------------------------------------------
        #*  desenha a linha de referência de altitude
        #*/
        pygame.draw.line ( f_srf, l_tCor, ( 0, l_iYLine ), ( self._tWH [ 0 ], l_iYLine ))

        #** ---------------------------------------------------------------------------------------
        #*  monta o texto da linha de referência
        #*/
        l_szTxt = "%s" % str ( l_iHRefLine )
        #assert ( l_szTxt )

        #** ---------------------------------------------------------------------------------------
        #*  cria a fonte
        #*/
        l_font = pygame.font.Font ( glbDefs.xFNT_None, 12 )
        #assert ( l_font )

        #** ---------------------------------------------------------------------------------------
        #*  cria o texto com a linha de referência
        #*/
        l_szTxt = l_font.render ( l_szTxt, 1, l_tCor )
        #assert ( l_szTxt )

        #** ---------------------------------------------------------------------------------------
        #*  make the reference line id stand under the arrows
        #*/
        l_txtPos = l_szTxt.get_rect ()
        #assert ( l_txtPos )

        #** ---------------------------------------------------------------------------------------
        #*  cabeceira principal ?
        #*/
        if ( 0 == f_iCab ):

            #** -----------------------------------------------------------------------------------
            #*/
            l_txtPos.center = ( 20, l_iYLine - 6 )

        #** ---------------------------------------------------------------------------------------
        #*  senão, cabeceira secundária
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*/
            l_txtPos.center = ( 600, l_iYLine - 6 )

        #** ---------------------------------------------------------------------------------------
        #*  put the reference line id on the screen
        #*/
        f_srf.blit ( l_szTxt, l_txtPos )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  viewVideoAlidades::plotarPontos
    #*  -------------------------------------------------------------------------------------------
    #*  plota f_iN pontos na vertical a partir da coordenada (f_iX, f_iY) na direção vertical e
    #*  sentido para baixo na cor dada por Cor.
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def plotarPontos ( self, f_srf, f_iN, f_iX, f_iY, f_tCor ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "viewVideoAlidades::plotarPontos"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )

        #** ---------------------------------------------------------------------------------------
        #*  plota f_iN pontos na vertical l_iY
        #*/
        for l_iY in xrange ( f_iN ):

            #** -----------------------------------------------------------------------------------
            #*  plota o ponto definido
            #*/
            f_srf.set_at (( f_iX, f_iY + l_iY ), f_tCor )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** ===========================================================================================
    #*  acesso a área de dados do objeto
    #*  ===========================================================================================
    #*/

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "viewVideoAlidades" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** ----------------------------------------------------------------------------------------------- *#
