#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2008-2011, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: view
#*  Classe...: guiMessage
#*
#*  Descrição: DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  mlabru   2010/set  1.0  versão para Linux
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração
#*  -----------------------------------------------------------------------------------------------
#*  mlabru   2010/set  1.0  version started
#*  mlabru   2011/jan  1.01 release 01
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ pyGame (biblioteca gráfica)
#/ ------------------------------------------------------------------------------------------------
import pygame
import pygame.font

from pygame.locals import *

#/ pyACME / model
#/ ------------------------------------------------------------------------------------------------
import model.glbDefs as glbDefs
import model.locDefs as locDefs

#/ pyACME / view
#/ ------------------------------------------------------------------------------------------------
import view.guiModel as guiModel

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  guiMessage::guiMessage
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/
class guiMessage ( guiModel.guiModel ):

    #** -------------------------------------------------------------------------------------------
    #*  guiMessage::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the message area
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_cm, f_srf, f_tNW, f_tWH ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiMessage::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_cm )

        #assert ( f_srf )
        #assert ( f_tNW )
        #assert ( f_tWH )

        #** ---------------------------------------------------------------------------------------
        #*  initialize super classe
        #*/
        guiModel.guiModel.__init__ ( self, f_cm, f_srf, f_tNW, f_tWH, "mensagens de alerta e erros" )

        #** ---------------------------------------------------------------------------------------
        #*  tamanho da fonte
        #*/
        self._iFontSize = 12

        #** ---------------------------------------------------------------------------------------
        #*  número de linhas na caixa de mensagens
        #*/
        self._iMax = int ( round (( f_tWH [ 1 ] - locDefs.xSCR_HDR_Height ) / self._iFontSize ))
        #l_log.info ( "self._iMax: " + str ( self._iMax ))

        #** ---------------------------------------------------------------------------------------
        #*  lista de tuplas de ( mensagens, cor )
        #*/
        self._lstMsg = []

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  guiMessage::addMsg
    #*  -------------------------------------------------------------------------------------------
    #*  add's a message to the bottom of the screen
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_szHdr - the message header to be displayed
    #*  @param  f_szMsg - the message to be displayed
    #*  @param  f_tCor  - the message color
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def addMsg ( self, f_szHdr, f_szMsg, f_tCor ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiMessage::addMsg"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_szHdr )
        #assert ( f_szMsg )
        #assert ( f_tCor )

        #** ---------------------------------------------------------------------------------------
        #*  monta o texto
        #*/
        l_szTxt = f_szHdr + ": " + f_szMsg
        #assert ( l_szTxt )

        #** ---------------------------------------------------------------------------------------
        #*  insere o texto na lista
        #*/
        self.addTxt ( l_szTxt, f_tCor )
        #l_log.info ( "l_szTxt: " + str ( l_szTxt ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  guiMessage::addTxt
    #*  -------------------------------------------------------------------------------------------
    #*  add's a message to the bottom of the screen
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_szTxt - the message to be displayed
    #*  @param  f_tCor  - the message color
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def addTxt ( self, f_szTxt, f_tCor ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiMessage::addTxt"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_szTxt )
        #assert ( f_tCor )

        #** ---------------------------------------------------------------------------------------
        #*  checa se a lista cabe na caixa de mensagens
        #*/
        if ( len ( self._lstMsg ) > ( self._iMax - 1 )):

            #** -----------------------------------------------------------------------------------
            #*  se não couber, remove uma mensagem
            #*/
            self._lstMsg.pop ( 0 )

        #** ---------------------------------------------------------------------------------------
        #*  seleciona a fonte a utilizar
        #*/
        l_Font = pygame.font.Font ( glbDefs.xFNT_None, self._iFontSize )
        #assert ( l_Font )

        #** ---------------------------------------------------------------------------------------
        #*  escreve o texto na fonte e cor selecionadas
        #*/
        l_szTxt = l_Font.render ( f_szTxt, 1, f_tCor )
        #assert ( l_szTxt )

        #** ---------------------------------------------------------------------------------------
        #*  insere o texto na lista
        #*/
        self._lstMsg.append ( l_szTxt )

        #** ---------------------------------------------------------------------------------------
        #*  avisa que algo mudou
        #*/
        self._bChanged = True

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  guiMessage::doDraw
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the message area
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_srf - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def doDraw ( self, f_srf ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiMessage::doDraw"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )

        #** ---------------------------------------------------------------------------------------
        #*  algo mudou ?
        #*/
        if ( self._bChanged ):

            #** -----------------------------------------------------------------------------------
            #*  verifica condições de execução
            #*/
            #assert ( self._canvas )

            #** -----------------------------------------------------------------------------------
            #*  limpa o canvas
            #*/
            self._canvas.fill (( 0, 0x50, 0x60 ))
            #self._canvas.set_colorkey ( self._canvas.get_at (( 1, 1 )))

            #** -----------------------------------------------------------------------------------
            #*  reescreve todas as mensagens no canvas
            #*/
            self.doRedrawMsgs ( self._canvas )

            #** -----------------------------------------------------------------------------------
            #*  transfere o canvas para a superfície recebida
            #*/
            self.drawCanvas ( f_srf )

            #** -----------------------------------------------------------------------------------
            #*  salva os novos valores
            #*/
            self._bChanged = False

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  guiMessage::doRedrawMsgs
    #*  -------------------------------------------------------------------------------------------
    #*  doRedraw all the messages in the msgBox
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_srf - superfície onde escrever as mensagens
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def doRedrawMsgs ( self, f_srf ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiMessage::doRedrawMsgs"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )

        #** ---------------------------------------------------------------------------------------
        #*  checa se "existe" uma lista
        #*/
        if ( self._lstMsg ):

            #** -----------------------------------------------------------------------------------
            #*  obtém o número de mensagens na lista
            #*/
            l_iLenList = len ( self._lstMsg )

            #** -----------------------------------------------------------------------------------
            #*  range da lista
            #*/
            l_Iterator = range ( l_iLenList )

            #** -----------------------------------------------------------------------------------
            #*  inverte a ordem
            #*/
            l_Iterator.reverse ()

            #** -----------------------------------------------------------------------------------
            #*  para todas as mensagens na lista...
            #*/
            for l_iI in l_Iterator:

                #** -------------------------------------------------------------------------------
                #*  calcula a posição do texto
                #*/
                l_iTxtPos = ( 5, 2 + (( l_iLenList - 1 ) - l_iI ) * self._iFontSize )

                #** -------------------------------------------------------------------------------
                #*  escreve o texto na tela
                #*/
                f_srf.blit ( self._lstMsg [ l_iI ], l_iTxtPos )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** ===========================================================================================
    #*  acesso a área de dados do objeto
    #*  ===========================================================================================
    #*/

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "guiMessage" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** -----------------------------------------------------------------------------------------------
#*  this is the bootstrap process
#*/
if ( '__main__' == __name__ ):

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    logging.basicConfig ()
                
    #** -------------------------------------------------------------------------------------------
    #*
    l_gui = guiMessage ( f_cm, f_srf, f_tNW, f_tWH )
    #assert ( l_gui )
                            
#** ----------------------------------------------------------------------------------------------- *#
