#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2009, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiPAR
#*  Classe...: guiUtils
#*
#*  Descrição: rotinas utilitarias para gui
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração       
#*  -----------------------------------------------------------------------------------------------
#*  well     1997/???/??  versão 1.0 started
#*  mlabru   2009/SET/01  versão 3.0 started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    1997/???/??  versão inicial
#*  3.01-01  2009/SET/01  versão para Linux
#*  -----------------------------------------------------------------------------------------------
#*/
#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#** -----------------------------------------------------------------------------------------------
#*  variaveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#/ cores
#/ ------------------------------------------------------------------------------------------------
w_clrRed   = ( 255,   0,   0, 255 )
w_clrGreen = (   0, 170,   0, 255 )
w_clrCyan  = (   0, 255, 255, 255 )
w_clrBlue  = (   0,   0, 255, 255 )
w_clrWhite = ( 255, 255, 255, 255 )

#** -----------------------------------------------------------------------------------------------
#*  guiUtils::LinePont
#*  -----------------------------------------------------------------------------------------------
#*  PONTEIRO
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def LinePont ( f_srfX, f_iX1, f_iY1, f_iX2, f_iY2, f_aiCores ):

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    l_szMetodo = "guiUtils::LinePont"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #l_log.info ( "f_iX1: " + str ( f_iX1 ))
    #l_log.info ( "f_iY1: " + str ( f_iY1 ))

    #l_log.info ( "f_iX2: " + str ( f_iX2 ))
    #l_log.info ( "f_iY2: " + str ( f_iY2 ))

    #if ( not (( f_iX1 >= 0 ) and ( f_iX1 < 640 ))):

        #l_log.info ( "Erro !!! f_iX1: " + str ( f_iX1 ))

    #if ( not (( f_iX2 >= 0 ) and ( f_iX2 < 640 ))):

        #l_log.info ( "Erro !!! f_iX2: " + str ( f_iX2 ))

    #if ( not (( f_iY1 >= 0 ) and ( f_iY1 < 480 ))):

        #l_log.info ( "Erro !!! f_iY1: " + str ( f_iY1 ))

    #if ( not (( f_iY2 >= 0 ) and ( f_iY2 < 480 ))):

        #l_log.info ( "Erro !!! f_iY2: " + str ( f_iY2 ))

    #** -------------------------------------------------------------------------------------------
    #*/
    l_iCont = 0

    #** -------------------------------------------------------------------------------------------
    #*/
    if ( f_iX1 > f_iX2 ): #(* ensure that x2 >= x1 *)

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iTmp = f_iX1
        f_iX1  = f_iX2
        f_iX2  = l_iTmp

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iTmp = f_iY1
        f_iY1  = f_iY2
        f_iY2  = l_iTmp

    #** -------------------------------------------------------------------------------------------
    #*/
    l_iDX = f_iX2 - f_iX1
    l_iE  = 0

    #** -------------------------------------------------------------------------------------------
    #*/
    if ( f_iY1 <= f_iY2 ): #(* case where y increases *)

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iDY = ( f_iY2 - f_iY1 )

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( l_iDX >= l_iDY ):

            #** -----------------------------------------------------------------------------------
            #*/
            while ( True ):

                #l_log.info ( "f_iX1..: " + str ( f_iX1 ))
                #l_log.info ( "f_iX2..: " + str ( f_iX2 ))
                #l_log.info ( "l_iCont: " + str ( l_iCont ))

                #** -------------------------------------------------------------------------------
                #*/
                l_iCorAux = f_srfX.get_at (( f_iX1, f_iY1 ))

                #** -------------------------------------------------------------------------------
                #*/
                f_srfX.set_at (( f_iX1, f_iY1 ), f_aiCores [ l_iCont % 150 ] )

                #** -------------------------------------------------------------------------------
                #*/
                f_aiCores [ l_iCont % 150 ] = l_iCorAux
                l_iCont += 1

                #** -------------------------------------------------------------------------------
                #*/
                if ( f_iX1 == f_iX2 ):

                    #** ---------------------------------------------------------------------------
                    #*/
                    break

                #** -------------------------------------------------------------------------------
                #*/
                f_iX1 += 1

                #** -------------------------------------------------------------------------------
                #*/
                l_iE += l_iDY
                l_iE += l_iDY

                #** -------------------------------------------------------------------------------
                #*/
                if ( l_iE > l_iDX ):

                    #** ---------------------------------------------------------------------------
                    #*/
                    l_iE -= l_iDX
                    l_iE -= l_iDX

                    #** ---------------------------------------------------------------------------
                    #*/
                    f_iY1 += 1

        #** ---------------------------------------------------------------------------------------
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*/
            while ( True ):

                #** -------------------------------------------------------------------------------
                #*/
                l_iCorAux = f_srfX.get_at (( f_iX1, f_iY1 ))

                #** -------------------------------------------------------------------------------
                #*/
                f_srfX.set_at (( f_iX1, f_iY1 ), f_aiCores [ l_iCont ] )

                #** -------------------------------------------------------------------------------
                #*/
                f_aiCores [ l_iCont ] = l_iCorAux
                l_iCont += 1

                #** -------------------------------------------------------------------------------
                #*/
                if ( f_iY1 == f_iY2 ):

                    #** ---------------------------------------------------------------------------
                    #*/
                    break

                #** -------------------------------------------------------------------------------
                #*/
                f_iY1 += 1

                #** -------------------------------------------------------------------------------
                #*/
                l_iE += l_iDX
                l_iE += l_iDX

                #** -------------------------------------------------------------------------------
                #*/
                if ( l_iE > l_iDY ):

                    #** ---------------------------------------------------------------------------
                    #*/
                    l_iE -= l_iDY
                    l_iE -= l_iDY

                    #** ---------------------------------------------------------------------------
                    #*/
                    f_iX1 += 1

    #** -------------------------------------------------------------------------------------------
    #*/
    else: #(* case where y decreases *)

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iDY = ( f_iY1 - f_iY2 )

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( l_iDX >= l_iDY ):

            #** -----------------------------------------------------------------------------------
            #*/
            while ( True ):

                #** -------------------------------------------------------------------------------
                #*/
                l_iCorAux = f_srfX.get_at (( f_iX1, f_iY1 ))

                #** -------------------------------------------------------------------------------
                #*/
                f_srfX.set_at (( f_iX1, f_iY1 ), f_aiCores [ l_iCont ] )

                #** -------------------------------------------------------------------------------
                #*/
                f_aiCores [ l_iCont ] = l_iCorAux
                l_iCont += 1

                #** -------------------------------------------------------------------------------
                #*/
                if ( f_iX1 == f_iX2 ):

                    #** ---------------------------------------------------------------------------
                    #*/
                    break

                #** -------------------------------------------------------------------------------
                #*/
                f_iX1 += 1

                #** -------------------------------------------------------------------------------
                #*/
                l_iE += l_iDY
                l_iE += l_iDY

                #** -------------------------------------------------------------------------------
                #*/
                if ( l_iE > l_iDX ):

                    #** ---------------------------------------------------------------------------
                    #*/
                    l_iE -= l_iDX
                    l_iE -= l_iDX

                    #** ---------------------------------------------------------------------------
                    #*/
                    f_iY1 -= 1

        #** ---------------------------------------------------------------------------------------
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*/
            while ( True ):

                #** -------------------------------------------------------------------------------
                #*/
                l_iCorAux = f_srfX.get_at (( f_iX1, f_iY1 ))

                #** -------------------------------------------------------------------------------
                #*/
                f_srfX.set_at (( f_iX1, f_iY1 ), f_aiCores [ l_iCont ] )

                #** -------------------------------------------------------------------------------
                #*/
                f_aiCores [ l_iCont ] = l_iCorAux
                l_iCont += 1

                #** -------------------------------------------------------------------------------
                #*/
                if ( f_iY1 == f_iY2 ):

                    #** ---------------------------------------------------------------------------
                    #*/
                    break

                #** -------------------------------------------------------------------------------
                #*/
                f_iY1 -= 1

                #** -------------------------------------------------------------------------------
                #*/
                l_iE += l_iDX
                l_iE += l_iDX

                #** -------------------------------------------------------------------------------
                #*/
                if ( l_iE > l_iDY ):

                    #** ---------------------------------------------------------------------------
                    #*/
                    l_iE -= l_iDY
                    l_iE -= l_iDY

                    #** ---------------------------------------------------------------------------
                    #*/
                    f_iX1 += 1

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*  guiUtils::PontAlt1
#*  -----------------------------------------------------------------------------------------------
#*  PONTEIRO ALTIMETRO 1
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def PontAlt1 ( f_srfX, f_iX1, f_iY1, f_aiCores ):

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    l_szMetodo = "guiUtils::PontAlt1"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #l_log.info ( "f_iX1: " + str ( f_iX1 ))
    #l_log.info ( "f_iY1: " + str ( f_iY1 ))

    #if ( not (( f_iX1 >= 0 ) and ( f_iX1 < 640 ))):

        #l_log.info ( "Erro !! f_iX1: " + str ( f_iX1 ))

    #if ( not (( f_iY1 >= 0 ) and ( f_iY1 < 480 ))):

        #l_log.info ( "Erro !! f_iY1: " + str ( f_iY1 ))

    #** -------------------------------------------------------------------------------------------
    #*/
    l_iCont = 0

    #** -------------------------------------------------------------------------------------------
    #*/
    for l_iX in xrange ( f_iX1, ( f_iX1 + 3 )):

        #** ---------------------------------------------------------------------------------------
        #*/
        for l_iY in xrange ( f_iY1, ( f_iY1 + 3 )):

            #if ( not (( l_iX >= 0 ) and ( l_iX < 640 ))):

                #l_log.info ( "l_iX: " + str ( l_iX ))

            #if ( not (( l_iY >= 0 ) and ( l_iY < 480 ))):

                #l_log.info ( "l_iY: " + str ( l_iY ))

            #** -----------------------------------------------------------------------------------
            #*/
            l_iCorAux = f_srfX.get_at (( l_iX, l_iY ))

            #** -----------------------------------------------------------------------------------
            #*/
            f_srfX.set_at (( l_iX, l_iY ), f_aiCores [ l_iCont ] )

            #** -----------------------------------------------------------------------------------
            #*/
            f_aiCores [ l_iCont ] = l_iCorAux

            #** -----------------------------------------------------------------------------------
            #*/
            l_iCont += 1

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*  guiUtils::PontJoyX
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def PontJoyX ( f_srfX, f_iPonto ):

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    l_szMetodo = "guiUtils::PontJoyX"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*/
    f_iPonto = 405 + ( 3 * f_iPonto )

    #** -------------------------------------------------------------------------------------------
    #*/
    l_iK  = 7
    l_iKK = 1

    #** -------------------------------------------------------------------------------------------
    #*/
    for l_iI in xrange ( 15, 21 ):

        #** ---------------------------------------------------------------------------------------
        #*/
        for l_iJ in xrange (( f_iPonto - l_iK + 1 ), ( f_iPonto + l_iK - 1 )):

            #** -----------------------------------------------------------------------------------
            #*/
            f_srfX.set_at (( l_iJ, l_iI ), w_clrRed )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iII = l_iI + 203

        #** ---------------------------------------------------------------------------------------
        #*/
        for l_iJ in xrange (( f_iPonto - l_iKK + 1 ), ( f_iPonto + l_iKK - 1 )):

            #** -----------------------------------------------------------------------------------
            #*/
            f_srfX.set_at (( l_iJ, l_iII ), w_clrRed )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iKK += 1
        l_iK -= 1

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*  guiUtils::PontJoyY
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def PontJoyY ( f_srfX, f_iPonto ):

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    l_szMetodo = "guiUtils::PontJoyY"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*/
    f_iPonto = 120 + ( 3 * f_iPonto )

    #** -------------------------------------------------------------------------------------------
    #*/
    l_iK = 7

    #** -------------------------------------------------------------------------------------------
    #*/
    for l_iI in xrange ( 399, 405 ):

        #** ---------------------------------------------------------------------------------------
        #*/
        for l_iJ in xrange (( f_iPonto - l_iK + 1 ), ( f_iPonto + l_iK - 1 )):

            #** -----------------------------------------------------------------------------------
            #*/
            f_srfX.set_at (( l_iI, l_iJ ), w_clrRed )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iK -= 1

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*  guiUtils::calculaDxDy
#*  -----------------------------------------------------------------------------------------------
#*  CALCULA DX DY
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def calculaDxDy ( f_iX1, f_iY1, f_iX2, f_iY2 ):

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    l_szMetodo = "guiUtils::calculaDxDy"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*/
    if ( abs ( f_iX2 - f_iX1 ) < abs ( f_iY2 - f_iY1 )):

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iDY = 0

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( f_iY2 > f_iY1 ):

            #** -----------------------------------------------------------------------------------
            #*/
            l_iDX =  1

        #** ---------------------------------------------------------------------------------------
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*/
            l_iDX = -1

    #** -------------------------------------------------------------------------------------------
    #*/
    else:

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iDX = 0

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( f_iX2 < f_iX1 ):

            #** -----------------------------------------------------------------------------------
            #*/
            l_iDY =  1

        #** ---------------------------------------------------------------------------------------
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*/
            l_iDY = -1

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*/
    return ( l_iDX, l_iDY )

#** -----------------------------------------------------------------------------------------------
#*  guiUtils::RetocaExtremos
#*  -----------------------------------------------------------------------------------------------
#*  RETOCA EXTREMOS
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def RetocaExtremos ( f_iX1, f_iY1, f_iX2, f_iY2 ):

        #VAR  i, j, c : CARDINAL

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    l_szMetodo = "guiUtils::RetocaExtremos"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*/
        #  FOR i =  f_iX1-2 TO f_iX1+2 DO
        #    FOR j =  f_iY1-2 TO f_iY1+2 DO
        #      c =  f_srfX.get_at((i,j))
        #      if c = w_clrGreen THEN f_srfX.set_at((i, j ), w_clrBlue) END
        #    END
        #  END
        #  FOR i =  f_iX2-2 TO f_iX2+2 DO
        #    FOR j =  f_iY2-2 TO f_iY2+2 DO
        #      c =  f_srfX.get_at((i,j))
        #      if c = w_clrBlue THEN f_srfX.set_at((i, j ), w_clrGreen) END
        #    END
        #  END
        #
    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*  guiUtils::FillArea
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def FillArea ( f_srf, f_iX, f_iY, f_iDX, f_iDY ):

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    l_szMetodo = "guiUtils::FillArea"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #l_log.info ( "f_srf: " + str ( f_srf ))

    #** -------------------------------------------------------------------------------------------
    #*/
    l_iXAux = f_iX
    #l_log.info ( "l_iXAux: " + str ( l_iXAux ))

    l_iYAux = f_iY
    #l_log.info ( "l_iYAux: " + str ( l_iYAux ))

    #** -------------------------------------------------------------------------------------------
    #*/
    l_iC = f_srf.get_at (( l_iXAux, l_iYAux ))
    #l_log.info ( "l_iC: " + str ( l_iC ))

    #** -------------------------------------------------------------------------------------------
    #*/
    while (( w_clrGreen == l_iC ) or ( w_clrWhite == l_iC )):

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( w_clrGreen == l_iC ):

            #** -----------------------------------------------------------------------------------
            #*/
            f_srf.set_at (( l_iXAux, l_iYAux ), w_clrCyan )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iXAux -= f_iDX
        l_iYAux -= f_iDY

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iC = f_srf.get_at (( l_iXAux, l_iYAux ))

    #** -------------------------------------------------------------------------------------------
    #*/
    l_iXAux = f_iX
    l_iYAux = f_iY

    #** -------------------------------------------------------------------------------------------
    #*/
    l_iC = f_srf.get_at (( l_iXAux, l_iYAux ))

    #** -------------------------------------------------------------------------------------------
    #*/
    while (( w_clrCyan == l_iC ) or ( w_clrWhite == l_iC )):

            #** -----------------------------------------------------------------------------------
            #*/
            if ( w_clrCyan == l_iC ):

                #** -------------------------------------------------------------------------------
                #*/
                f_srf.set_at (( l_iXAux, l_iYAux ), w_clrGreen )

            #** -----------------------------------------------------------------------------------
            #*/
            l_iXAux += f_iDX
            l_iYAux += f_iDY

            #** -----------------------------------------------------------------------------------
            #*/
            l_iC = f_srf.get_at (( l_iXAux, l_iYAux ))

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*  guiUtils::LineHorizon
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def LineHorizon ( f_srf, f_iX1, f_iY1, f_iX2, f_iY2 ):

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    l_szMetodo = "guiUtils::LineHorizon"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #l_log.info ( "f_iX1: " + str ( f_iX1 ))
    #l_log.info ( "f_iY1: " + str ( f_iY1 ))
    #l_log.info ( "f_iX2: " + str ( f_iX2 ))
    #l_log.info ( "f_iY2: " + str ( f_iY2 ))

    #** -------------------------------------------------------------------------------------------
    #*/
    l_iDx, l_iDy = calculaDxDy ( f_iX1, f_iY1, f_iX2, f_iY2 )

    #** -------------------------------------------------------------------------------------------
    #*/
    if ( f_iX1 > f_iX2 ): #(* ensure that x2 >= x1 *)

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iTmp = f_iX1
        f_iX1  = f_iX2
        f_iX2  = l_iTmp

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iTmp = f_iY1
        f_iY1  = f_iY2
        f_iY2  = l_iTmp

    #** -------------------------------------------------------------------------------------------
    #*/
    l_iDX = f_iX2 - f_iX1
    l_iE  = 0

    #** -------------------------------------------------------------------------------------------
    #*/
    if ( f_iY1 <= f_iY2 ): #(* case where y increases *)

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iDY = ( f_iY2 - f_iY1 )

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( l_iDX >= l_iDY ):

            #** -----------------------------------------------------------------------------------
            #*/
            while ( True ):

                #** -------------------------------------------------------------------------------
                #*/
                FillArea ( f_srf, f_iX1, f_iY1, l_iDx, l_iDy )

                #** -------------------------------------------------------------------------------
                #*/
                if ( f_iX1 == f_iX2 ):

                    #** ---------------------------------------------------------------------------
                    #*/
                    break

                #** -------------------------------------------------------------------------------
                #*/
                f_iX1 += 1

                #** -------------------------------------------------------------------------------
                #*/
                l_iE += l_iDY
                l_iE += l_iDY

                #** -------------------------------------------------------------------------------
                #*/
                if ( l_iE > l_iDX ):

                    #** ---------------------------------------------------------------------------
                    #*/
                    l_iE -= l_iDX
                    l_iE -= l_iDX

                    #** ---------------------------------------------------------------------------
                    #*/
                    f_iY1 += 1

        #** ---------------------------------------------------------------------------------------
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*/
            while ( True ):

                #** -------------------------------------------------------------------------------
                #*/
                FillArea ( f_srf, f_iX1, f_iY1, l_iDx, l_iDy )

                #** -------------------------------------------------------------------------------
                #*/
                if ( f_iY1 == f_iY2 ):

                    #** ---------------------------------------------------------------------------
                    #*/
                    break

                #** -------------------------------------------------------------------------------
                #*/
                f_iY1 += 1

                #** -------------------------------------------------------------------------------
                #*/
                l_iE += l_iDX
                l_iE += l_iDX

                #** -------------------------------------------------------------------------------
                #*/
                if ( l_iE > l_iDY ):

                    #** ---------------------------------------------------------------------------
                    #*/
                    l_iE -= l_iDY
                    l_iE -= l_iDY

                    #** ---------------------------------------------------------------------------
                    #*/
                    f_iX1 += 1

    #** -------------------------------------------------------------------------------------------
    #*/
    else: #(* case where y decreases *)

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iDY = ( f_iY1 - f_iY2 )

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( l_iDX >= l_iDY ):

            #** -----------------------------------------------------------------------------------
            #*/
            while ( True ):

                #** -------------------------------------------------------------------------------
                #*/
                FillArea ( f_srf, f_iX1, f_iY1, l_iDx, l_iDy )

                #** -------------------------------------------------------------------------------
                #*/
                if ( f_iX1 == f_iX2 ):

                    #** ---------------------------------------------------------------------------
                    #*/
                    break

                #** -------------------------------------------------------------------------------
                #*/
                f_iX1 += 1

                #** -------------------------------------------------------------------------------
                #*/
                l_iE += l_iDY
                l_iE += l_iDY

                #** -------------------------------------------------------------------------------
                #*/
                if ( l_iE > l_iDX ):

                    #** ---------------------------------------------------------------------------
                    #*/
                    l_iE -= l_iDX
                    l_iE -= l_iDX

                    #** ---------------------------------------------------------------------------
                    #*/
                    f_iY1 -= 1

        #** ---------------------------------------------------------------------------------------
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*/
            while ( True ):

                #** -------------------------------------------------------------------------------
                #*/
                FillArea ( f_srf, f_iX1, f_iY1, l_iDx, l_iDy )

                #** -------------------------------------------------------------------------------
                #*/
                if ( f_iY1 == f_iY2 ):

                    #** ---------------------------------------------------------------------------
                    #*/
                    break

                #** -------------------------------------------------------------------------------
                #*/
                f_iY1 -= 1

                #** -------------------------------------------------------------------------------
                #*/
                l_iE += l_iDX
                l_iE += l_iDX

                #** -------------------------------------------------------------------------------
                #*/
                if ( l_iE > l_iDY ):

                    #** ---------------------------------------------------------------------------
                    #*/
                    l_iE -= l_iDY
                    l_iE -= l_iDY

                    #** ---------------------------------------------------------------------------
                    #*/
                    f_iX1 += 1

    #** -------------------------------------------------------------------------------------------
    #*/
    #!X! RetocaExtremos ( f_iX1, f_iY1, f_iX2, f_iY2, l_iDx, l_iDy )

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "guiUtils" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** ----------------------------------------------------------------------------------------------- *#
