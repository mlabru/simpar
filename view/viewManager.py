#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2009, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiPAR
#*  Classe...: viewManager
#*
#*  Descrição: DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração       
#*  -----------------------------------------------------------------------------------------------
#*  well     1997/fev/12  versão 1.0 started
#*  mlabru   2009/set/01  versão 3.0 started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    1997/fev/12  versão inicial (DOS/Modula-2)
#*  3.01-01  2009/set/01  versão para Linux
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ Python library
#/ ------------------------------------------------------------------------------------------------
import os
import sys
import threading

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ pyGame (biblioteca gráfica)
#/ ------------------------------------------------------------------------------------------------
import pygame

from pygame.locals import *

#/ SiPAR / model
#/ ------------------------------------------------------------------------------------------------
import model.locDefs as locDefs
import model.glbDefs as glbDefs

#/ SiPAR / view
#/ ------------------------------------------------------------------------------------------------
import view.viewUtils as viewUtils

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  viewManager::viewManager
#*  -----------------------------------------------------------------------------------------------
#*  handles all interaction with user. This class is the interface to SiPAR. It is based on pygame
#*  and SDL packages. It draws the panel on the screen and handles all mouse input.
#*  -----------------------------------------------------------------------------------------------
#*/
class viewManager ( threading.Thread ):

    #** -------------------------------------------------------------------------------------------
    #*  viewManager::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the display
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_cm - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_cm ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "viewManager::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_cm )

        #** ---------------------------------------------------------------------------------------
        #*  initialize super class
        #*/
        threading.Thread.__init__ ( self )

        #** ---------------------------------------------------------------------------------------
        #*  salva o control manager
        #*/
        self._cm = f_cm

        #** ---------------------------------------------------------------------------------------
        #*  obtém o flight control
        #*/
        self._fc = f_cm.getFC ()
        #assert ( self._fc )

        #** ---------------------------------------------------------------------------------------
        #*  obtém o model manager
        #*/
        l_mm = f_cm.getMM ()
        #assert ( l_mm )

        #** ---------------------------------------------------------------------------------------
        #*  obtém o objeto exercício
        #*/
        self._oExe = l_mm.getExercicio ()
        #assert ( self._oExe )

        #** ---------------------------------------------------------------------------------------
        #*  obtém o simulation time engine
        #*/
        self._st = f_cm.getST ()
        #assert ( self._st )

        #** ---------------------------------------------------------------------------------------
        #*  test thread locks to escape xlib error
        #*/
        self._screenLock = threading.Lock ()
        #assert ( self._screenLock )

        #** ---------------------------------------------------------------------------------------
        #*  flag pause
        #*/
        self._bPause = False

        #** ---------------------------------------------------------------------------------------
        #*  hora da simulação
        #*/
        self._dHoraSim = 0

        #** ---------------------------------------------------------------------------------------
        #*/
        self.panelCenterPix = 0

        #** ---------------------------------------------------------------------------------------
        #*  posiciona a tela
        #*/
        os.environ [ "SDL_VIDEO_WINDOW_POS" ] = "-1, -1"

        #** ---------------------------------------------------------------------------------------
        #*  inicia o sistema gráfico
        #*/
        pygame.init ()

        #** ---------------------------------------------------------------------------------------
        #*  uninitialize the mixer
        #*/
        #!X! pygame.mixer.quit ()

        #** ---------------------------------------------------------------------------------------
        #*  modo fullscreen ?
        #*/
        if ( glbDefs.xSCR_Full ):

            #** -----------------------------------------------------------------------------------
            #*  cria a janela em modo fullscreen
            #*/
            self._screen = pygame.display.set_mode ( locDefs.xSCR_Size, FULLSCREEN | DOUBLEBUF | HWSURFACE )
            #assert ( self._screen )
            
        #** ---------------------------------------------------------------------------------------
        #*  senão, modo janela
        #*/
        else:

            #** ---------------------------------------------------------------------------------------
            #*  rodando no windows ?
            #*/
            #if (( "win32" == sys.platform ) or ( "win64" == sys.platform )):

            #** -----------------------------------------------------------------------------------
            #*  cria a tela em modo janela
            #*/
            self._screen = pygame.display.set_mode ( locDefs.xSCR_Size, DOUBLEBUF | HWSURFACE )
            #assert ( self._screen )

        #** ---------------------------------------------------------------------------------------
        #*  cria a font padrão
        #*/
        self._font = pygame.font.Font ( glbDefs.xFNT_None, 8 )
        #assert ( self._font )

        #** ---------------------------------------------------------------------------------------
        #*  background de congelamento
        #*/
        self._bgFrz = None

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  viewManager::cbkCheckSliders
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def cbkCheckSliders ( self, f_tMouse ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "viewManager::cbkCheckSliders"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_tMouse )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        #assert ( self._sldrBox )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._sldrBox.cbkCheckSliders ( f_tMouse )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  viewManager::cbkCheckVoIP
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def cbkCheckVoIP ( self, f_tMouse ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "viewManager::cbkCheckVoIP"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_tMouse )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        #assert ( self._voipBox )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._voipBox.cbkCheckVoIP ( f_tMouse )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  viewManager::cbkDescongela
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def cbkDescongela ( self, f_bPil=True ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "viewManager::cbkDescongela"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        #assert ( self._bgFrz )
        #assert ( self._screen )

        #** ---------------------------------------------------------------------------------------
        #*  make sure background stays
        #*/
        self._bgFrz.set_colorkey ( self._bgFrz.get_at (( 0, 0 )))
        self._screen.blit ( self._bgFrz, ( 0, 0 ))

        #** ---------------------------------------------------------------------------------------
        #*  atualiza a tela
        #*/
        self.dispFlip ()

        #** ---------------------------------------------------------------------------------------
        #*  seta o flag de pausa
        #*/
        self._bPause = False

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  viewManager::cbkCongela
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def cbkCongela ( self, f_bPil=True ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "viewManager::cbkCongela"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        #assert ( self._screen )

        #** ---------------------------------------------------------------------------------------
        #*  seta o flag de pausa
        #*/
        self._bPause = True

        #** ---------------------------------------------------------------------------------------
        #*  obtém o background
        #*/
        self._bgFrz = pygame.display.get_surface ()
        #assert ( self._bgFrz )

        #** ---------------------------------------------------------------------------------------
        #*  cria o texto de aviso
        #*/
        l_font = pygame.font.Font ( glbDefs.xFNT_None, 40 )
        #assert ( l_font )
        
        l_szTxt = l_font.render ( "Congelado", 1, locDefs.xCOR_Congelado )
        #assert ( l_szTxt )

        #** ---------------------------------------------------------------------------------------
        #*  calcula a posição do texto na tela 
        #*/
        l_txtPos = l_szTxt.get_rect ()
        #assert ( l_txtPos )
        
        l_txtPos.center = self._bgFrz.get_rect ().center

        #** ---------------------------------------------------------------------------------------
        #*  put text on screen
        #*/
        self._screen.blit ( l_szTxt, l_txtPos )

        #** ---------------------------------------------------------------------------------------
        #*  atualiza a tela
        #*/
        self.dispFlip ()

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  viewManager::dispFlip
    #*  -------------------------------------------------------------------------------------------
    #*  routine that runs the application
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def dispFlip ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "viewManager::dispFlip"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return

    #** -------------------------------------------------------------------------------------------
    #*  viewManager::run
    #*  -------------------------------------------------------------------------------------------
    #*  routine that runs the application
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def run ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "viewManager::run"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return

    #** ===========================================================================================
    #*  acesso a área de dados do objeto
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  viewManager::getScreen
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getScreen ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "viewManager::getScreen"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._screen )

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "viewManager" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** ----------------------------------------------------------------------------------------------- *#
