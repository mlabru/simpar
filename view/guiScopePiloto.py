#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2009, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiPAR
#*  Classe...: guiScopePiloto
#*
#*  Descrição: this class takes care of all interaction with the user
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração       
#*  -----------------------------------------------------------------------------------------------
#*  well     1997/jun/20  versão 1.0 started
#*  mlabru   2009/set/01  versão 3.0 started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    1997/jun/20  versão inicial (DOS/Modula-2)
#*  3.01-01  2009/set/01  versão para Linux
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ Python library
#/ ------------------------------------------------------------------------------------------------
import math

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ pyGame (biblioteca gráfica)
#/ ------------------------------------------------------------------------------------------------
import pygame
import pygame.font
import pygame.image

from pygame.locals import *

#/ SiPAR / model
#/ ------------------------------------------------------------------------------------------------
import model.glbDefs as glbDefs
import model.locDefs as locDefs

#/ SiPAR / view
#/ ------------------------------------------------------------------------------------------------
import view.spritePonteiros as spritePonteiros
import view.guiScopeModel as guiScopeModel

import view.viewUtils as viewUtils

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  guiScopePiloto::guiScopePiloto
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/
class guiScopePiloto ( guiScopeModel.guiScopeModel ):

    #** -------------------------------------------------------------------------------------------
    #*  guiScopePiloto::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the scope area
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_srf  - background surface
    #*  @param  f_cm  - control manager
    #*  @param  f_tNW - ponto ( X, Y ) do canto superior direito (NW)
    #*  @param  f_tWH - tupla com largura e altura
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_cm, f_srf, f_tNW, f_tWH ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiScopePiloto::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_cm )

        #assert ( f_srf )
        #assert ( f_tNW )
        #assert ( f_tWH )

        #** ---------------------------------------------------------------------------------------
        #*  inicia a superclass
        #*/
        guiScopeModel.guiScopeModel.__init__ ( self, f_cm, f_srf, f_tNW, f_tWH )

        #** ---------------------------------------------------------------------------------------
        #*  load background image
        #*/
        self._imgPanel = viewUtils.loadImage ( "panel.pcx", True )
        #assert ( self._imgPanel )

        #** ---------------------------------------------------------------------------------------
        #*  copia o painel de instrumentos no background
        #*/
        self._bg = self._imgPanel.convert ()
        #assert ( self._bg )

        self._bg.set_colorkey ( None )
        
        #** ---------------------------------------------------------------------------------------
        #*  inicia ponteiros do painel de instrumentos
        #*/
        self._sptPont = spritePonteiros.spritePonteiros ( f_cm )
        #assert ( self._sptPont )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  guiScopePiloto::doDraw
    #*  -------------------------------------------------------------------------------------------
    #*  desenha os elementos do scope
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_oAtv - aeronave a ser desenhada
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def doDraw ( self, f_srf, f_oAtv=None ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiScopePiloto::doDraw"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )
                                
        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        #assert ( self._bg )
                                
        #** ---------------------------------------------------------------------------------------
        #*  camada 1. transfere o desenho do painel de instrumentos para o canvas
        #*/
        f_srf.blit ( self._bg, ( 0, 0 ))

        #** ---------------------------------------------------------------------------------------
        #*  desenha os ponteiros do painel de instrumentos no canvas
        #*/
        self._sptPont.doDraw ( f_srf, f_oAtv )

        #** ---------------------------------------------------------------------------------------
        #*  desenha a moldura externa da área de scope
        #*/
        #pygame.draw.rect ( self._canvas, locDefs.xCOR_Scope, (( 0, 0 ), self._tWH ), 1 )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  guiScopePiloto::doRedraw
    #*  -------------------------------------------------------------------------------------------
    #*  desenha os elementos do scope
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_oAtv - aeronave a ser desenhada
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def doRedraw ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiScopePiloto::doRedraw"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  copia o painel de instrumentos no background
        #*/
        del ( self._bg )

        #** ---------------------------------------------------------------------------------------
        #*  copia o painel de instrumentos no background
        #*/
        self._bg = self._imgPanel.convert ()
        #assert ( self._bg )

        self._bg.set_colorkey ( None )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** ===========================================================================================
    #*  acesso a área de dados do objeto
    #*  ===========================================================================================
    #*/

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "guiScopePiloto" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** -----------------------------------------------------------------------------------------------
#*  this is the bootstrap process
#*/
if ( '__main__' == __name__ ):

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    logging.basicConfig ()
                
    #** -------------------------------------------------------------------------------------------
    #*
    l_gs = guiScopePiloto ( None )
    #assert ( l_gs )
                            
#** ----------------------------------------------------------------------------------------------- *#
