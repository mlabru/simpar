#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2010, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiPAR
#*  Classe...: wizardModel
#*
#*  Descrição: interface principal do programa
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração
#*  -----------------------------------------------------------------------------------------------
#*  mlabru   2010/AGO/29  versão 1.0 started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    2010/AGO/29  versão inicial
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ Python library
#/ ------------------------------------------------------------------------------------------------
import os
import sys

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ PyQt
#/ ------------------------------------------------------------------------------------------------
from PyQt4 import QtCore, QtGui

#** -----------------------------------------------------------------------------------------------
#*  defines
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  wizardModel::wizardModel
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/
class wizardModel ( QtGui.QDialog ):

    #** -------------------------------------------------------------------------------------------
    #*  wizardModel::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the main menu
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_parent - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_parent=None ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        l_szMetodo = "wizardModel::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  init super class
        #*/
        QtGui.QDialog.__init__ ( self, f_parent )

        #** ---------------------------------------------------------------------------------------
        #*  tem uma janela superior ?
        #*/
        if ( f_parent is not None ):

            #** -----------------------------------------------------------------------------------
            #*  salva a parent window localmente
            #*/
            self._wndParent = f_parent

            #** -----------------------------------------------------------------------------------
            #*  esconde a parent window
            #*/
            self._wndParent.setVisible ( False )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._aoHistory = []

        #** ---------------------------------------------------------------------------------------
        #*/
        self._btnCncl = QtGui.QPushButton ( self.tr ( "&Cancela" ))
        self._btnBack = QtGui.QPushButton ( self.tr ( "< &Volta" ))
        self._btnNext = QtGui.QPushButton ( self.tr ( u"&Próxima >" ))
        self._btnTerm = QtGui.QPushButton ( self.tr ( u"&Ativa Simulação" ))

        #** ---------------------------------------------------------------------------------------
        #*/
        self.connect ( self._btnCncl, QtCore.SIGNAL ( "clicked()" ), self.reject )
        self.connect ( self._btnBack, QtCore.SIGNAL ( "clicked()" ), self.btnBackClicked )
        self.connect ( self._btnNext, QtCore.SIGNAL ( "clicked()" ), self.btnNextClicked )
        self.connect ( self._btnTerm, QtCore.SIGNAL ( "clicked()" ), self.accept )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_hblButton = QtGui.QHBoxLayout ()
        #assert ( l_hblButton is not None )

        l_hblButton.addStretch ( 1 )

        l_hblButton.addWidget ( self._btnCncl )
        l_hblButton.addWidget ( self._btnBack )
        l_hblButton.addWidget ( self._btnNext )
        l_hblButton.addWidget ( self._btnTerm )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._vblMain = QtGui.QVBoxLayout ()
        #assert ( self._vblMain is not None )

        self._vblMain.addLayout ( l_hblButton )

        self.setLayout ( self._vblMain )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  wizardModel::accept
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def accept ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        l_szMetodo = "wizardModel::accept"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/

        #** ---------------------------------------------------------------------------------------
        #*  prossegue via "accept" default
        #*/
        QtGui.QDialog.accept ( self )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  wizardModel::btnBackClicked
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def btnBackClicked ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        l_szMetodo = "wizardModel::btnBackClicked"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_pagOld = self._aoHistory.pop ()
        #assert ( l_pagOld )

        l_pagOld.resetPage ()

        #** ---------------------------------------------------------------------------------------
        #*/
        self.switchPage ( l_pagOld )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  wizardModel::btnNextClicked
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def btnNextClicked ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        l_szMetodo = "wizardModel::btnNextClicked"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_pagOld = self._aoHistory [ -1 ]
        #assert ( l_pagOld )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_pagNew = l_pagOld.nextPage ()
        #assert ( l_pagNew )

        l_pagNew.resetPage ()

        #** ---------------------------------------------------------------------------------------
        #*/
        self._aoHistory.append ( l_pagNew )

        #** ---------------------------------------------------------------------------------------
        #*/
        self.switchPage ( l_pagOld )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  wizardModel::completeStateChanged
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def completeStateChanged ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        l_szMetodo = "wizardModel::completeStateChanged"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_pagAtu = self._aoHistory [ -1 ]
        #assert ( l_pagAtu )

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( l_pagAtu.isLastPage ()):

            #** -----------------------------------------------------------------------------------
            #*/
            self._btnTerm.setEnabled ( l_pagAtu.isComplete ())

        #** ---------------------------------------------------------------------------------------
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*/
            self._btnNext.setEnabled ( l_pagAtu.isComplete ())

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  wizardModel::historyPages
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def historyPages ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        l_szMetodo = "wizardModel::historyPages"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._aoHistory )

    #** -------------------------------------------------------------------------------------------
    #*  wizardModel::setFirstPage
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_pag - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setFirstPage ( self, f_pag ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        l_szMetodo = "wizardModel::setFirstPage"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        f_pag.resetPage ()

        #** ---------------------------------------------------------------------------------------
        #*/
        self._aoHistory.append ( f_pag )

        #** ---------------------------------------------------------------------------------------
        #*/
        self.switchPage ( None )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  wizardModel::switchPage
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_pagOld - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def switchPage ( self, f_pagOld ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        l_szMetodo = "wizardModel::switchPage"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( f_pagOld is not None ):

            #** -----------------------------------------------------------------------------------
            #*/
            f_pagOld.hide ()

            #** -----------------------------------------------------------------------------------
            #*/
            self._vblMain.removeWidget ( f_pagOld )

            #** -----------------------------------------------------------------------------------
            #*/
            self.disconnect ( f_pagOld, QtCore.SIGNAL ( "completeStateChanged())" ), self.completeStateChanged )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_pagNew = self._aoHistory [ -1 ]
        #assert ( l_pagNew )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._vblMain.insertWidget ( 0, l_pagNew )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_pagNew.show ()
        l_pagNew.setFocus ()

        #** ---------------------------------------------------------------------------------------
        #*/
        self.connect ( l_pagNew, QtCore.SIGNAL ( "completeStateChanged()" ), self.completeStateChanged )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._btnBack.setEnabled ( len ( self._aoHistory ) != 1 )

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( l_pagNew.isLastPage ()):

            #** -----------------------------------------------------------------------------------
            #*/
            self._btnNext.setEnabled ( False )
            self._btnTerm.setDefault ( True )

        #** ---------------------------------------------------------------------------------------
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*/
            self._btnNext.setDefault ( True )
            self._btnTerm.setEnabled ( False )

        #** ---------------------------------------------------------------------------------------
        #*/
        self.completeStateChanged ()

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "wizardModel" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** -----------------------------------------------------------------------------------------------
#*  this is the bootstrap process
#*/
if ( '__main__' == __name__ ):

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    logging.basicConfig ()

    #** -------------------------------------------------------------------------------------------
    #*
    l_wm = wizardModel ()
    #assert ( l_wm )

#** ----------------------------------------------------------------------------------------------- *#
