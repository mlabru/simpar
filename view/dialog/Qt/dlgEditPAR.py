#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2010, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiPAR
#*  Classe...: dlgEditPAR
#*
#*  Descrição: this class takes care of all interaction with the user
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração
#*  -----------------------------------------------------------------------------------------------
#*  well     1997/fev/12  version started
#*  mlabru   2009/set/01  version started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    1997/fev/12  version started
#*  3.01-01  2009/set/01  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ Python library
#/ ------------------------------------------------------------------------------------------------
import sys

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ PyQt library
#/ ------------------------------------------------------------------------------------------------
from PyQt4 import QtCore, QtGui

#/ SiPAR / model
#/ ------------------------------------------------------------------------------------------------
import model.clsPAR as clsPAR

#/ SiPAR / view
#/ ------------------------------------------------------------------------------------------------
import view.dialog.Qt.dlgEditPAR_ui as dlgEditPAR_ui

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  SiPAR::dlgEditPAR
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/
class dlgEditPAR ( QtGui.QDialog, dlgEditPAR_ui.Ui_dlgEditPAR ):

    #** -------------------------------------------------------------------------------------------
    #*  dlgEditPAR::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the main menu
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_oSitPAR - DOCUMENT ME!
    #*  @param  f_oPAR    - DOCUMENT ME!
    #*  @param  f_Parent  - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_oSitPAR=None, f_oPAR=None, f_Parent=None ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        l_szMetodo = "dlgEditPAR::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  init super class
        #*/
        super ( dlgEditPAR, self ).__init__ ( f_Parent )

        #** ---------------------------------------------------------------------------------------
        #*  monta a dialog
        #*/
        self.setupUi ( self )

        #** ---------------------------------------------------------------------------------------
        #*  salva os parâmetros localmente
        #*/
        self._oSitPAR = f_oSitPAR
        self._oPAR = f_oPAR

        #** ---------------------------------------------------------------------------------------
        #*  PAR existe ?
        #*/
        if ( None != f_oPAR ):

            #** -----------------------------------------------------------------------------------
            #*/
            self.qleKey.setText ( f_oPAR._szKey )
            self.qleDescr.setText ( f_oPAR._szDescr )

            #** -----------------------------------------------------------------------------------
            #*/
            self.qsbCab.setValue ( f_oPAR._iCab0 )

            self.qsbHAnt0.setValue ( f_oPAR._fHAnt0 )
            self.qsbHAnt1.setValue ( f_oPAR._fHAnt1 )

            self.qsbDstAntEixo.setValue ( f_oPAR._fDstAntEixo )
            self.qsbDstAntPT0.setValue ( f_oPAR._fDstAntPT0 )
            self.qsbDstAntPT1.setValue ( f_oPAR._fDstAntPT1 )

            self.qsbAngRampa.setValue ( f_oPAR._fAngRampa )
            self.qsbRetardo.setValue ( f_oPAR._aiRetardo [ 0 ] )
            self.qsbDecl.setValue ( f_oPAR._iDecl )

            #** -----------------------------------------------------------------------------------
            #*/
            self.buttonBox.button ( QtGui.QDialogButtonBox.Ok ).setText ( "&Aceita" )
            self.buttonBox.button ( QtGui.QDialogButtonBox.Ok ).setFocus ()

            #** -----------------------------------------------------------------------------------
            #*/
            self.setWindowTitle ( u"SiPAR - Edição de Sítios PAR" )

        #** ---------------------------------------------------------------------------------------
        #*  senão, posiciona cursor no início do formulário
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*/
            self.qleKey.setFocus ()

        #** ---------------------------------------------------------------------------------------
        #*/
        self.on_qleKey_textEdited ( QtCore.QString ())

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  dlgEditPAR::accept
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def accept ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        l_szMetodo = "dlgEditPAR::accept"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  obtem os dados do sítio PAR
        #*/
        l_szKey = self.qleKey.text ().toUpper ()
        l_szDescr = self.qleDescr.text ().toUpper ()

        #** ---------------------------------------------------------------------------------------
        #*  obtem os valores de performance do sítio PAR
        #*/
        l_iCab = int ( self.qsbCab.value ())

        l_fHAnt0 = float ( self.qsbHAnt0.value ())
        l_fHAnt1 = float ( self.qsbHAnt1.value ())

        l_fDstAntEixo = float ( self.qsbDstAntEixo.value ())
        l_fDstAntPT0  = float ( self.qsbDstAntPT0.value ())
        l_fDstAntPT1  = float ( self.qsbDstAntPT1.value ())

        l_fAngRampa = float ( self.qsbAngRampa.value ())
        l_iRetardo  = int ( self.qsbRetardo.value ())
        l_iDecl     = int ( self.qsbDecl.value ())

        #** ---------------------------------------------------------------------------------------
        #*  PAR inexistente ?
        #*/
        if ( None == self._oPAR ):

            #** -----------------------------------------------------------------------------------
            #*  cria um novo sítio PAR
            #*/
            self._oPAR = clsPAR.clsPAR ( [ l_szKey, l_szDescr, l_iCab, l_fHAnt0, l_fHAnt1,
                                           l_fDstAntEixo, l_fDstAntPT0, l_fDstAntPT1,
                                           l_fAngRampa, l_iRetardo, l_iDecl ] )
            #assert ( self._oPAR )

            #** -----------------------------------------------------------------------------------
            #*  cria uma nova entrada na tabela de sítios PAR com o PAR criado
            #*/
            self._oSitPAR.add ( self._oPAR, l_szKey )

        #** ---------------------------------------------------------------------------------------
        #*  se existe, atualiza a informação
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*  atualiza os dados do sítio PAR
            #*/
            self._oSitPAR.updateTabela ( self._oPAR, [ l_szKey, l_szDescr, l_iCab, l_fHAnt0,
                                                       l_fHAnt1, l_fDstAntEixo, l_fDstAntPT0,
                                                       l_fDstAntPT1, l_fAngRampa, l_iRetardo,
                                                       l_iDecl ] )

        #** ---------------------------------------------------------------------------------------
        #*  faz o "accept"
        #*/
        QtGui.QDialog.accept ( self )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  dlgEditPAR::on_qleKey_textEdited
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_szTxt - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    @QtCore.pyqtSignature("QString")
    def on_qleKey_textEdited ( self, f_szTxt ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        l_szMetodo = "dlgEditPAR::on_qleKey_textEdited"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        self.buttonBox.button ( QtGui.QDialogButtonBox.Ok ).setEnabled ( not self.qleKey.text ().isEmpty ())

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*  defines
#*  -----------------------------------------------------------------------------------------------
#*/
if ( "__main__" == __name__ ):

    #** -------------------------------------------------------------------------------------------
    #*/
    l_App = QtGui.QApplication ( sys.argv )
    #assert ( l_App )

    #** -------------------------------------------------------------------------------------------
    #*/
    l_Dlg = dlgEditPAR ( 0 )
    #assert ( None != l_Dlg )

    #** -------------------------------------------------------------------------------------------
    #*/
    l_Dlg.show ()

    #** -------------------------------------------------------------------------------------------
    #*/
    l_App.exec_ ()

#** ----------------------------------------------------------------------------------------------- *#
