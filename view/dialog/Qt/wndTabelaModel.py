# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2010, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: pyACME
#*  Classe...: wndTabelaModel
#*
#*  Descrição: this class takes care of all interaction with the user
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração
#*  -----------------------------------------------------------------------------------------------
#*  mlabru   2009/set/01  version started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    1997/jun/20  version started
#*  3.01-01  2009/set/01  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/
from __future__ import unicode_literals

#/ Python library
#/ ------------------------------------------------------------------------------------------------
import platform
import sys

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ PyQt library
#/ ------------------------------------------------------------------------------------------------
from PyQt4 import QtCore, QtGui

#/ pyACME / model
#/ ------------------------------------------------------------------------------------------------
import model.clsExe as clsExe
import model.clsTabelaAnv as clsTabelaAnv
import model.locData as locData
import model.qrcResources as qrcResources

#/ pyACME / view
#/ ------------------------------------------------------------------------------------------------
import view.dialog.Qt.dlgEditAnv as dlgEditAnv

#** -----------------------------------------------------------------------------------------------
#*  defines
#*  -----------------------------------------------------------------------------------------------
#*/
__version__ = "3.0.1"

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  wndTabelaModel::wndTabelaModel
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/
class wndTabelaModel ( QtGui.QMainWindow ):

    #** -------------------------------------------------------------------------------------------
    #*  wndTabelaModel::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the main menu
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_parent - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_oTab, f_parent=None ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "wndTabelaModel::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  init super class
        #*/
        super ( wndTabelaModel, self ).__init__ ( f_parent )

        #** ---------------------------------------------------------------------------------------
        #*  salva o pointer para a tabela localmente
        #*/
        self._oTab = f_oTab

        #** ---------------------------------------------------------------------------------------
        #*  salva a parent window localmente
        #*/
        self._wndParent = f_parent

        #** ---------------------------------------------------------------------------------------
        #*  esconde a parent window
        #*/
        self._wndParent.setVisible ( False )

        #** ---------------------------------------------------------------------------------------
        #*  cria a GUI
        #*/
        self.__makeGUI ()

        #** ---------------------------------------------------------------------------------------
        #*  carrega a tabela de aeronaves
        #*/
        QtCore.QTimer.singleShot ( 0, self.loadInitialFile )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  wndTabelaModel::__makeGUI
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the main menu
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __makeGUI ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "wndTabelaModel::__makeGUI"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  cria a table widget
        #*/
        self._qtw = QtGui.QTableWidget ()
        #assert ( self._qtw )

        self.setCentralWidget ( self._qtw )

        #** ---------------------------------------------------------------------------------------
        #*  cria a status bar
        #*/
        l_stb = self.statusBar ()
        #assert ( l_stb )

        l_stb.setSizeGripEnabled ( False )
        l_stb.showMessage ( "Pronto...", 5000 )

        #** ---------------------------------------------------------------------------------------
        #*  opção File/New
        #*/
        l_actFileNew = self.createAction ( "&Nova...", self.fileNew, QtGui.QKeySequence.New,
                                           "filenew",
                                           "Cria uma nova tabela" )

        #** ---------------------------------------------------------------------------------------
        #*  opção File/Open
        #*/
        l_actFileOpen = self.createAction ( "&Abrir...", self.fileOpen, QtGui.QKeySequence.Open,
                                            "fileopen",
                                            "Abre uma tabela existente")

        #** ---------------------------------------------------------------------------------------
        #*  opção File/Save
        #*/
        l_actFileSave = self.createAction ( "&Salvar", self.fileSave, QtGui.QKeySequence.Save,
                                            "filesave",
                                            "Salva a tabela" )

        #** ---------------------------------------------------------------------------------------
        #*  opção File/Save As
        #*/
        l_actFileSaveAs = self.createAction ( "Salvar &Como...", self.fileSaveAs,
                                              f_icon="filesaveas",
                                              f_tip="Salva a tabela com outro nome" )

        #** ---------------------------------------------------------------------------------------
        #*  opção File/Export XML
        #*/
        l_actFileExportXML = self.createAction ( "E&xportar como XML...", self.fileExportXML,
                                                 f_tip="Exporta a tabela como um arquivo XML" )

        #** ---------------------------------------------------------------------------------------
        #*  opção File/Quit
        #*/
        l_actFileQuit = self.createAction ( "Sai&r", self.fileClose, "Ctrl+R",
                                            "filequit",
                                            u"Termina a aplicação" )

        #** ---------------------------------------------------------------------------------------
        #*  opção Edit/Add
        #*/
        l_actEditAdd = self.createAction ( "I&nclui...", self.editAdd, "Ctrl+N",
                                           "editadd",
                                           "Inclui" )

        #** ---------------------------------------------------------------------------------------
        #*  opção Edit/Edit
        #*/
        l_actEditEdit = self.createAction ( "&Edita...", self.editEdit, "Ctrl+E",
                                            "editedit",
                                            "Edita os dados" )

        #** ---------------------------------------------------------------------------------------
        #*  opção Edit/Remove
        #*/
        l_actEditRemove = self.createAction ( "Remove...", self.editRemove, "Del",
                                              "editdelete",
                                              "Remove os dados" )

        #** ---------------------------------------------------------------------------------------
        #*  opção Help/About
        #*/
        l_actHelpAbout = self.createAction ( "S&obre", self.helpAbout,
                                             f_tip=u"Sobre a aplicação" )

        #** ---------------------------------------------------------------------------------------
        #*  menu File
        #*/
        l_mnuFile = self.menuBar ().addMenu ( "&Arquivo" )
        #assert ( l_mnuFile )

        #** ---------------------------------------------------------------------------------------
        #*/
        self.addActions ( l_mnuFile, ( l_actFileNew, l_actFileOpen,
                                       l_actFileSave, l_actFileSaveAs, None,
                                       l_actFileExportXML, None,
                                       l_actFileQuit ))

        #** ---------------------------------------------------------------------------------------
        #*  menu Edit
        #*/
        l_mnuEdit = self.menuBar ().addMenu ( u"&Edição" )
        #assert ( l_mnuEdit )

        #** ---------------------------------------------------------------------------------------
        #*/
        self.addActions ( l_mnuEdit, ( l_actEditAdd, l_actEditEdit, l_actEditRemove ))

        #** ---------------------------------------------------------------------------------------
        #*  menu Help
        #*/
        l_mnuHelp = self.menuBar ().addMenu ( "Aj&uda" )
        #assert ( l_mnuHelp )

        #** ---------------------------------------------------------------------------------------
        #*/
        self.addActions ( l_mnuHelp, ( l_actHelpAbout, ))

        #** ---------------------------------------------------------------------------------------
        #*  toolbar File
        #*/
        l_tlbFile = self.addToolBar ( "Arquivo" )
        #assert ( l_tlbFile )

        l_tlbFile.setObjectName ( "FileToolBar" )

        #** ---------------------------------------------------------------------------------------
        #*/
        self.addActions ( l_tlbFile, ( l_actFileNew, l_actFileOpen, l_actFileSaveAs ))

        #** ---------------------------------------------------------------------------------------
        #*  toolbar Edit
        #*/
        l_tlbEdit = self.addToolBar ( "Edita" )
        #assert ( l_tlbEdit )

        l_tlbEdit.setObjectName ( "EditToolBar" )

        #** ---------------------------------------------------------------------------------------
        #*/
        self.addActions ( l_tlbEdit, ( l_actEditAdd, l_actEditEdit, l_actEditRemove ))

        #** ---------------------------------------------------------------------------------------
        #*  conecta duplo click a edição da linha
        #*/
        self.connect ( self._qtw,
                       QtCore.SIGNAL ( "itemDoubleClicked(QTableWidgetItem*)" ),
                       self.editEdit )

        #** ---------------------------------------------------------------------------------------
        #*/
        QtGui.QShortcut ( QtGui.QKeySequence ( "Return" ), self._qtw, self.editEdit )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  wndTabelaModel::addActions
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_target  - DOCUMENT ME!
    #*  @param  f_actions - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def addActions ( self, f_target, f_actions ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "wndTabelaModel::addActions"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        for l_action in f_actions:

            #** -----------------------------------------------------------------------------------
            #*/
            if ( None == l_action ):

                #** -------------------------------------------------------------------------------
                #*/
                f_target.addSeparator ()

            #** -----------------------------------------------------------------------------------
            #*/
            else:

                #** -------------------------------------------------------------------------------
                #*/
                f_target.addAction ( l_action )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  wndTabelaModel::closeEvent
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_parent - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def closeEvent ( self, event ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "wndTabelaModel::closeEvent"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  ok para continuar ?
        #*/
        if ( self.okToContinue ()):

            #** -----------------------------------------------------------------------------------
            #*  obtém os settings
            #*/
            l_set = QtCore.QSettings ()
            #assert ( l_set )

            #** -----------------------------------------------------------------------------------
            #*  salva último arquivo utilizado
            #*/
            l_set.setValue ( "%s/LastFile" % ( self._txtSettings ),
                             QtCore.QVariant ( self._oTab.getFilename ()))

            #** -----------------------------------------------------------------------------------
            #*  salva geometria da janela
            #*/
            l_set.setValue ( "%s/Geometry" % ( self._txtSettings ),
                             QtCore.QVariant ( self.saveGeometry ()))

            #** -----------------------------------------------------------------------------------
            #*  salva estado da janela
            #*/
            l_set.setValue ( "%s/State" % ( self._txtSettings ),
                             QtCore.QVariant ( self.saveState ()))

            #** -----------------------------------------------------------------------------------
            #*  exibe a parent window
            #*/
            self._wndParent.setVisible ( True )

        #** ---------------------------------------------------------------------------------------
        #*  senão, ignora o request
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*  ignora o evento
            #*/
            event.ignore ()

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  wndTabelaModel::createAction
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_text      - DOCUMENT ME!
    #*  @param  f_slot      - DOCUMENT ME!
    #*  @param  f_shortcut  - DOCUMENT ME!
    #*  @param  f_icon      - DOCUMENT ME!
    #*  @param  f_tip       - DOCUMENT ME!
    #*  @param  f_checkable - DOCUMENT ME!
    #*  @param  f_signal    - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def createAction ( self, f_text, f_slot=None, f_shortcut=None, f_icon=None, f_tip=None,
                             f_checkable=False, f_signal="triggered()" ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "wndTabelaModel::createAction"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  cria a action
        #*/
        l_act = QtGui.QAction ( f_text, self )
        #assert ( l_act )

        #** ---------------------------------------------------------------------------------------
        #*  recebeu um ícone ?
        #*/
        if ( None != f_icon ):

            #** -----------------------------------------------------------------------------------
            #*  configura o ícone
            #*/
            l_act.setIcon ( QtGui.QIcon ( ":/{0}.png".format ( f_icon )))

        #** ---------------------------------------------------------------------------------------
        #*  recebeu um atalho ?
        #*/
        if ( None != f_shortcut ):

            #** -----------------------------------------------------------------------------------
            #*  configura o atalho
            #*/
            l_act.setShortcut ( f_shortcut )

        #** ---------------------------------------------------------------------------------------
        #*  recebeu uma dica ?
        #*/
        if ( None != f_tip ):

            #** -----------------------------------------------------------------------------------
            #*  configura a dica
            #*/
            l_act.setToolTip ( f_tip )
            l_act.setStatusTip ( f_tip )

        #** ---------------------------------------------------------------------------------------
        #*  recebeu um slot ?
        #*/
        if ( None != f_slot ):

            #** -----------------------------------------------------------------------------------
            #*  configura a conexão do slot
            #*/
            self.connect ( l_act, QtCore.SIGNAL ( f_signal ), f_slot )

        #** ---------------------------------------------------------------------------------------
        #*  recebeu uma opção de ativação ?
        #*/
        if ( f_checkable ):

            #** -----------------------------------------------------------------------------------
            #*  configura a opção de ativação
            #*/
            l_act.setCheckable ( True )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  retorna a action
        #*/
        return ( l_act )

    #** -------------------------------------------------------------------------------------------
    #*  wndTabelaModel::editAdd
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_parent - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def editAdd ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "wndTabelaModel::editAdd"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  cria a dialog de edição de aeronaves
        #*/
        l_Dlg = dlgEditItem.dlgEditItem ( self._oTab, None, self)
        #assert ( l_Dlg )

        #** ---------------------------------------------------------------------------------------
        #*  processa a dialog de edição da aeronave (modal)
        #*/
        if ( l_Dlg.exec_ ()):

            #** -----------------------------------------------------------------------------------
            #*  atualiza a tabela de aeronaves
            #*/
            self.updateTable ( id ( l_Dlg._oAnv ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  wndTabelaModel::editEdit
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_parent - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def editEdit ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "wndTabelaModel::editEdit"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  obtém a linha atual
        #*/
        l_item = self.getCurrentLine ()

        if ( l_item is not None ):

            #** -----------------------------------------------------------------------------------
            #*/
            l_Dlg = dlgEditItem.dlgEditItem ( self._oTab, l_item, self )
            #assert ( l_Dlg )

            #** -----------------------------------------------------------------------------------
            #*/
            if ( l_Dlg.exec_ ()):

                #** -------------------------------------------------------------------------------
                #*/
                self.updateTable ( id ( l_item ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  wndTabelaModel::editRemove
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_parent - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def editRemove ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "wndTabelaModel::editRemove"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  obtém o item atual
        #*/
        l_oItem = self.getCurrentLine ()

        if ( l_oItem is not None ):

            #** -----------------------------------------------------------------------------------
            #*  apaga a linha atual ?
            #*/
            l_RC = QtGui.QMessageBox.question ( self,
                                                self._txtRemoveTit,
                                                self._txtRemoveMsg.format ( l_oItem._szKey ),
                                                QtGui.QMessageBox.Yes | QtGui.QMessageBox.No )

            #** -----------------------------------------------------------------------------------
            #*  apaga a linha atual ?
            #*/
            if ( QtGui.QMessageBox.Yes == l_RC ):

                #** -------------------------------------------------------------------------------
                #*  apaga a aeronave
                #*/
                self._oTab.delete ( l_oItem, l_oItem._szKey )

                #** -------------------------------------------------------------------------------
                #*  remove a linha da tabela
                #*/
                self._qtw.removeRow ( self._qtw.currentRow ())

                #** -------------------------------------------------------------------------------
                #*  atualiza a tabela
                #*/
                self.updateTable ()

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  wndTabelaModel::fileClose
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_parent - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def fileClose ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "wndTabelaModel::fileClose"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        self.close ()

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  wndTabelaModel::fileNew
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def fileNew ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "wndTabelaModel::fileNew"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  ok para continuar ?
        #*/
        if ( self.okToContinue ()):

            #** -----------------------------------------------------------------------------------
            #*  limpa a tabela
            #*/
            self._oTab.clear ()

            #** -----------------------------------------------------------------------------------
            #*  limpa a area de mensagens
            #*/
            self.statusBar ().clearMessage ()

            #** -----------------------------------------------------------------------------------
            #*  atualiza a tabela
            #*/
            self.updateTable ()

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  wndTabelaModel::fileOpen
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def fileOpen ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "wndTabelaModel::fileOpen"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  não existe pendências ?
        #*/
        if ( self.okToContinue ()):

            #** -----------------------------------------------------------------------------------
            #*  o filename está vazio ?
            #*/
            if ( self._oTab.getFilename ().isEmpty ()):

                #** -------------------------------------------------------------------------------
                #*  usa o path padrão
                #*/
                l_szPath = "./data"

            #** -----------------------------------------------------------------------------------
            #*  senão, existe um filename
            #*/
            else:

                #** -------------------------------------------------------------------------------
                #*  obtém o path do filename existente
                #*/
                l_szPath = QtCore.QFileInfo ( self._oTab.getFilename ()).path ()

            #** -----------------------------------------------------------------------------------
            #*  obtém o filename do usuário
            #*/
            l_szFName = QtGui.QFileDialog.getOpenFileName ( self,
                                                            self._txtOpenTit,
                                                            l_szPath,
                                                            self._txtOpenMsg.format ( self._oTab.formats ()))

            #** -----------------------------------------------------------------------------------
            #*  existe um filename ?
            #*/
            if ( not l_szFName.isEmpty ()):

                #** -------------------------------------------------------------------------------
                #*  tenta carregar a tabela
                #*/
                l_bOk, l_szMsg = self._oTab.load ( l_szFName )

                #** -------------------------------------------------------------------------------
                #*  atualiza a status bar
                #*/
                self.statusBar ().showMessage ( l_szMsg, 5000 )

                #** -------------------------------------------------------------------------------
                #*  atualiza a table widget
                #*/
                self.updateTable ()

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  wndTabelaModel::fileSave
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_parent - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def fileSave ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "wndTabelaModel::fileSave"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  o filename está vazio ?
        #*/
        if ( self._oTab.getFilename ().isEmpty ()):

            #** -----------------------------------------------------------------------------------
            #*  obtém um filename e salva
            #*/
            l_bOk = self.fileSaveAs ()

        #** ---------------------------------------------------------------------------------------
        #*  senão, existe um filename
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*  tenta salvar a tabela
            #*/
            l_bOk, l_szMsg = self._oTab.save ()

            #** -----------------------------------------------------------------------------------
            #*  atualiza a status bar
            #*/
            self.statusBar ().showMessage ( l_szMsg, 5000 )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( l_bOk )

    #** -------------------------------------------------------------------------------------------
    #*  wndTabelaModel::fileSaveAs
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_parent - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def fileSaveAs ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "wndTabelaModel::fileSaveAs"

        #/ flag Ok
        #/ ----------------------------------------------------------------------------------------
        l_bOk = False


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  o filename está vazio ?
        #*/
        if ( self._oTab.getFilename ().isEmpty ()):

            #** -----------------------------------------------------------------------------------
            #*  usa o path padrão
            #*/
            l_szFName = "./data"

        #** ---------------------------------------------------------------------------------------
        #*  senão, existe um filename
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*  obtém o filename existente
            #*/
            l_szFName = self._oTab.getFilename ()

        #** ---------------------------------------------------------------------------------------
        #*  obtém o filename do da tabela a salvar do usuário
        #*/
        l_szFName = QtGui.QFileDialog.getSaveFileName ( self,
                                                        self._txtSaveAsTit,
                                                        l_szFName,
                                                        self._txtSaveAsMsg.format ( self._oTab.formats ()))

        #** ---------------------------------------------------------------------------------------
        #*  existe um filename ?
        #*/
        if ( not l_szFName.isEmpty ()):

            #** -----------------------------------------------------------------------------------
            #*  filename sem extensão ?
            #*/
            if ( not l_szFName.contains ( "." )):

                #** -------------------------------------------------------------------------------
                #*  acrescenta a extensão padrão
                #*/
                l_szFName += ".DAT"

            #** -----------------------------------------------------------------------------------
            #*  tenta salvar a tabela com o filename fornecido 
            #*/
            l_bOk, l_szMsg = self._oTab.save ( l_szFName )

            #** -----------------------------------------------------------------------------------
            #*  atualiza a status bar
            #*/
            self.statusBar ().showMessage ( l_szMsg, 5000 )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( l_bOk )

    #** -------------------------------------------------------------------------------------------
    #*  wndTabelaModel::fileExportXML
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_parent - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def fileExportXML ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "wndTabelaModel::fileExportXML"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  obtém o filename atual
        #*/
        l_szFName = self._oTab.getFilename ()

        #** ---------------------------------------------------------------------------------------
        #*  filename está vazio ?
        #*/
        if ( l_szFName.isEmpty ()):

            #** -----------------------------------------------------------------------------------
            #*  usa um filename padrão 
            #*/
            l_szFName = "./data"

        #** ---------------------------------------------------------------------------------------
        #*  senão, filename não está vazio
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*  ponto de início da extensão do arquivo
            #*/
            l_iI = l_szFName.lastIndexOf ( "." )

            #** -----------------------------------------------------------------------------------
            #*  existe um extensão no nome do arquivo ?
            #*/
            if ( l_iI > 0 ):

                #** -------------------------------------------------------------------------------
                #*  obtém o segmento até o ponto de extensão
                #*/
                l_szFName = l_szFName.left ( l_iI )

            #** -----------------------------------------------------------------------------------
            #*  acrescenta uma extensão padrão
            #*/
            l_szFName += ".XML"

        #** ---------------------------------------------------------------------------------------
        #*  confirma com o usuário o name como salvar o arquivo
        #*/
        l_szFName = QtGui.QFileDialog.getSaveFileName ( self, self._txtExportTit,
                                                              l_szFName, self._txtExportMsg )

        #** ---------------------------------------------------------------------------------------
        #*  existe um filename ?
        #*/
        if ( not l_szFName.isEmpty ()):

            #** -----------------------------------------------------------------------------------
            #*  o filename não tem uma extensão ?
            #*/
            if ( not l_szFName.contains ( "." )):

                #** -------------------------------------------------------------------------------
                #*  acrescenta uma extensão padrão
                #*/
                l_szFName += ".XML"

            #** -----------------------------------------------------------------------------------
            #*  tenta exportar a tabela
            #*/
            l_bOk, l_szMsg = self._oTab.exportXML ( l_szFName )

            #** -----------------------------------------------------------------------------------
            #*  atualiza a status bar
            #*/
            self.statusBar ().showMessage ( l_szMsg, 5000 )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  wndTabelaModel::getCurrentLine
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getCurrentLine ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "wndTabelaModel::getCurrentLine"

        #/ a linha selecionada
        #/ ----------------------------------------------------------------------------------------
        l_oLine = None


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  obtém o número da linha selecionada da tabela
        #*/
        l_iRow = self._qtw.currentRow ()
        #l_log.debug ( "l_iRow: " + str ( l_iRow ))

        #** ---------------------------------------------------------------------------------------
        #*  existe uma linha selecionada ?
        #*/
        if ( l_iRow > -1 ):

            #** -----------------------------------------------------------------------------------
            #*  obtém a linha selecionada da tabela
            #*/
            l_oItem = self._qtw.item ( l_iRow, 0 )
            #assert ( l_oItem )

            #** -----------------------------------------------------------------------------------
            #*  obtém o id da linha
            #*/
            l_ID = l_oItem.data ( QtCore.Qt.UserRole ).toLongLong () [ 0 ]

            #** -----------------------------------------------------------------------------------
            #*  obtém a linha selecionada da tabela pelo id
            #*/
            l_oLine = self._oTab.itemFromId ( l_ID )
            #assert ( l_oLine )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  retorna a linha selecionada da tabela
        #*/
        return ( l_oLine )

    #** -------------------------------------------------------------------------------------------
    #*  wndTabelaModel::helpAbout
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_parent - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def helpAbout ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "wndTabelaModel::helpAbout"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        QtGui.QMessageBox.about ( self,
                                  self._txtAboutTit,
                                  self._txtAboutMsg.format ( __version__,
                                                             platform.python_version (),
                                                             QtCore.QT_VERSION_STR,
                                                             QtCore.PYQT_VERSION_STR,
                                                             platform.system ()))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  wndTabelaModel::loadTabela
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_parent - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def loadTabela ( self, f_szTableName, f_oTab ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "wndTabelaModel::loadTabela"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** -----------------------------------------------------------------------------------
        #*  acessa as settings do programa
        #*/
        l_set = QtCore.QSettings ()
        #assert ( l_set )

        #** -----------------------------------------------------------------------------------
        #*  recupera o filename da última tabela utilizada
        #*/
        l_szFName = l_set.value ( "%s/LastFile" % ( self._txtSettings )).toString ()
        #l_log.info ( "l_szFName: " + str ( l_szFName ))

        #** -----------------------------------------------------------------------------------
        #*  tabela existe ?
        #*/
        if (( l_szFName ) and ( QtCore.QFile.exists ( l_szFName ))):

            #** -------------------------------------------------------------------------------
            #*  carrega a tabela
            #*/
            l_bOk, l_szMsg = f_oTab.load ( l_szFName )

        #** -----------------------------------------------------------------------------------
        #*  senão, tenta utilizar a tabela padrão
        #*/
        elif ( QtCore.QFile.exists ( f_szTableName )):
                                            
            #** -------------------------------------------------------------------------------
            #*  carrega a tabela
            #*/
            l_bOk, l_szMsg = f_oTab.load ( QtCore.QString ( f_szTableName ))
                                                                                                            
        #** -----------------------------------------------------------------------------------
        #*  senão, é tabela nova
        #*/
        else:
                                                                                                                                                                                                                            
            #** -------------------------------------------------------------------------------
            #*  carrega a tabela
            #*/
            l_szMsg = u"criada nova tabela..."
                                                                                                                                                                                                                                                                                            
        #** -----------------------------------------------------------------------------------
        #*  Pronto...
        #*/
        self.statusBar ().showMessage ( l_szMsg, 5000 )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  wndTabelaModel::okToContinue
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def okToContinue ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "wndTabelaModel::okToContinue"

        #/ resposta
        #/ ----------------------------------------------------------------------------------------
        l_bAns = True


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  flag de alterações setado ?
        #*/
        if ( self._oTab.isDirty ()):

            #** -----------------------------------------------------------------------------------
            #*  questiona sobre alterações pendentes
            #*/
            l_Resp = QtGui.QMessageBox.question ( self, self._txtContinueTit,
                                                        self._txtContinueMsg,
                                                        QtGui.QMessageBox.Yes |
                                                        QtGui.QMessageBox.No |
                                                        QtGui.QMessageBox.Cancel )

            #** -----------------------------------------------------------------------------------
            #*  cancela ?
            #*/
            if ( QtGui.QMessageBox.Cancel == l_Resp ):

                #** -------------------------------------------------------------------------------
                #*  não Ok
                #*/
                l_bAns = False

            #** -----------------------------------------------------------------------------------
            #*  salva ?
            #*/
            elif ( QtGui.QMessageBox.Yes == l_Resp ):

                #** -------------------------------------------------------------------------------
                #*  tenta salvar as pendências
                #*/
                l_bAns = self.fileSave ()

            #** -----------------------------------------------------------------------------------
            #*  não salva ?
            #*/
            else:

                #** -------------------------------------------------------------------------------
                #*  reseta o flag de alterações
                #*/
                self._oTab.setDirty ( False )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  retorna a resposta
        #*/
        return ( l_bAns )

    #** -------------------------------------------------------------------------------------------
    #*  wndTabelaModel::restoreSettings
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def restoreSettings ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "wndTabelaModel::restoreSettings"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  obtém os settings
        #*/
        l_set = QtCore.QSettings ()
        #assert ( l_set )

        #** ---------------------------------------------------------------------------------------
        #*  restaura geometria da janela
        #*/
        self.restoreGeometry ( l_set.value ( "%s/Geometry" % ( self._txtSettings )).toByteArray ())

        #** ---------------------------------------------------------------------------------------
        #*  restaura estado da janela
        #*/
        self.restoreState ( l_set.value ( "%s/State" % ( self._txtSettings )).toByteArray ())

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( True )

#** ----------------------------------------------------------------------------------------------- *#
