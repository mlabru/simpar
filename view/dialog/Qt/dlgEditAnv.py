#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2010, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiPAR
#*  Classe...: dlgEditAnv
#*
#*  Descrição: this class takes care of all interaction with the user
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração
#*  -----------------------------------------------------------------------------------------------
#*  well     1997/fev/12  version started
#*  mlabru   2009/set/01  version started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    1997/fev/12  version started
#*  3.01-01  2009/set/01  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ Python library
#/ ------------------------------------------------------------------------------------------------
import sys

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ PyQt library
#/ ------------------------------------------------------------------------------------------------
from PyQt4 import QtCore, QtGui

#/ SiPAR / model
#/ ------------------------------------------------------------------------------------------------
import model.clsAnv as clsAnv

#/ SiPAR / view
#/ ------------------------------------------------------------------------------------------------
import view.dialog.Qt.dlgEditAnv_ui as dlgEditAnv_ui

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  SiPAR::dlgEditAnv
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/
class dlgEditAnv ( QtGui.QDialog, dlgEditAnv_ui.Ui_dlgEditAnv ):

    #** -------------------------------------------------------------------------------------------
    #*  dlgEditAnv::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the main menu
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_oTabAnv - DOCUMENT ME!
    #*  @param  f_oAnv    - DOCUMENT ME!
    #*  @param  f_Parent  - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_oTabAnv=None, f_oAnv=None, f_Parent=None ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        l_szMetodo = "dlgEditAnv::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  init super class
        #*/
        super ( dlgEditAnv, self ).__init__ ( f_Parent )

        #** ---------------------------------------------------------------------------------------
        #*  monta a dialog
        #*/
        self.setupUi ( self )

        #** ---------------------------------------------------------------------------------------
        #*  salva os parâmetros localmente
        #*/
        self._oTabAnv = f_oTabAnv
        self._oAnv = f_oAnv

        #** ---------------------------------------------------------------------------------------
        #*  aeronave existe ?
        #*/
        if ( None != f_oAnv ):

            #** -----------------------------------------------------------------------------------
            #*/
            self.qleKey.setText ( f_oAnv._szKey )
            self.qleDescr.setText ( f_oAnv._szDescr )

            #** -----------------------------------------------------------------------------------
            #*/
            self.qsbVelApx.setValue ( f_oAnv._fVelApx )
            self.qsbRazMaxSub.setValue ( f_oAnv._fRazMaxSub )
            self.qsbRazMaxDesc.setValue ( f_oAnv._fRazMaxDesc )
            self.qsbRazMaxCurv.setValue ( f_oAnv._fRazMaxCurv )
            self.qsbTetoServ.setValue ( f_oAnv._fTetoServ )

            #** -----------------------------------------------------------------------------------
            #*/
            self.buttonBox.button ( QtGui.QDialogButtonBox.Ok ).setText ( "&Aceita" )
            self.buttonBox.button ( QtGui.QDialogButtonBox.Ok ).setFocus ()

            #** -----------------------------------------------------------------------------------
            #*/
            self.setWindowTitle ( u"SiPAR - Edição de Aeronaves" )

        #** ---------------------------------------------------------------------------------------
        #*  senão, posiciona cursor no início do formulário
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*/
            self.qleKey.setFocus ()

        #** ---------------------------------------------------------------------------------------
        #*/
        self.on_qleKey_textEdited ( QtCore.QString ())

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  dlgEditAnv::accept
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def accept ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        l_szMetodo = "dlgEditAnv::accept"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        #assert ( None != self._oTabAnv )

        #** ---------------------------------------------------------------------------------------
        #*  obtem os dados da aeronave
        #*/
        l_szKey = self.qleKey.text ().toUpper ()
        l_szDescr = self.qleDescr.text ().toUpper ()

        #** ---------------------------------------------------------------------------------------
        #*  obtem os valores de performance da aeronave
        #*/
        l_fVelApx = float ( self.qsbVelApx.value ())
        l_fRazMaxSub = float ( self.qsbRazMaxSub.value ())
        l_fRazMaxDesc = float ( self.qsbRazMaxDesc.value ())
        l_fRazMaxCurv = float ( self.qsbRazMaxCurv.value ())
        l_fTetoServ = float ( self.qsbTetoServ.value ())

        #** ---------------------------------------------------------------------------------------
        #*  aeronave inexistente ?
        #*/
        if ( None == self._oAnv ):

            #** -----------------------------------------------------------------------------------
            #*  cria uma nova aeronave
            #*/
            self._oAnv = clsAnv.clsAnv ( [ l_szKey, l_szDescr, l_fVelApx, l_fRazMaxSub,
                                           l_fRazMaxDesc, l_fRazMaxCurv, l_fTetoServ ] )
            #assert ( self._oAnv )

            #** -----------------------------------------------------------------------------------
            #*  cria uma nova entrada na tabela de aeronaves com a aeronave criada
            #*/
            self._oTabAnv.add ( self._oAnv, l_szKey )

        #** ---------------------------------------------------------------------------------------
        #*  se existe, atualiza a informação
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*  atualiza os dados da aeronave
            #*/
            self._oTabAnv.updateTabela ( self._oAnv, [ l_szKey, l_szDescr, l_fVelApx,
                                                       l_fRazMaxSub, l_fRazMaxDesc,
                                                       l_fRazMaxCurv, l_fTetoServ ] )

        #** ---------------------------------------------------------------------------------------
        #*  faz o "accept"
        #*/
        QtGui.QDialog.accept ( self )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  dlgEditAnv::on_qleKey_textEdited
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_szTxt - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    @QtCore.pyqtSignature("QString")
    def on_qleKey_textEdited ( self, f_szTxt ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        l_szMetodo = "dlgEditAnv::on_qleKey_textEdited"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        self.buttonBox.button ( QtGui.QDialogButtonBox.Ok ).setEnabled ( not self.qleKey.text ().isEmpty ())

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

#** ----------------------------------------------------------------------------------------------- *#
