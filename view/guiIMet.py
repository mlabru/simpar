#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2008, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiPAR
#*  Classe...: guiIMet
#*
#*  Descrição: this class takes care of all interaction with the user
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração
#*  -----------------------------------------------------------------------------------------------
#*  well     1997/fev/12  version started
#*  mlabru   2008/fev/12  version started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    2008/fev/12  version started
#*  1.2-0.1  2008/jun/20  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ pyGame (biblioteca gráfica)
#/ ------------------------------------------------------------------------------------------------
import pygame
import pygame.font

from pygame.locals import *

#/ SiPAR / model
#/ ------------------------------------------------------------------------------------------------
import model.glbDefs as glbDefs
import model.locDefs as locDefs

#/ SiPAR / view
#/ ------------------------------------------------------------------------------------------------
import view.grUtils as grUtils
import view.guiModel as guiModel

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  guiIMet::guiIMet
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/
class guiIMet ( guiModel.guiModel ):

    #** -------------------------------------------------------------------------------------------
    #*  guiIMet::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the met info area
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_srf - surface a desenhar
    #*  @param  f_cm  - control manager
    #*  @param  f_tNW - tupla ponto NW
    #*  @param  f_tWH - tupla largura e altura da caixa
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_cm, f_srf, f_tNW, f_tWH ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiIMet::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_cm )

        #assert ( f_srf )
        #assert ( f_tNW )
        #assert ( f_tWH )

        #** ---------------------------------------------------------------------------------------
        #*  initialize super classe
        #*/
        guiModel.guiModel.__init__ ( self, f_cm, f_srf, f_tNW, f_tWH, u"informacoes meteorológicas" )

        #** ---------------------------------------------------------------------------------------
        #*  obtém o exercício
        #*/
        self._oExe = self._mm.getExercicio ()
        #assert ( self._oExe )

        #** ---------------------------------------------------------------------------------------
        #*  cria a fonte
        #*/
        self._font = pygame.font.Font ( glbDefs.xFNT_MONO, 16 )
        #assert ( self._font )

        #** ---------------------------------------------------------------------------------------
        #*  the positions of the center of the text fields
        #** ---------------------------------------------------------------------------------------
        #*          Teto  5500
        #*  Visibilidade  2000
        #*   Temperatura    20
        #*       Pressão  1012
        #*   Vento (Dir)    10
        #*         (Vel)   101
        #** ---------------------------------------------------------------------------------------
        #*/
        self._lstPos = (( 150,  10 ), ( 220,  10 ),    # Teto
                        ( 150,  28 ), ( 220,  28 ),    # Visibilidade
                        ( 150,  46 ), ( 220,  46 ),    # Temperatura
                        ( 150,  64 ), ( 220,  64 ),    # Pressão
                        ( 150,  82 ), ( 220,  82 ),    # Vento (Dir)
                        ( 150, 100 ), ( 220, 100 ))    # Vento (Vel)

        #** ---------------------------------------------------------------------------------------
        #*  the colors of the fields
        #*/
        self._lstCor = ( locDefs.xCOR_Vers, locDefs.xCOR_IMet,
                         locDefs.xCOR_Vers, locDefs.xCOR_IMet,
                         locDefs.xCOR_Vers, locDefs.xCOR_IMet,
                         locDefs.xCOR_Vers, locDefs.xCOR_IMet,
                         locDefs.xCOR_Vers, locDefs.xCOR_IMet,
                         locDefs.xCOR_Vers, locDefs.xCOR_IMet )

        #** ---------------------------------------------------------------------------------------
        #*  variáveis de instância
        #*/
        self._iVentoDir = None
        self._iVentoVel = None

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  guiIMet::doDraw
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the info area
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def doDraw ( self, f_srf ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiIMet::doDraw"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        #assert ( self._oExe )

        #** ---------------------------------------------------------------------------------------
        #*  obtém a direção e velocidade do vento
        #*/
        l_iVentoDir = int ( round ( self._oExe.getVentoDir ()))
        l_iVentoVel = int ( round ( self._oExe.getVentoVel ()))

        #** ---------------------------------------------------------------------------------------
        #*  algo mudou ?
        #*/
        if (( l_iVentoDir != self._iVentoDir ) or
            ( l_iVentoVel != self._iVentoVel )):

            #** -----------------------------------------------------------------------------------
            #*  verifica condições de execução
            #*/
            #assert ( self._canvas )

            #** -----------------------------------------------------------------------------------
            #*  limpa o canvas
            #*/
            self._canvas.fill ( glbDefs.xCOR_black )

            #** -----------------------------------------------------------------------------------
            #*  desenha o retangulo arredondado
            #*/
            grUtils.drawRect ( self._canvas, ( 0, 0, self._tWH [ 0 ],
                                                     self._tWH [ 1 ] - locDefs.xSCR_HDR_Height ), 2 )

            #** -----------------------------------------------------------------------------------
            #*  get the data
            #*/
            l_lstData = [ "Teto",         15000,
                          "Visibilidade", 5000,
                          "Temperatura",  25,
                          "Pressao",      1020,
                          "Vento (Dir)",  l_iVentoDir,
                          "Vento (Vel)",  l_iVentoVel ]

            #assert ( l_lstData )

            #** -----------------------------------------------------------------------------------
            #*  percorre a lista de dados de informações meteorológicas a exibir
            #*/
            for l_iI in xrange ( len ( l_lstData )):

                #** -------------------------------------------------------------------------------
                #*  cria o texto
                #*/
                l_szTxt = self._font.render ( str ( l_lstData [ l_iI ] ), 1, self._lstCor [ l_iI ] )
                #assert ( l_szTxt )

                #** -------------------------------------------------------------------------------
                #*  calcula a posição do texto
                #*/
                l_txtPos = l_szTxt.get_rect ()
                #assert ( l_txtPos )

                l_txtPos.midright = ( self._lstPos [ l_iI ][ 0 ],
                                      self._lstPos [ l_iI ][ 1 ] )

                #** -------------------------------------------------------------------------------
                #*  transfere o texto para o canvas
                #*/
                self._canvas.blit ( l_szTxt, l_txtPos )

            #** -----------------------------------------------------------------------------------
            #*  transfere o canvas para a superfície recebida
            #*/
            self.drawCanvas ( f_srf )

            #** -----------------------------------------------------------------------------------
            #*  salva os novos valores
            #*/
            self._iVentoDir = l_iVentoDir
            self._iVentoVel = l_iVentoVel

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** ===========================================================================================
    #*  acesso a área de dados do objeto
    #*  ===========================================================================================
    #*/

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "guiIMet" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** ----------------------------------------------------------------------------------------------- *#
