#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2009, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiPAR
#*  Classe...: spritePonteiros
#*
#*  Descrição: this class takes care of all interaction with the user
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração       
#*  -----------------------------------------------------------------------------------------------
#*  well     1997/jun/20  versão 1.0 started
#*  mlabru   2009/set/01  versão 3.0 started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    1997/jun/20  versão inicial (DOS/Modula-2)
#*  3.01-01  2009/set/01  versão para Linux
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ Python library
#/ ------------------------------------------------------------------------------------------------
import math

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ pyGame (biblioteca gráfica)
#/ ------------------------------------------------------------------------------------------------
import pygame
import pygame.font
import pygame.image

from pygame.locals import *

#/ SiPAR / model
#/ ------------------------------------------------------------------------------------------------
import model.glbDefs as glbDefs
import model.locDefs as locDefs

#/ SiPAR / view
#/ ------------------------------------------------------------------------------------------------
import view.guiUtils as guiUtils
import view.viewUtils as viewUtils

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  spritePonteiros::spritePonteiros
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/
class spritePonteiros:

    #** -------------------------------------------------------------------------------------------
    #*  spritePonteiros::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the panel area
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_cm - control manager
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_cm ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "spritePonteiros::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_cm )

        #** ---------------------------------------------------------------------------------------
        #*  salva o control manager localmente
        #*/
        self._cm = f_cm

        #** ---------------------------------------------------------------------------------------
        #*  cria a fonte para a bússola
        #*/
        self._font = pygame.font.Font ( glbDefs.xFNT_None, 20 )
        #assert ( self._font )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iMarksAlt     =  50 + 1
        l_iMarksClimb   = 100 + 1
        l_iMarksHor     = 540 + 1
        l_iMarksIndCurv = 540 + 1
        l_iMarksVeloc   = 600 + 1

        XRangeCor       = 150

        #** ---------------------------------------------------------------------------------------
        #*/
        self._CorAlt1 = [ ( 255, 0, 0 ) for _ in xrange ( XRangeCor ) ]
        self._CorHor  = [ ( 255, 0, 0 ) for _ in xrange ( XRangeCor ) ]

        #** ---------------------------------------------------------------------------------------
        #*/
        self._PointAlt1 = [ [ 0, 0 ] for _ in xrange ( l_iMarksAlt ) ]
        self._PointAlt2 = [ [ 0, 0 ] for _ in xrange ( l_iMarksAlt ) ]
        self._PointAlt3 = [ [ 0, 0 ] for _ in xrange ( l_iMarksAlt ) ]

        #** ---------------------------------------------------------------------------------------
        #*/
        self._PointAv1 = [ [ 0, 0 ] for _ in xrange ( l_iMarksIndCurv ) ]
        self._PointAv2 = [ [ 0, 0 ] for _ in xrange ( l_iMarksIndCurv ) ]
        self._PointAv3 = [ [ 0, 0 ] for _ in xrange ( l_iMarksIndCurv ) ]

        #** ---------------------------------------------------------------------------------------
        #*/
        self._PointClimb = [ [ 0, 0 ] for _ in xrange ( l_iMarksClimb * 2 ) ]
        self._PointHor   = [ [ 0, 0 ] for _ in xrange ( l_iMarksHor ) ]
        self._PointVeloc = [ [ 0, 0 ] for _ in xrange ( l_iMarksVeloc ) ]

        #** ---------------------------------------------------------------------------------------
        #*  cálculo das coordenadas dos instrumentos do painel
        #*/
        self.calculaPontosVeloc ( 106, 120, 75.0 )
        self.calculaPontosClimb ( 532, 360, 56.0 )

        self.calculaPontosAlt1 ( 532, 120, 85.0 )
        self.calculaPontosAlt2 ( 532, 120, 50.0 )
        self.calculaPontosAlt3 ( 532, 120, 70.0 )

        self.calculaPontosIndCurva ( 106, 360, 68.0, 24.0, 8.0 )
        self.calculaPontosHor ( 304, 120, 73.0 )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  spritePonteiros::calculaPontosVeloc
    #*  -------------------------------------------------------------------------------------------
    #*  CALCULA PONTOS VELOCIMETRO
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def calculaPontosVeloc ( self, f_iX0, f_iY0, f_fR ):

        #/ nome do método (logger)
        #/ ---------------------------------------------------------------------------------------
        #l_szMetodo = "spritePonteiros::calculaPontosVeloc"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_fAngle = 0.0

        #** ---------------------------------------------------------------------------------------
        #*/
        for l_iI in xrange ( 60, 200, 2 ):

            #** -----------------------------------------------------------------------------------
            #*/
            l_fDeltaX = f_fR * math.sin ( math.radians ( l_fAngle ))
            l_fDeltaY = f_fR * math.cos ( math.radians ( l_fAngle ))

            #** -----------------------------------------------------------------------------------
            #*/
            self._PointVeloc [ l_iI ][ 0 ] = f_iX0 + int ( round ( l_fDeltaX ))
            self._PointVeloc [ l_iI ][ 1 ] = f_iY0 - int ( round ( l_fDeltaY ))

            #** -----------------------------------------------------------------------------------
            #*/
            l_fAngle += 2.571

        #** ---------------------------------------------------------------------------------------
        #*/
        l_fAngle = 0.0

        #** ---------------------------------------------------------------------------------------
        #*/
        for l_iI in xrange ( 200, 550 + 1, 5 ):

            #** -----------------------------------------------------------------------------------
            #*/
            l_fDeltaX = f_fR * math.sin ( math.radians ( l_fAngle ))
            l_fDeltaY = f_fR * math.cos ( math.radians ( l_fAngle ))

            #** -----------------------------------------------------------------------------------
            #*/
            self._PointVeloc [ l_iI ][ 0 ] = f_iX0 - int ( round ( l_fDeltaX ))
            self._PointVeloc [ l_iI ][ 1 ] = f_iY0 + int ( round ( l_fDeltaY ))

            #** -----------------------------------------------------------------------------------
            #*/
            l_fAngle += 2.571

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  spritePonteiros::calculaPontosClimb
    #*  -------------------------------------------------------------------------------------------
    #*  CALCULA PONTOS CLIMB
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def calculaPontosClimb ( self, f_iX0, f_iY0, f_fR ):

        #/ nome do método (logger)
        #/ ---------------------------------------------------------------------------------------
        #l_szMetodo = "spritePonteiros::calculaPontosClimb"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_fAngle = 0.0

        #** ---------------------------------------------------------------------------------------
        #*/
        for l_iI in xrange ( -100, 100 + 1 ):

            #** -----------------------------------------------------------------------------------
            #*/
            l_fDeltaX = f_fR * math.cos ( math.radians ( l_fAngle ))
            l_fDeltaY = f_fR * math.sin ( math.radians ( l_fAngle ))

            #** -----------------------------------------------------------------------------------
            #*/
            self._PointClimb [ l_iI + 100 ][ 0 ] = ( f_iX0 + int ( round ( l_fDeltaX )))
            self._PointClimb [ l_iI + 100 ][ 1 ] = ( f_iY0 - int ( round ( l_fDeltaY )))

            #** -----------------------------------------------------------------------------------
            #*/
            l_fAngle -= 1.8

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  spritePonteiros::calculaPontosAlt1
    #*  -------------------------------------------------------------------------------------------
    #*  CALCULA PONTOS ALTIMETRO PONTEIRO 1
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def calculaPontosAlt1 ( self, f_iX0, f_iY0, f_fR ):

        #/ nome do método (logger)
        #/ ---------------------------------------------------------------------------------------
        #l_szMetodo = "spritePonteiros::calculaPontosAlt1"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iAngle = 90 + 18

        #** ---------------------------------------------------------------------------------------
        #*/
        for l_iI in xrange ( 19, 0 - 1, -1 ):

            #** -----------------------------------------------------------------------------------
            #*/
            l_fDeltaX = f_fR * math.cos ( math.radians ( float ( l_iAngle - 3 )))
            l_fDeltaY = f_fR * math.sin ( math.radians ( float ( l_iAngle - 3 )))

            #** -----------------------------------------------------------------------------------
            #*/
            self._PointAlt1 [ l_iI ][ 0 ] = f_iX0 + int ( round ( l_fDeltaX ))
            self._PointAlt1 [ l_iI ][ 1 ] = f_iY0 - int ( round ( l_fDeltaY ))

            #** -----------------------------------------------------------------------------------
            #*/
            l_iAngle += 18

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  spritePonteiros::calculaPontosAlt2
    #*  -------------------------------------------------------------------------------------------
    #*  CALCULA PONTOS ALTIMETRO PONTEIRO 2
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def calculaPontosAlt2 ( self, f_iX0, f_iY0, f_fR ):

        #/ nome do método (logger)
        #/ ---------------------------------------------------------------------------------------
        #l_szMetodo = "spritePonteiros::calculaPontosAlt2"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_fAngle = 90.0 + 7.2

        #** ---------------------------------------------------------------------------------------
        #*/
        for l_iI in xrange ( 49, 0 - 1, -1 ):

            #** -----------------------------------------------------------------------------------
            #*/
            l_fDeltaX = f_fR * math.cos ( math.radians ( l_fAngle ))
            l_fDeltaY = f_fR * math.sin ( math.radians ( l_fAngle ))

            #** -----------------------------------------------------------------------------------
            #*/
            self._PointAlt2 [ l_iI ][ 0 ] = f_iX0 + int ( round ( l_fDeltaX ))
            self._PointAlt2 [ l_iI ][ 1 ] = f_iY0 - int ( round ( l_fDeltaY ))

            #** -----------------------------------------------------------------------------------
            #*/
            l_fAngle += 7.2

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  spritePonteiros::calculaPontosAlt3
    #*  -------------------------------------------------------------------------------------------
    #*  CALCULA PONTOS ALTIMETRO PONTEIRO 3
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def calculaPontosAlt3 ( self, f_iX0, f_iY0, f_fR ):

        #/ nome do método (logger)
        #/ ---------------------------------------------------------------------------------------
        #l_szMetodo = "spritePonteiros::calculaPontosAlt3"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_fAngle = 90.0 + 7.2

        #** ---------------------------------------------------------------------------------------
        #*/
        for l_iI in xrange ( 49, 0 - 1, -1 ):

            #** -----------------------------------------------------------------------------------
            #*/
            l_fDeltaX = f_fR * math.cos ( math.radians ( l_fAngle ))
            l_fDeltaY = f_fR * math.sin ( math.radians ( l_fAngle ))

            #** -----------------------------------------------------------------------------------
            #*/
            self._PointAlt3 [ l_iI ][ 0 ] = f_iX0 + int  ( round ( l_fDeltaX ))
            self._PointAlt3 [ l_iI ][ 1 ] = f_iY0 - int  ( round ( l_fDeltaY ))

            #** -----------------------------------------------------------------------------------
            #*/
            l_fAngle += 7.2

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  spritePonteiros::calculaPontosIndCurva
    #*  -------------------------------------------------------------------------------------------
    #*  CALCULA PONTOS INDICADOR CURVA
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def calculaPontosIndCurva ( self, f_iX0, f_iY0, f_fR1, f_fR2, f_fR3 ):

        #/ nome do método (logger)
        #/ ---------------------------------------------------------------------------------------
        #l_szMetodo = "spritePonteiros::calculaPontosIndCurva"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        for l_iAngle in xrange ( 540 + 1 ):

            #** -----------------------------------------------------------------------------------
            #*/
            l_fAngleAux = math.radians ( float ( l_iAngle ))

            #** -----------------------------------------------------------------------------------
            #*/
            l_fCos = math.cos ( l_fAngleAux )
            l_fSin = math.sin ( l_fAngleAux )

            #** -----------------------------------------------------------------------------------
            #*/
            l_fDeltaX = f_fR1 * l_fCos
            l_fDeltaY = f_fR1 * l_fSin

            #** -----------------------------------------------------------------------------------
            #*/
            self._PointAv1 [ l_iAngle ][ 0 ] = f_iX0 + int ( round ( l_fDeltaX ))
            self._PointAv1 [ l_iAngle ][ 1 ] = f_iY0 - int ( round ( l_fDeltaY ))

            #** -----------------------------------------------------------------------------------
            #*/
            l_fDeltaX = f_fR2 * l_fCos
            l_fDeltaY = f_fR2 * l_fSin

            #** -----------------------------------------------------------------------------------
            #*/
            self._PointAv2 [ l_iAngle ][ 0 ] = f_iX0 + int ( round ( l_fDeltaX ))
            self._PointAv2 [ l_iAngle ][ 1 ] = f_iY0 - int ( round ( l_fDeltaY ))

            #** -----------------------------------------------------------------------------------
            #*/
            l_fDeltaX = f_fR3 * l_fCos
            l_fDeltaY = f_fR3 * l_fSin

            #** -----------------------------------------------------------------------------------
            #*/
            self._PointAv3 [ l_iAngle ][ 0 ] = f_iX0 + int ( round ( l_fDeltaX ))
            self._PointAv3 [ l_iAngle ][ 1 ] = f_iY0 - int ( round ( l_fDeltaY ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  spritePonteiros::calculaPontosHor
    #*  -------------------------------------------------------------------------------------------
    #*  CALCULA PONTOS HORIZONTE
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def calculaPontosHor ( self, f_iX0, f_iY0, f_fR ):

        #/ nome do método (logger)
        #/ ---------------------------------------------------------------------------------------
        #l_szMetodo = "spritePonteiros::calculaPontosHor"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        for l_iAngle in xrange ( 540 + 1 ):

            #** -----------------------------------------------------------------------------------
            #*/
            l_fAngleAux = math.radians ( float ( l_iAngle ))

            #** -----------------------------------------------------------------------------------
            #*/
            l_fDeltaX = f_fR * math.cos ( l_fAngleAux )
            l_fDeltaY = f_fR * math.sin ( l_fAngleAux )

            #** -----------------------------------------------------------------------------------
            #*/
            self._PointHor [ l_iAngle ][ 0 ] = f_iX0 + int ( round ( l_fDeltaX ))
            self._PointHor [ l_iAngle ][ 1 ] = f_iY0 - int ( round ( l_fDeltaY ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  spritePonteiros::doDraw
    #*  -------------------------------------------------------------------------------------------
    #*  desenha os ponteiros do painel de instrumentos
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_srf  - superficie onde desenhar
    #*  @param  f_oAtv - aeronave de referência
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def doDraw ( self, f_srf, f_oAtv=None ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "spritePonteiros::doDraw"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )

        #** ---------------------------------------------------------------------------------------
        #*  desenha joysticks
        #*/
        self.drawJoyX ( f_srf )
        self.drawJoyY ( f_srf )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        if ( None != f_oAtv ):
        
            #** -----------------------------------------------------------------------------------
            #*  desenha bússola
            #*/
            self.drawBussola ( f_srf, f_oAtv )

            #** -----------------------------------------------------------------------------------
            #*  desenha horizonte artificial
            #*/
            self.drawHorizonte ( f_srf, f_oAtv )

            #** -----------------------------------------------------------------------------------
            #*  desenha indicador de curva
            #*/
            self.drawIndicadorCurva ( f_srf, f_oAtv )

            #** -----------------------------------------------------------------------------------
            #*  desenha ponteiros do altímetro
            #*/
            self.drawPontAlt ( f_srf, f_oAtv )

            #** -----------------------------------------------------------------------------------
            #*  desenha ponteiro do climber
            #*/
            self.drawPontClimb ( f_srf, f_oAtv )

            #** -----------------------------------------------------------------------------------
            #*  desenha ponteiro do velocímetro
            #*/
            self.drawPontVeloc ( f_srf, f_oAtv )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  spritePonteiros::drawBussola
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def drawBussola ( self, f_srf, f_oAtv ):

        #/ nome do método (logger)
        #/ ---------------------------------------------------------------------------------------
        l_szMetodo = "spritePonteiros::drawBussola"

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )
        #assert ( f_oAtv )

        #** ---------------------------------------------------------------------------------------
        #*  obtém a proa atual da aeronave
        #*/
        l_iProa = int ( f_oAtv.getProa ())

        #** -----------------------------------------------------------------------------------
        #*/
        l_iBackProa = ( l_iProa + 180 ) % 360

        #** -----------------------------------------------------------------------------------
        #*  formata o valor
        #*/
        l_szTxt = "%03d" % ( l_iProa )
        #assert ( l_szTxt )

        #l_log.info ( "l_szTxt: " + str ( l_szTxt ))

        #** -----------------------------------------------------------------------------------
        #*  cria o texto na cor desejada
        #*/
        l_szTxt = self._font.render ( l_szTxt, 1, locDefs.xCOR_Bus1 )
        #assert ( l_szTxt )

        #** -----------------------------------------------------------------------------------
        #*  make the flight no stand under the icon
        #*/
        l_txtPos = l_szTxt.get_rect ()
        #assert ( l_txtPos )

        #** -----------------------------------------------------------------------------------
        #*  posição do centro do texto de proa na bússola
        #*/
        l_txtPos.center = ( 324, 312 ) 

        #** -----------------------------------------------------------------------------------
        #*  transfere o texto para a superfície recebida
        #*/
        f_srf.blit ( l_szTxt, l_txtPos )

        #** -----------------------------------------------------------------------------------
        #*  formata o valor
        #*/
        l_szTxt = "%03d" % ( l_iBackProa )
        #assert ( l_szTxt )

        #l_log.info ( "l_szTxt: " + str ( l_szTxt ))

        #** -----------------------------------------------------------------------------------
        #*  cria o texto na cor desejada
        #*/
        l_szTxt = self._font.render ( l_szTxt, 1, locDefs.xCOR_Bus2 )
        #assert ( l_szTxt )

        #** -----------------------------------------------------------------------------------
        #*  make the flight no stand under the icon
        #*/
        l_txtPos = l_szTxt.get_rect ()
        #assert ( l_txtPos )

        #** -----------------------------------------------------------------------------------
        #*  posição do centro do texto de proa inversa na bússola
        #*/
        l_txtPos.center = ( 324, 408 )

        #** -----------------------------------------------------------------------------------
        #*  put text na superfície recebida
        #*/
        f_srf.blit ( l_szTxt, l_txtPos )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  spritePonteiros::drawCoordenadas
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def drawCoordenadas ( self, f_srf, f_oAtv ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        l_szMetodo = "spritePonteiros::drawCoordenadas"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )
        #assert ( f_oAtv )

        #** ---------------------------------------------------------------------------------------
        #*  cor do indicador
        #*/
        #l_tCor = ( 255, 0, 0 )

        #** ---------------------------------------------------------------------------------------
        #*/
        #l_szTxt1 = "%03d" % ( Dist )

        #** ---------------------------------------------------------------------------------------
        #*/
        #if ( self._iAfast < 0.0 ):

            #** -----------------------------------------------------------------------------------
            #*/
            #l_fFatorA = -1.0
            #l_cSinalA = '-'

        #** ---------------------------------------------------------------------------------------
        #*/
        #else:

            #** -----------------------------------------------------------------------------------
            #*/
            #l_fFatorA =  1.0
            #l_cSinalA = '+'

        #** ---------------------------------------------------------------------------------------
        #*/
        #l_szTxt2 = "%03d" % ( self._iAfast * l_fFatorA )
        #l_szTxt3 = "%03d" % ( f_oAtv.getAltura () * glbDefs.xCNV_M2ft )

        #** ---------------------------------------------------------------------------------------
        #*/
        #if ( self._fRazao < 0.0 ):

            #** -----------------------------------------------------------------------------------
            #*/
            #l_fFatorR = -1.0
            #l_cSinalR = '-'

        #** ---------------------------------------------------------------------------------------
        #*/
        #else:

            #** -----------------------------------------------------------------------------------
            #*/
            #l_fFatorR = 1.0
            #l_cSinalR = '+'

        #** ---------------------------------------------------------------------------------------
        #*/
        #l_szTxt4 = "%03d" % (( self._fRazao * l_fFatorR ) * glbDefs.xCNV_Ms2ftMin )

        #** ---------------------------------------------------------------------------------------
        #*/
        #!X!EscrevePalavra(5, 14, 10, 12, l_szTxt1)
        #!X!EscrevePalavra(2, 16, 37, 12, l_cSinalA)
        #!X!EscrevePalavra(5, 16, 38, 12, l_szTxt2)

        #!X!EscrevePalavra(5, 14, 64, 12, l_szTxt3)
        #!X!EscrevePalavra(2, 28, 63, 12, l_cSinalR)
        #!X!EscrevePalavra(5, 28, 64, 12, l_szTxt4)

        #** -----------------------------------------------------------------------------------
        #*  obtém a identificação do vôo
        #*/
        #l_szTxt = f_oAtv.getIdent () #+ "/" + f_oAtv.getTipo ()
        #assert ( l_szTxt )

        #** -----------------------------------------------------------------------------------
        #*  cria o texto com Id e tipo na cor desejada
        #*/
        #l_szTxt = self._font.render ( l_szTxt, 1, locDefs.xCOR_FlightNo )
        #assert ( l_szTxt )

        #** -----------------------------------------------------------------------------------
        #*  make the flight no stand under the icon
        #*/
        #l_txtPos = l_szTxt.get_rect ()
        #assert ( l_txtPos )

        #l_txtPos.center = ( l_tScrPos [ 0 ],
        #l_tScrPos [ 1 ] + 11 + l_txtPos.center [ 1 ] )

        #** -----------------------------------------------------------------------------------
        #*  put the flight no. na superfície recebida
        #*/
        #l_bg.set_colorkey ( l_bg.get_at (( 0, 0 )))
        #f_srf.blit ( l_szTxt, l_txtPos )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  spritePonteiros::drawHorizonte
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def drawHorizonte ( self, f_srf, f_oAtv ):

        #/ nome do método (logger)
        #/ ---------------------------------------------------------------------------------------
        #l_szMetodo = "spritePonteiros::drawHorizonte"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )
        #assert ( f_oAtv )

        #** ---------------------------------------------------------------------------------------
        #*  obtém o angulo de arfagem
        #*/
        l_iAngArf = int ( f_oAtv.getAnguloArfagem ())
        #l_log.info ( "l_iAngArf: " + str ( l_iAngArf ))

        #** ---------------------------------------------------------------------------------------
        #*  obtém o angulo da asa
        #*/
        l_iAngAsa = int ( f_oAtv.getAnguloAsa ())
        #l_log.info ( "l_iAngAsa: " + str ( l_iAngAsa ))

        #** ---------------------------------------------------------------------------------------
        #*/
        #if (( l_iAngArf > 90.0 ) and ( l_iAngArf < 270.0 )):
            #l_iFi  = int ( 180.0 + l_iAngArf + l_iAngAsa ) % 360
            #l_iTeta = int ( 360.0 - l_iAngArf + l_iAngAsa ) % 360
        #else:

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iTeta = ( l_iAngArf + l_iAngAsa ) % 360
        l_iFi = ( 540 - l_iAngArf + l_iAngAsa ) % 360

        #** ---------------------------------------------------------------------------------------
        #*/
        pygame.draw.line ( f_srf, locDefs.xCOR_Horz,
                         ( self._PointHor [ l_iTeta ][ 0 ], self._PointHor [ l_iTeta ][ 1 ] ),
                         ( self._PointHor [ l_iFi   ][ 0 ], self._PointHor [ l_iFi   ][ 1 ] ))

        #** ---------------------------------------------------------------------------------------
        #*/
        #guiUtils.LineHorizon ( f_srf,
        #                       self._PointHor [ l_iTeta ][ 0 ], self._PointHor [ l_iTeta ][ 1 ],
        #                       self._PointHor [ l_iFi   ][ 0 ], self._PointHor [ l_iFi   ][ 1 ] )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  spritePonteiros::drawIndicadorCurva
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def drawIndicadorCurva ( self, f_srf, f_oAtv ):

        #/ nome do método (logger)
        #/ ---------------------------------------------------------------------------------------
        #l_szMetodo = "spritePonteiros::drawIndicadorCurva"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )
        #assert ( f_oAtv )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_fAngCurva = 360.0 - f_oAtv.getAnguloAsa ()
        #l_log.info ( "l_fAngCurva: " + str ( l_fAngCurva ))

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iAC = self.Lim ( l_fAngCurva )
        #l_log.info ( "l_iAC: " + str ( l_iAC ))

        #** ---------------------------------------------------------------------------------------
        #*  desenha asa direita
        #*/
        pygame.draw.line ( f_srf, locDefs.xCOR_Av1,
                         ( self._PointAv3 [ l_iAC ][ 0 ], self._PointAv3 [ l_iAC ][ 1 ] ),
                         ( self._PointAv1 [ l_iAC ][ 0 ], self._PointAv1 [ l_iAC ][ 1 ] ))

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iAC = self.Lim ( l_fAngCurva + 180.0 )
        #l_log.info ( "l_iAC: " + str ( l_iAC ))

        #** ---------------------------------------------------------------------------------------
        #*  desenha asa esquerda
        #*/
        pygame.draw.line ( f_srf, locDefs.xCOR_Av2,
                         ( self._PointAv3 [ l_iAC ][ 0 ], self._PointAv3 [ l_iAC ][ 1 ] ),
                         ( self._PointAv1 [ l_iAC ][ 0 ], self._PointAv1 [ l_iAC ][ 1 ] ))

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iAC_1 = self.Lim ( l_fAngCurva +  60.0 )
        #l_log.info ( "l_iAC_1: " + str ( l_iAC_1 ))

        l_iAC_2 = self.Lim ( l_fAngCurva + 120.0 )
        #l_log.info ( "l_iAC_2: " + str ( l_iAC_2 ))

        #** ---------------------------------------------------------------------------------------
        #*  desenha o profundor
        #*/
        pygame.draw.line ( f_srf, locDefs.xCOR_Av4,
                         ( self._PointAv2 [ l_iAC_1 ][ 0 ], self._PointAv2 [ l_iAC_1 ][ 1 ] ),
                         ( self._PointAv2 [ l_iAC_2 ][ 0 ], self._PointAv2 [ l_iAC_2 ][ 1 ] ))

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iAC = self.Lim ( l_fAngCurva + 90.0 )
        #l_log.info ( "l_iAC: " + str ( l_iAC ))

        #** ---------------------------------------------------------------------------------------
        #*  desenha o leme
        #*/
        pygame.draw.line ( f_srf, locDefs.xCOR_Av3,
                         ( self._PointAv3 [ l_iAC ][ 0 ], self._PointAv3 [ l_iAC ][ 1 ] ),
                         ( self._PointAv2 [ l_iAC ][ 0 ], self._PointAv2 [ l_iAC ][ 1 ] ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  spritePonteiros::drawJoyX
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def drawJoyX ( self, f_srf ):

        #/ nome do método (logger)
        #/ ---------------------------------------------------------------------------------------
        #l_szMetodo = "spritePonteiros::drawJoyX"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        #assert ( self._cm )

        #** ---------------------------------------------------------------------------------------
        #*  desenha o ponteiro na tela
        #*/
        guiUtils.PontJoyX ( f_srf, self._cm.getJoyX ())

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  spritePonteiros::drawJoyY
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def drawJoyY ( self, f_srf ):

        #/ nome do método (logger)
        #/ ---------------------------------------------------------------------------------------
        #l_szMetodo = "spritePonteiros::drawJoyY"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        #assert ( self._cm )

        #** ---------------------------------------------------------------------------------------
        #*  atualiza o joystick na tela
        #*/
        guiUtils.PontJoyY ( f_srf, self._cm.getJoyY ())

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  spritePonteiros::drawPontAlt
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def drawPontAlt ( self, f_srf, f_oAtv ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "spritePonteiros::drawPontAlt"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )
        #assert ( f_oAtv )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iAlt = int ( f_oAtv.getAltura () * glbDefs.xCNV_M2ft )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iAlt1 = l_iAlt // 5000

        #** ---------------------------------------------------------------------------------------
        #*/
        #pygame.draw.line ( f_srf, locDefs.xCOR_Alt1,
        #                 ( 532, 360 ),
        #                 ( self._PointAlt1 [ l_iAlt1 ][ 0 ], self._PointAlt1 [ l_iAlt1 ][ 1 ] ))

        guiUtils.PontAlt1 ( f_srf,
                            self._PointAlt1 [ l_iAlt1 ][ 0 ],
                            self._PointAlt1 [ l_iAlt1 ][ 1 ], self._CorAlt1 )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iAlt2 = ( l_iAlt + 100 ) % 10000 // 200

        #** ---------------------------------------------------------------------------------------
        #*/
        pygame.draw.line ( f_srf, locDefs.xCOR_Alt2,
                         ( 532, 120 ),
                         ( self._PointAlt2 [ l_iAlt2 ][ 0 ], self._PointAlt2 [ l_iAlt2 ][ 1 ] ))

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iAlt3 = ( l_iAlt + 10 ) % 1000 // 20

        #** ---------------------------------------------------------------------------------------
        #*/
        pygame.draw.line ( f_srf, locDefs.xCOR_Alt3,
                         ( 532, 120 ),
                         ( self._PointAlt3 [ l_iAlt3 ][ 0 ], self._PointAlt3 [ l_iAlt3 ][ 1 ] ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  spritePonteiros::drawPontClimb
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def drawPontClimb ( self, f_srf, f_oAtv ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "spritePonteiros::drawPontClimb"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )
        #assert ( f_oAtv )

        #** ---------------------------------------------------------------------------------------
        #*  obtém a razão (em ft/min)
        #*/
        l_iRaz = int ( round ( f_oAtv.getRazaoAtu () * glbDefs.xCNV_Ms2ftMin ))

        #** ---------------------------------------------------------------------------------------
        #*  limita valores de razão
        #*/
        if ( l_iRaz >= 1990 ):

            #** -------------------------------------------------------------------------------
            #*/
            l_iRaz = 1990

        #** -----------------------------------------------------------------------------------
        #*/
        elif ( l_iRaz <= -1990 ):

            #** -------------------------------------------------------------------------------
            #*/
            l_iRaz = -1990

        #** -----------------------------------------------------------------------------------
        #*  calcula o índice 
        #*/
        l_iI = (( l_iRaz + 10 ) // 20 ) + 100
        #l_log.info ( "l_iI: " + str ( l_iI ))

        #** -----------------------------------------------------------------------------------
        #*/
        pygame.draw.line ( f_srf, locDefs.xCOR_Climb,
                         ( 532, 360 ),
                         ( self._PointClimb [ l_iI ][ 0 ], self._PointClimb [ l_iI ][ 1 ] ))

        #l_log.info ( "l_iRaz: " + str ( l_iRaz ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  spritePonteiros::drawPontVeloc
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def drawPontVeloc ( self, f_srf, f_oAtv ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "spritePonteiros::drawPontVeloc"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )
        #assert ( f_oAtv )

        #** ---------------------------------------------------------------------------------------
        #*  obtém a velocidade atual da aeronave em knots
        #*/
        l_iVel = int ( round ( f_oAtv.getVelocidade () * glbDefs.xCNV_Ms2Knots ))

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( l_iVel < 60 ):

            #** -----------------------------------------------------------------------------------
            #*/
            l_iVel = 60

        #** ---------------------------------------------------------------------------------------
        #*/
        elif ( l_iVel > 540 ):

            #** -----------------------------------------------------------------------------------
            #*/
            l_iVel = 540

        #** ---------------------------------------------------------------------------------------
        #*  60 < vel <= 200 ? 
        #*/
        if ( 60 <= l_iVel <= 200 ):

            #** -----------------------------------------------------------------------------------
            #*/
            l_iVel = ( l_iVel // 2 ) * 2

            #** -----------------------------------------------------------------------------------
            #*  desenha ponteiro a direita
            #*/
            pygame.draw.line ( f_srf, locDefs.xCOR_Veloc,
                             ( 106, 120 ),
                             ( self._PointVeloc [ l_iVel ][ 0 ], self._PointVeloc [ l_iVel ][ 1 ] ))

        #** ---------------------------------------------------------------------------------------
        #*  senão, 200 < vel < 540 
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*/
            l_iVel = ( l_iVel // 5 ) * 5

            #** -----------------------------------------------------------------------------------
            #*  desenha ponteiro a esquerda
            #*/
            pygame.draw.line ( f_srf, locDefs.xCOR_Veloc,
                             ( 106, 120 ),
                             ( self._PointVeloc [ l_iVel ][ 0 ], self._PointVeloc [ l_iVel ][ 1 ] ))

        #l_log.info ( "l_iVel: " + str ( l_iVel ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  spritePonteiros::LimitaAngulo
    #*  -------------------------------------------------------------------------------------------
    #*  não permite que os ângulos assumam valores maiores que 360 graus e nem que assumam valores
    #*  menores que 0 grau.
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def Lim ( self, f_fAng ):

        #/ nome do método (logger)
        #/ ---------------------------------------------------------------------------------------
        #l_szMetodo = "spritePonteiros::Lim"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( type ( float) == type ( f_fAng ))

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( f_fAng < 360.0 ):

            #** -----------------------------------------------------------------------------------
            #*/
            l_iResp = int ( round ( f_fAng ))

        #** ---------------------------------------------------------------------------------------
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*/
            l_iResp = int ( round ( f_fAng )) % 360

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( l_iResp )

    #** ===========================================================================================
    #*  acesso a área de dados do objeto
    #*  ===========================================================================================
    #*/

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "spritePonteiros" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** ----------------------------------------------------------------------------------------------- *
